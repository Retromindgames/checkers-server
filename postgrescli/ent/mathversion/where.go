// Code generated by ent, DO NOT EDIT.

package mathversion

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEQ(FieldName, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEQ(FieldVersion, v))
}

// Volatility applies equality check predicate on the "volatility" field. It's identical to VolatilityEQ.
func Volatility(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEQ(FieldVolatility, v))
}

// Rtp applies equality check predicate on the "rtp" field. It's identical to RtpEQ.
func Rtp(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEQ(FieldRtp, v))
}

// MaxWin applies equality check predicate on the "max_win" field. It's identical to MaxWinEQ.
func MaxWin(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEQ(FieldMaxWin, v))
}

// CanBuyBonus applies equality check predicate on the "can_buy_bonus" field. It's identical to CanBuyBonusEQ.
func CanBuyBonus(v bool) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEQ(FieldCanBuyBonus, v))
}

// URLReleaseNote applies equality check predicate on the "url_release_note" field. It's identical to URLReleaseNoteEQ.
func URLReleaseNote(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEQ(FieldURLReleaseNote, v))
}

// Deprecated applies equality check predicate on the "deprecated" field. It's identical to DeprecatedEQ.
func Deprecated(v bool) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEQ(FieldDeprecated, v))
}

// CanAnteBet applies equality check predicate on the "can_ante_bet" field. It's identical to CanAnteBetEQ.
func CanAnteBet(v bool) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEQ(FieldCanAnteBet, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldContainsFold(FieldName, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldContainsFold(FieldVersion, v))
}

// VolatilityEQ applies the EQ predicate on the "volatility" field.
func VolatilityEQ(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEQ(FieldVolatility, v))
}

// VolatilityNEQ applies the NEQ predicate on the "volatility" field.
func VolatilityNEQ(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldNEQ(FieldVolatility, v))
}

// VolatilityIn applies the In predicate on the "volatility" field.
func VolatilityIn(vs ...int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldIn(FieldVolatility, vs...))
}

// VolatilityNotIn applies the NotIn predicate on the "volatility" field.
func VolatilityNotIn(vs ...int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldNotIn(FieldVolatility, vs...))
}

// VolatilityGT applies the GT predicate on the "volatility" field.
func VolatilityGT(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldGT(FieldVolatility, v))
}

// VolatilityGTE applies the GTE predicate on the "volatility" field.
func VolatilityGTE(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldGTE(FieldVolatility, v))
}

// VolatilityLT applies the LT predicate on the "volatility" field.
func VolatilityLT(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldLT(FieldVolatility, v))
}

// VolatilityLTE applies the LTE predicate on the "volatility" field.
func VolatilityLTE(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldLTE(FieldVolatility, v))
}

// RtpEQ applies the EQ predicate on the "rtp" field.
func RtpEQ(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEQ(FieldRtp, v))
}

// RtpNEQ applies the NEQ predicate on the "rtp" field.
func RtpNEQ(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldNEQ(FieldRtp, v))
}

// RtpIn applies the In predicate on the "rtp" field.
func RtpIn(vs ...int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldIn(FieldRtp, vs...))
}

// RtpNotIn applies the NotIn predicate on the "rtp" field.
func RtpNotIn(vs ...int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldNotIn(FieldRtp, vs...))
}

// RtpGT applies the GT predicate on the "rtp" field.
func RtpGT(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldGT(FieldRtp, v))
}

// RtpGTE applies the GTE predicate on the "rtp" field.
func RtpGTE(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldGTE(FieldRtp, v))
}

// RtpLT applies the LT predicate on the "rtp" field.
func RtpLT(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldLT(FieldRtp, v))
}

// RtpLTE applies the LTE predicate on the "rtp" field.
func RtpLTE(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldLTE(FieldRtp, v))
}

// MaxWinEQ applies the EQ predicate on the "max_win" field.
func MaxWinEQ(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEQ(FieldMaxWin, v))
}

// MaxWinNEQ applies the NEQ predicate on the "max_win" field.
func MaxWinNEQ(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldNEQ(FieldMaxWin, v))
}

// MaxWinIn applies the In predicate on the "max_win" field.
func MaxWinIn(vs ...int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldIn(FieldMaxWin, vs...))
}

// MaxWinNotIn applies the NotIn predicate on the "max_win" field.
func MaxWinNotIn(vs ...int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldNotIn(FieldMaxWin, vs...))
}

// MaxWinGT applies the GT predicate on the "max_win" field.
func MaxWinGT(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldGT(FieldMaxWin, v))
}

// MaxWinGTE applies the GTE predicate on the "max_win" field.
func MaxWinGTE(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldGTE(FieldMaxWin, v))
}

// MaxWinLT applies the LT predicate on the "max_win" field.
func MaxWinLT(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldLT(FieldMaxWin, v))
}

// MaxWinLTE applies the LTE predicate on the "max_win" field.
func MaxWinLTE(v int) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldLTE(FieldMaxWin, v))
}

// CanBuyBonusEQ applies the EQ predicate on the "can_buy_bonus" field.
func CanBuyBonusEQ(v bool) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEQ(FieldCanBuyBonus, v))
}

// CanBuyBonusNEQ applies the NEQ predicate on the "can_buy_bonus" field.
func CanBuyBonusNEQ(v bool) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldNEQ(FieldCanBuyBonus, v))
}

// URLReleaseNoteEQ applies the EQ predicate on the "url_release_note" field.
func URLReleaseNoteEQ(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEQ(FieldURLReleaseNote, v))
}

// URLReleaseNoteNEQ applies the NEQ predicate on the "url_release_note" field.
func URLReleaseNoteNEQ(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldNEQ(FieldURLReleaseNote, v))
}

// URLReleaseNoteIn applies the In predicate on the "url_release_note" field.
func URLReleaseNoteIn(vs ...string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldIn(FieldURLReleaseNote, vs...))
}

// URLReleaseNoteNotIn applies the NotIn predicate on the "url_release_note" field.
func URLReleaseNoteNotIn(vs ...string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldNotIn(FieldURLReleaseNote, vs...))
}

// URLReleaseNoteGT applies the GT predicate on the "url_release_note" field.
func URLReleaseNoteGT(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldGT(FieldURLReleaseNote, v))
}

// URLReleaseNoteGTE applies the GTE predicate on the "url_release_note" field.
func URLReleaseNoteGTE(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldGTE(FieldURLReleaseNote, v))
}

// URLReleaseNoteLT applies the LT predicate on the "url_release_note" field.
func URLReleaseNoteLT(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldLT(FieldURLReleaseNote, v))
}

// URLReleaseNoteLTE applies the LTE predicate on the "url_release_note" field.
func URLReleaseNoteLTE(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldLTE(FieldURLReleaseNote, v))
}

// URLReleaseNoteContains applies the Contains predicate on the "url_release_note" field.
func URLReleaseNoteContains(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldContains(FieldURLReleaseNote, v))
}

// URLReleaseNoteHasPrefix applies the HasPrefix predicate on the "url_release_note" field.
func URLReleaseNoteHasPrefix(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldHasPrefix(FieldURLReleaseNote, v))
}

// URLReleaseNoteHasSuffix applies the HasSuffix predicate on the "url_release_note" field.
func URLReleaseNoteHasSuffix(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldHasSuffix(FieldURLReleaseNote, v))
}

// URLReleaseNoteEqualFold applies the EqualFold predicate on the "url_release_note" field.
func URLReleaseNoteEqualFold(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEqualFold(FieldURLReleaseNote, v))
}

// URLReleaseNoteContainsFold applies the ContainsFold predicate on the "url_release_note" field.
func URLReleaseNoteContainsFold(v string) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldContainsFold(FieldURLReleaseNote, v))
}

// DeprecatedEQ applies the EQ predicate on the "deprecated" field.
func DeprecatedEQ(v bool) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEQ(FieldDeprecated, v))
}

// DeprecatedNEQ applies the NEQ predicate on the "deprecated" field.
func DeprecatedNEQ(v bool) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldNEQ(FieldDeprecated, v))
}

// CanAnteBetEQ applies the EQ predicate on the "can_ante_bet" field.
func CanAnteBetEQ(v bool) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldEQ(FieldCanAnteBet, v))
}

// CanAnteBetNEQ applies the NEQ predicate on the "can_ante_bet" field.
func CanAnteBetNEQ(v bool) predicate.MathVersion {
	return predicate.MathVersion(sql.FieldNEQ(FieldCanAnteBet, v))
}

// HasSessions applies the HasEdge predicate on the "sessions" edge.
func HasSessions() predicate.MathVersion {
	return predicate.MathVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSessionsWith applies the HasEdge predicate on the "sessions" edge with a given conditions (other predicates).
func HasSessionsWith(preds ...predicate.Session) predicate.MathVersion {
	return predicate.MathVersion(func(s *sql.Selector) {
		step := newSessionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGameConfigs applies the HasEdge predicate on the "game_configs" edge.
func HasGameConfigs() predicate.MathVersion {
	return predicate.MathVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GameConfigsTable, GameConfigsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGameConfigsWith applies the HasEdge predicate on the "game_configs" edge with a given conditions (other predicates).
func HasGameConfigsWith(preds ...predicate.GameConfig) predicate.MathVersion {
	return predicate.MathVersion(func(s *sql.Selector) {
		step := newGameConfigsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MathVersion) predicate.MathVersion {
	return predicate.MathVersion(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MathVersion) predicate.MathVersion {
	return predicate.MathVersion(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MathVersion) predicate.MathVersion {
	return predicate.MathVersion(sql.NotPredicates(p))
}
