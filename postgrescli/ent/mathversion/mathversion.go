// Code generated by ent, DO NOT EDIT.

package mathversion

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the mathversion type in the database.
	Label = "math_version"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldVolatility holds the string denoting the volatility field in the database.
	FieldVolatility = "volatility"
	// FieldRtp holds the string denoting the rtp field in the database.
	FieldRtp = "rtp"
	// FieldMaxWin holds the string denoting the max_win field in the database.
	FieldMaxWin = "max_win"
	// FieldCanBuyBonus holds the string denoting the can_buy_bonus field in the database.
	FieldCanBuyBonus = "can_buy_bonus"
	// FieldURLReleaseNote holds the string denoting the url_release_note field in the database.
	FieldURLReleaseNote = "url_release_note"
	// FieldDeprecated holds the string denoting the deprecated field in the database.
	FieldDeprecated = "deprecated"
	// FieldCanAnteBet holds the string denoting the can_ante_bet field in the database.
	FieldCanAnteBet = "can_ante_bet"
	// EdgeSessions holds the string denoting the sessions edge name in mutations.
	EdgeSessions = "sessions"
	// EdgeGameConfigs holds the string denoting the game_configs edge name in mutations.
	EdgeGameConfigs = "game_configs"
	// Table holds the table name of the mathversion in the database.
	Table = "math_versions"
	// SessionsTable is the table that holds the sessions relation/edge.
	SessionsTable = "sessions"
	// SessionsInverseTable is the table name for the Session entity.
	// It exists in this package in order to avoid circular dependency with the "session" package.
	SessionsInverseTable = "sessions"
	// SessionsColumn is the table column denoting the sessions relation/edge.
	SessionsColumn = "math_version_sessions"
	// GameConfigsTable is the table that holds the game_configs relation/edge.
	GameConfigsTable = "game_configs"
	// GameConfigsInverseTable is the table name for the GameConfig entity.
	// It exists in this package in order to avoid circular dependency with the "gameconfig" package.
	GameConfigsInverseTable = "game_configs"
	// GameConfigsColumn is the table column denoting the game_configs relation/edge.
	GameConfigsColumn = "math_version_game_configs"
)

// Columns holds all SQL columns for mathversion fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldVersion,
	FieldVolatility,
	FieldRtp,
	FieldMaxWin,
	FieldCanBuyBonus,
	FieldURLReleaseNote,
	FieldDeprecated,
	FieldCanAnteBet,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDeprecated holds the default value on creation for the "deprecated" field.
	DefaultDeprecated bool
)

// OrderOption defines the ordering options for the MathVersion queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByVolatility orders the results by the volatility field.
func ByVolatility(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVolatility, opts...).ToFunc()
}

// ByRtp orders the results by the rtp field.
func ByRtp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRtp, opts...).ToFunc()
}

// ByMaxWin orders the results by the max_win field.
func ByMaxWin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxWin, opts...).ToFunc()
}

// ByCanBuyBonus orders the results by the can_buy_bonus field.
func ByCanBuyBonus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanBuyBonus, opts...).ToFunc()
}

// ByURLReleaseNote orders the results by the url_release_note field.
func ByURLReleaseNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURLReleaseNote, opts...).ToFunc()
}

// ByDeprecated orders the results by the deprecated field.
func ByDeprecated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeprecated, opts...).ToFunc()
}

// ByCanAnteBet orders the results by the can_ante_bet field.
func ByCanAnteBet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanAnteBet, opts...).ToFunc()
}

// BySessionsCount orders the results by sessions count.
func BySessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSessionsStep(), opts...)
	}
}

// BySessions orders the results by sessions terms.
func BySessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGameConfigsCount orders the results by game_configs count.
func ByGameConfigsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGameConfigsStep(), opts...)
	}
}

// ByGameConfigs orders the results by game_configs terms.
func ByGameConfigs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameConfigsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
	)
}
func newGameConfigsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameConfigsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GameConfigsTable, GameConfigsColumn),
	)
}
