// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencyversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/mathversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/operator"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
	"github.com/Lavizord/checkers-server/postgrescli/ent/session"
)

// SessionUpdate is the builder for updating Session entities.
type SessionUpdate struct {
	config
	hooks    []Hook
	mutation *SessionMutation
}

// Where appends a list predicates to the SessionUpdate builder.
func (su *SessionUpdate) Where(ps ...predicate.Session) *SessionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCanDemo sets the "can_demo" field.
func (su *SessionUpdate) SetCanDemo(b bool) *SessionUpdate {
	su.mutation.SetCanDemo(b)
	return su
}

// SetNillableCanDemo sets the "can_demo" field if the given value is not nil.
func (su *SessionUpdate) SetNillableCanDemo(b *bool) *SessionUpdate {
	if b != nil {
		su.SetCanDemo(*b)
	}
	return su
}

// SetToken sets the "token" field.
func (su *SessionUpdate) SetToken(s string) *SessionUpdate {
	su.mutation.SetToken(s)
	return su
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (su *SessionUpdate) SetNillableToken(s *string) *SessionUpdate {
	if s != nil {
		su.SetToken(*s)
	}
	return su
}

// SetClientID sets the "client_id" field.
func (su *SessionUpdate) SetClientID(s string) *SessionUpdate {
	su.mutation.SetClientID(s)
	return su
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (su *SessionUpdate) SetNillableClientID(s *string) *SessionUpdate {
	if s != nil {
		su.SetClientID(*s)
	}
	return su
}

// SetDemo sets the "demo" field.
func (su *SessionUpdate) SetDemo(b bool) *SessionUpdate {
	su.mutation.SetDemo(b)
	return su
}

// SetNillableDemo sets the "demo" field if the given value is not nil.
func (su *SessionUpdate) SetNillableDemo(b *bool) *SessionUpdate {
	if b != nil {
		su.SetDemo(*b)
	}
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SessionUpdate) SetCreatedAt(t time.Time) *SessionUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SessionUpdate) SetNillableCreatedAt(t *time.Time) *SessionUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SessionUpdate) SetDeletedAt(t time.Time) *SessionUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SessionUpdate) SetNillableDeletedAt(t *time.Time) *SessionUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *SessionUpdate) ClearDeletedAt() *SessionUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetGamesID sets the "games" edge to the Game entity by ID.
func (su *SessionUpdate) SetGamesID(id int) *SessionUpdate {
	su.mutation.SetGamesID(id)
	return su
}

// SetNillableGamesID sets the "games" edge to the Game entity by ID if the given value is not nil.
func (su *SessionUpdate) SetNillableGamesID(id *int) *SessionUpdate {
	if id != nil {
		su = su.SetGamesID(*id)
	}
	return su
}

// SetGames sets the "games" edge to the Game entity.
func (su *SessionUpdate) SetGames(g *Game) *SessionUpdate {
	return su.SetGamesID(g.ID)
}

// SetGameVersionsID sets the "game_versions" edge to the GameVersion entity by ID.
func (su *SessionUpdate) SetGameVersionsID(id int) *SessionUpdate {
	su.mutation.SetGameVersionsID(id)
	return su
}

// SetNillableGameVersionsID sets the "game_versions" edge to the GameVersion entity by ID if the given value is not nil.
func (su *SessionUpdate) SetNillableGameVersionsID(id *int) *SessionUpdate {
	if id != nil {
		su = su.SetGameVersionsID(*id)
	}
	return su
}

// SetGameVersions sets the "game_versions" edge to the GameVersion entity.
func (su *SessionUpdate) SetGameVersions(g *GameVersion) *SessionUpdate {
	return su.SetGameVersionsID(g.ID)
}

// SetOperatorID sets the "Operator" edge to the Operator entity by ID.
func (su *SessionUpdate) SetOperatorID(id int) *SessionUpdate {
	su.mutation.SetOperatorID(id)
	return su
}

// SetNillableOperatorID sets the "Operator" edge to the Operator entity by ID if the given value is not nil.
func (su *SessionUpdate) SetNillableOperatorID(id *int) *SessionUpdate {
	if id != nil {
		su = su.SetOperatorID(*id)
	}
	return su
}

// SetOperator sets the "Operator" edge to the Operator entity.
func (su *SessionUpdate) SetOperator(o *Operator) *SessionUpdate {
	return su.SetOperatorID(o.ID)
}

// SetCurrencyVersionsID sets the "currency_versions" edge to the CurrencyVersion entity by ID.
func (su *SessionUpdate) SetCurrencyVersionsID(id int) *SessionUpdate {
	su.mutation.SetCurrencyVersionsID(id)
	return su
}

// SetNillableCurrencyVersionsID sets the "currency_versions" edge to the CurrencyVersion entity by ID if the given value is not nil.
func (su *SessionUpdate) SetNillableCurrencyVersionsID(id *int) *SessionUpdate {
	if id != nil {
		su = su.SetCurrencyVersionsID(*id)
	}
	return su
}

// SetCurrencyVersions sets the "currency_versions" edge to the CurrencyVersion entity.
func (su *SessionUpdate) SetCurrencyVersions(c *CurrencyVersion) *SessionUpdate {
	return su.SetCurrencyVersionsID(c.ID)
}

// SetMathVersionsID sets the "math_versions" edge to the MathVersion entity by ID.
func (su *SessionUpdate) SetMathVersionsID(id int) *SessionUpdate {
	su.mutation.SetMathVersionsID(id)
	return su
}

// SetNillableMathVersionsID sets the "math_versions" edge to the MathVersion entity by ID if the given value is not nil.
func (su *SessionUpdate) SetNillableMathVersionsID(id *int) *SessionUpdate {
	if id != nil {
		su = su.SetMathVersionsID(*id)
	}
	return su
}

// SetMathVersions sets the "math_versions" edge to the MathVersion entity.
func (su *SessionUpdate) SetMathVersions(m *MathVersion) *SessionUpdate {
	return su.SetMathVersionsID(m.ID)
}

// Mutation returns the SessionMutation object of the builder.
func (su *SessionUpdate) Mutation() *SessionMutation {
	return su.mutation
}

// ClearGames clears the "games" edge to the Game entity.
func (su *SessionUpdate) ClearGames() *SessionUpdate {
	su.mutation.ClearGames()
	return su
}

// ClearGameVersions clears the "game_versions" edge to the GameVersion entity.
func (su *SessionUpdate) ClearGameVersions() *SessionUpdate {
	su.mutation.ClearGameVersions()
	return su
}

// ClearOperator clears the "Operator" edge to the Operator entity.
func (su *SessionUpdate) ClearOperator() *SessionUpdate {
	su.mutation.ClearOperator()
	return su
}

// ClearCurrencyVersions clears the "currency_versions" edge to the CurrencyVersion entity.
func (su *SessionUpdate) ClearCurrencyVersions() *SessionUpdate {
	su.mutation.ClearCurrencyVersions()
	return su
}

// ClearMathVersions clears the "math_versions" edge to the MathVersion entity.
func (su *SessionUpdate) ClearMathVersions() *SessionUpdate {
	su.mutation.ClearMathVersions()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SessionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SessionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SessionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SessionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(session.Table, session.Columns, sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CanDemo(); ok {
		_spec.SetField(session.FieldCanDemo, field.TypeBool, value)
	}
	if value, ok := su.mutation.Token(); ok {
		_spec.SetField(session.FieldToken, field.TypeString, value)
	}
	if value, ok := su.mutation.ClientID(); ok {
		_spec.SetField(session.FieldClientID, field.TypeString, value)
	}
	if value, ok := su.mutation.Demo(); ok {
		_spec.SetField(session.FieldDemo, field.TypeBool, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(session.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(session.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(session.FieldDeletedAt, field.TypeTime)
	}
	if su.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.GamesTable,
			Columns: []string{session.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.GamesTable,
			Columns: []string{session.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.GameVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.GameVersionsTable,
			Columns: []string{session.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.GameVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.GameVersionsTable,
			Columns: []string{session.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.OperatorTable,
			Columns: []string{session.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.OperatorTable,
			Columns: []string{session.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CurrencyVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.CurrencyVersionsTable,
			Columns: []string{session.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CurrencyVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.CurrencyVersionsTable,
			Columns: []string{session.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.MathVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.MathVersionsTable,
			Columns: []string{session.MathVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mathversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.MathVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.MathVersionsTable,
			Columns: []string{session.MathVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mathversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{session.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SessionUpdateOne is the builder for updating a single Session entity.
type SessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SessionMutation
}

// SetCanDemo sets the "can_demo" field.
func (suo *SessionUpdateOne) SetCanDemo(b bool) *SessionUpdateOne {
	suo.mutation.SetCanDemo(b)
	return suo
}

// SetNillableCanDemo sets the "can_demo" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableCanDemo(b *bool) *SessionUpdateOne {
	if b != nil {
		suo.SetCanDemo(*b)
	}
	return suo
}

// SetToken sets the "token" field.
func (suo *SessionUpdateOne) SetToken(s string) *SessionUpdateOne {
	suo.mutation.SetToken(s)
	return suo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableToken(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetToken(*s)
	}
	return suo
}

// SetClientID sets the "client_id" field.
func (suo *SessionUpdateOne) SetClientID(s string) *SessionUpdateOne {
	suo.mutation.SetClientID(s)
	return suo
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableClientID(s *string) *SessionUpdateOne {
	if s != nil {
		suo.SetClientID(*s)
	}
	return suo
}

// SetDemo sets the "demo" field.
func (suo *SessionUpdateOne) SetDemo(b bool) *SessionUpdateOne {
	suo.mutation.SetDemo(b)
	return suo
}

// SetNillableDemo sets the "demo" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableDemo(b *bool) *SessionUpdateOne {
	if b != nil {
		suo.SetDemo(*b)
	}
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SessionUpdateOne) SetCreatedAt(t time.Time) *SessionUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableCreatedAt(t *time.Time) *SessionUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SessionUpdateOne) SetDeletedAt(t time.Time) *SessionUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableDeletedAt(t *time.Time) *SessionUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *SessionUpdateOne) ClearDeletedAt() *SessionUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetGamesID sets the "games" edge to the Game entity by ID.
func (suo *SessionUpdateOne) SetGamesID(id int) *SessionUpdateOne {
	suo.mutation.SetGamesID(id)
	return suo
}

// SetNillableGamesID sets the "games" edge to the Game entity by ID if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableGamesID(id *int) *SessionUpdateOne {
	if id != nil {
		suo = suo.SetGamesID(*id)
	}
	return suo
}

// SetGames sets the "games" edge to the Game entity.
func (suo *SessionUpdateOne) SetGames(g *Game) *SessionUpdateOne {
	return suo.SetGamesID(g.ID)
}

// SetGameVersionsID sets the "game_versions" edge to the GameVersion entity by ID.
func (suo *SessionUpdateOne) SetGameVersionsID(id int) *SessionUpdateOne {
	suo.mutation.SetGameVersionsID(id)
	return suo
}

// SetNillableGameVersionsID sets the "game_versions" edge to the GameVersion entity by ID if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableGameVersionsID(id *int) *SessionUpdateOne {
	if id != nil {
		suo = suo.SetGameVersionsID(*id)
	}
	return suo
}

// SetGameVersions sets the "game_versions" edge to the GameVersion entity.
func (suo *SessionUpdateOne) SetGameVersions(g *GameVersion) *SessionUpdateOne {
	return suo.SetGameVersionsID(g.ID)
}

// SetOperatorID sets the "Operator" edge to the Operator entity by ID.
func (suo *SessionUpdateOne) SetOperatorID(id int) *SessionUpdateOne {
	suo.mutation.SetOperatorID(id)
	return suo
}

// SetNillableOperatorID sets the "Operator" edge to the Operator entity by ID if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableOperatorID(id *int) *SessionUpdateOne {
	if id != nil {
		suo = suo.SetOperatorID(*id)
	}
	return suo
}

// SetOperator sets the "Operator" edge to the Operator entity.
func (suo *SessionUpdateOne) SetOperator(o *Operator) *SessionUpdateOne {
	return suo.SetOperatorID(o.ID)
}

// SetCurrencyVersionsID sets the "currency_versions" edge to the CurrencyVersion entity by ID.
func (suo *SessionUpdateOne) SetCurrencyVersionsID(id int) *SessionUpdateOne {
	suo.mutation.SetCurrencyVersionsID(id)
	return suo
}

// SetNillableCurrencyVersionsID sets the "currency_versions" edge to the CurrencyVersion entity by ID if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableCurrencyVersionsID(id *int) *SessionUpdateOne {
	if id != nil {
		suo = suo.SetCurrencyVersionsID(*id)
	}
	return suo
}

// SetCurrencyVersions sets the "currency_versions" edge to the CurrencyVersion entity.
func (suo *SessionUpdateOne) SetCurrencyVersions(c *CurrencyVersion) *SessionUpdateOne {
	return suo.SetCurrencyVersionsID(c.ID)
}

// SetMathVersionsID sets the "math_versions" edge to the MathVersion entity by ID.
func (suo *SessionUpdateOne) SetMathVersionsID(id int) *SessionUpdateOne {
	suo.mutation.SetMathVersionsID(id)
	return suo
}

// SetNillableMathVersionsID sets the "math_versions" edge to the MathVersion entity by ID if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableMathVersionsID(id *int) *SessionUpdateOne {
	if id != nil {
		suo = suo.SetMathVersionsID(*id)
	}
	return suo
}

// SetMathVersions sets the "math_versions" edge to the MathVersion entity.
func (suo *SessionUpdateOne) SetMathVersions(m *MathVersion) *SessionUpdateOne {
	return suo.SetMathVersionsID(m.ID)
}

// Mutation returns the SessionMutation object of the builder.
func (suo *SessionUpdateOne) Mutation() *SessionMutation {
	return suo.mutation
}

// ClearGames clears the "games" edge to the Game entity.
func (suo *SessionUpdateOne) ClearGames() *SessionUpdateOne {
	suo.mutation.ClearGames()
	return suo
}

// ClearGameVersions clears the "game_versions" edge to the GameVersion entity.
func (suo *SessionUpdateOne) ClearGameVersions() *SessionUpdateOne {
	suo.mutation.ClearGameVersions()
	return suo
}

// ClearOperator clears the "Operator" edge to the Operator entity.
func (suo *SessionUpdateOne) ClearOperator() *SessionUpdateOne {
	suo.mutation.ClearOperator()
	return suo
}

// ClearCurrencyVersions clears the "currency_versions" edge to the CurrencyVersion entity.
func (suo *SessionUpdateOne) ClearCurrencyVersions() *SessionUpdateOne {
	suo.mutation.ClearCurrencyVersions()
	return suo
}

// ClearMathVersions clears the "math_versions" edge to the MathVersion entity.
func (suo *SessionUpdateOne) ClearMathVersions() *SessionUpdateOne {
	suo.mutation.ClearMathVersions()
	return suo
}

// Where appends a list predicates to the SessionUpdate builder.
func (suo *SessionUpdateOne) Where(ps ...predicate.Session) *SessionUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SessionUpdateOne) Select(field string, fields ...string) *SessionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Session entity.
func (suo *SessionUpdateOne) Save(ctx context.Context) (*Session, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SessionUpdateOne) SaveX(ctx context.Context) *Session {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SessionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SessionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SessionUpdateOne) sqlSave(ctx context.Context) (_node *Session, err error) {
	_spec := sqlgraph.NewUpdateSpec(session.Table, session.Columns, sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Session.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, session.FieldID)
		for _, f := range fields {
			if !session.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != session.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CanDemo(); ok {
		_spec.SetField(session.FieldCanDemo, field.TypeBool, value)
	}
	if value, ok := suo.mutation.Token(); ok {
		_spec.SetField(session.FieldToken, field.TypeString, value)
	}
	if value, ok := suo.mutation.ClientID(); ok {
		_spec.SetField(session.FieldClientID, field.TypeString, value)
	}
	if value, ok := suo.mutation.Demo(); ok {
		_spec.SetField(session.FieldDemo, field.TypeBool, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(session.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(session.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(session.FieldDeletedAt, field.TypeTime)
	}
	if suo.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.GamesTable,
			Columns: []string{session.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.GamesTable,
			Columns: []string{session.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.GameVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.GameVersionsTable,
			Columns: []string{session.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.GameVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.GameVersionsTable,
			Columns: []string{session.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.OperatorTable,
			Columns: []string{session.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.OperatorTable,
			Columns: []string{session.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CurrencyVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.CurrencyVersionsTable,
			Columns: []string{session.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CurrencyVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.CurrencyVersionsTable,
			Columns: []string{session.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.MathVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.MathVersionsTable,
			Columns: []string{session.MathVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mathversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.MathVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.MathVersionsTable,
			Columns: []string{session.MathVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mathversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Session{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{session.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
