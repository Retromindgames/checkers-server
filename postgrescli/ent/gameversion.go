// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gametype"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameversion"
)

// GameVersion is the model entity for the GameVersion schema.
type GameVersion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// CanDemo holds the value of the "can_demo" field.
	CanDemo bool `json:"can_demo,omitempty"`
	// CanTournament holds the value of the "can_tournament" field.
	CanTournament bool `json:"can_tournament,omitempty"`
	// CanFreeBets holds the value of the "can_free_bets" field.
	CanFreeBets bool `json:"can_free_bets,omitempty"`
	// CanDropAndWins holds the value of the "can_drop_and_wins" field.
	CanDropAndWins bool `json:"can_drop_and_wins,omitempty"`
	// CanTurbo holds the value of the "can_turbo" field.
	CanTurbo bool `json:"can_turbo,omitempty"`
	// URLMediaPack holds the value of the "url_media_pack" field.
	URLMediaPack string `json:"url_media_pack,omitempty"`
	// URLReleaseNote holds the value of the "url_release_note" field.
	URLReleaseNote string `json:"url_release_note,omitempty"`
	// Deprecated holds the value of the "deprecated" field.
	Deprecated bool `json:"deprecated,omitempty"`
	// AvailableMathVersions holds the value of the "available_math_versions" field.
	AvailableMathVersions []int `json:"available_math_versions,omitempty"`
	// CanAutoBet holds the value of the "can_auto_bet" field.
	CanAutoBet bool `json:"can_auto_bet,omitempty"`
	// URLGameManual holds the value of the "url_game_manual" field.
	URLGameManual string `json:"url_game_manual,omitempty"`
	// CanAutoCashout holds the value of the "can_auto_cashout" field.
	CanAutoCashout bool `json:"can_auto_cashout,omitempty"`
	// CanBuyBonus holds the value of the "can_buy_bonus" field.
	CanBuyBonus bool `json:"can_buy_bonus,omitempty"`
	// CanAnteBet holds the value of the "can_ante_bet" field.
	CanAnteBet bool `json:"can_ante_bet,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameVersionQuery when eager-loading is set.
	Edges                   GameVersionEdges `json:"edges"`
	game_game_versions      *int
	game_type_game_versions *int
	selectValues            sql.SelectValues
}

// GameVersionEdges holds the relations/edges for other nodes in the graph.
type GameVersionEdges struct {
	// Games holds the value of the games edge.
	Games *Game `json:"games,omitempty"`
	// GameType holds the value of the game_type edge.
	GameType *GameType `json:"game_type,omitempty"`
	// Sessions holds the value of the sessions edge.
	Sessions []*Session `json:"sessions,omitempty"`
	// GameConfigs holds the value of the game_configs edge.
	GameConfigs []*GameConfig `json:"game_configs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// GamesOrErr returns the Games value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameVersionEdges) GamesOrErr() (*Game, error) {
	if e.Games != nil {
		return e.Games, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: game.Label}
	}
	return nil, &NotLoadedError{edge: "games"}
}

// GameTypeOrErr returns the GameType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameVersionEdges) GameTypeOrErr() (*GameType, error) {
	if e.GameType != nil {
		return e.GameType, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: gametype.Label}
	}
	return nil, &NotLoadedError{edge: "game_type"}
}

// SessionsOrErr returns the Sessions value or an error if the edge
// was not loaded in eager-loading.
func (e GameVersionEdges) SessionsOrErr() ([]*Session, error) {
	if e.loadedTypes[2] {
		return e.Sessions, nil
	}
	return nil, &NotLoadedError{edge: "sessions"}
}

// GameConfigsOrErr returns the GameConfigs value or an error if the edge
// was not loaded in eager-loading.
func (e GameVersionEdges) GameConfigsOrErr() ([]*GameConfig, error) {
	if e.loadedTypes[3] {
		return e.GameConfigs, nil
	}
	return nil, &NotLoadedError{edge: "game_configs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GameVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gameversion.FieldAvailableMathVersions:
			values[i] = new([]byte)
		case gameversion.FieldCanDemo, gameversion.FieldCanTournament, gameversion.FieldCanFreeBets, gameversion.FieldCanDropAndWins, gameversion.FieldCanTurbo, gameversion.FieldDeprecated, gameversion.FieldCanAutoBet, gameversion.FieldCanAutoCashout, gameversion.FieldCanBuyBonus, gameversion.FieldCanAnteBet:
			values[i] = new(sql.NullBool)
		case gameversion.FieldID:
			values[i] = new(sql.NullInt64)
		case gameversion.FieldVersion, gameversion.FieldURLMediaPack, gameversion.FieldURLReleaseNote, gameversion.FieldURLGameManual:
			values[i] = new(sql.NullString)
		case gameversion.ForeignKeys[0]: // game_game_versions
			values[i] = new(sql.NullInt64)
		case gameversion.ForeignKeys[1]: // game_type_game_versions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GameVersion fields.
func (gv *GameVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gameversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gv.ID = int(value.Int64)
		case gameversion.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				gv.Version = value.String
			}
		case gameversion.FieldCanDemo:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_demo", values[i])
			} else if value.Valid {
				gv.CanDemo = value.Bool
			}
		case gameversion.FieldCanTournament:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_tournament", values[i])
			} else if value.Valid {
				gv.CanTournament = value.Bool
			}
		case gameversion.FieldCanFreeBets:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_free_bets", values[i])
			} else if value.Valid {
				gv.CanFreeBets = value.Bool
			}
		case gameversion.FieldCanDropAndWins:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_drop_and_wins", values[i])
			} else if value.Valid {
				gv.CanDropAndWins = value.Bool
			}
		case gameversion.FieldCanTurbo:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_turbo", values[i])
			} else if value.Valid {
				gv.CanTurbo = value.Bool
			}
		case gameversion.FieldURLMediaPack:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url_media_pack", values[i])
			} else if value.Valid {
				gv.URLMediaPack = value.String
			}
		case gameversion.FieldURLReleaseNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url_release_note", values[i])
			} else if value.Valid {
				gv.URLReleaseNote = value.String
			}
		case gameversion.FieldDeprecated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deprecated", values[i])
			} else if value.Valid {
				gv.Deprecated = value.Bool
			}
		case gameversion.FieldAvailableMathVersions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field available_math_versions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &gv.AvailableMathVersions); err != nil {
					return fmt.Errorf("unmarshal field available_math_versions: %w", err)
				}
			}
		case gameversion.FieldCanAutoBet:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_auto_bet", values[i])
			} else if value.Valid {
				gv.CanAutoBet = value.Bool
			}
		case gameversion.FieldURLGameManual:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url_game_manual", values[i])
			} else if value.Valid {
				gv.URLGameManual = value.String
			}
		case gameversion.FieldCanAutoCashout:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_auto_cashout", values[i])
			} else if value.Valid {
				gv.CanAutoCashout = value.Bool
			}
		case gameversion.FieldCanBuyBonus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_buy_bonus", values[i])
			} else if value.Valid {
				gv.CanBuyBonus = value.Bool
			}
		case gameversion.FieldCanAnteBet:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_ante_bet", values[i])
			} else if value.Valid {
				gv.CanAnteBet = value.Bool
			}
		case gameversion.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field game_game_versions", value)
			} else if value.Valid {
				gv.game_game_versions = new(int)
				*gv.game_game_versions = int(value.Int64)
			}
		case gameversion.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field game_type_game_versions", value)
			} else if value.Valid {
				gv.game_type_game_versions = new(int)
				*gv.game_type_game_versions = int(value.Int64)
			}
		default:
			gv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GameVersion.
// This includes values selected through modifiers, order, etc.
func (gv *GameVersion) Value(name string) (ent.Value, error) {
	return gv.selectValues.Get(name)
}

// QueryGames queries the "games" edge of the GameVersion entity.
func (gv *GameVersion) QueryGames() *GameQuery {
	return NewGameVersionClient(gv.config).QueryGames(gv)
}

// QueryGameType queries the "game_type" edge of the GameVersion entity.
func (gv *GameVersion) QueryGameType() *GameTypeQuery {
	return NewGameVersionClient(gv.config).QueryGameType(gv)
}

// QuerySessions queries the "sessions" edge of the GameVersion entity.
func (gv *GameVersion) QuerySessions() *SessionQuery {
	return NewGameVersionClient(gv.config).QuerySessions(gv)
}

// QueryGameConfigs queries the "game_configs" edge of the GameVersion entity.
func (gv *GameVersion) QueryGameConfigs() *GameConfigQuery {
	return NewGameVersionClient(gv.config).QueryGameConfigs(gv)
}

// Update returns a builder for updating this GameVersion.
// Note that you need to call GameVersion.Unwrap() before calling this method if this GameVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (gv *GameVersion) Update() *GameVersionUpdateOne {
	return NewGameVersionClient(gv.config).UpdateOne(gv)
}

// Unwrap unwraps the GameVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gv *GameVersion) Unwrap() *GameVersion {
	_tx, ok := gv.config.driver.(*txDriver)
	if !ok {
		panic("ent: GameVersion is not a transactional entity")
	}
	gv.config.driver = _tx.drv
	return gv
}

// String implements the fmt.Stringer.
func (gv *GameVersion) String() string {
	var builder strings.Builder
	builder.WriteString("GameVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gv.ID))
	builder.WriteString("version=")
	builder.WriteString(gv.Version)
	builder.WriteString(", ")
	builder.WriteString("can_demo=")
	builder.WriteString(fmt.Sprintf("%v", gv.CanDemo))
	builder.WriteString(", ")
	builder.WriteString("can_tournament=")
	builder.WriteString(fmt.Sprintf("%v", gv.CanTournament))
	builder.WriteString(", ")
	builder.WriteString("can_free_bets=")
	builder.WriteString(fmt.Sprintf("%v", gv.CanFreeBets))
	builder.WriteString(", ")
	builder.WriteString("can_drop_and_wins=")
	builder.WriteString(fmt.Sprintf("%v", gv.CanDropAndWins))
	builder.WriteString(", ")
	builder.WriteString("can_turbo=")
	builder.WriteString(fmt.Sprintf("%v", gv.CanTurbo))
	builder.WriteString(", ")
	builder.WriteString("url_media_pack=")
	builder.WriteString(gv.URLMediaPack)
	builder.WriteString(", ")
	builder.WriteString("url_release_note=")
	builder.WriteString(gv.URLReleaseNote)
	builder.WriteString(", ")
	builder.WriteString("deprecated=")
	builder.WriteString(fmt.Sprintf("%v", gv.Deprecated))
	builder.WriteString(", ")
	builder.WriteString("available_math_versions=")
	builder.WriteString(fmt.Sprintf("%v", gv.AvailableMathVersions))
	builder.WriteString(", ")
	builder.WriteString("can_auto_bet=")
	builder.WriteString(fmt.Sprintf("%v", gv.CanAutoBet))
	builder.WriteString(", ")
	builder.WriteString("url_game_manual=")
	builder.WriteString(gv.URLGameManual)
	builder.WriteString(", ")
	builder.WriteString("can_auto_cashout=")
	builder.WriteString(fmt.Sprintf("%v", gv.CanAutoCashout))
	builder.WriteString(", ")
	builder.WriteString("can_buy_bonus=")
	builder.WriteString(fmt.Sprintf("%v", gv.CanBuyBonus))
	builder.WriteString(", ")
	builder.WriteString("can_ante_bet=")
	builder.WriteString(fmt.Sprintf("%v", gv.CanAnteBet))
	builder.WriteByte(')')
	return builder.String()
}

// GameVersions is a parsable slice of GameVersion.
type GameVersions []*GameVersion
