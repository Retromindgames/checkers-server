// Code generated by ent, DO NOT EDIT.

package currencie

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the currencie type in the database.
	Label = "currencie"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSymbol holds the string denoting the symbol field in the database.
	FieldSymbol = "symbol"
	// FieldThousandsSeparator holds the string denoting the thousands_separator field in the database.
	FieldThousandsSeparator = "thousands_separator"
	// FieldUnitsSeparator holds the string denoting the units_separator field in the database.
	FieldUnitsSeparator = "units_separator"
	// FieldSymbolPosition holds the string denoting the symbol_position field in the database.
	FieldSymbolPosition = "symbol_position"
	// FieldDenominator holds the string denoting the denominator field in the database.
	FieldDenominator = "denominator"
	// EdgeCurrencyVersions holds the string denoting the currency_versions edge name in mutations.
	EdgeCurrencyVersions = "currency_versions"
	// Table holds the table name of the currencie in the database.
	Table = "currencies"
	// CurrencyVersionsTable is the table that holds the currency_versions relation/edge.
	CurrencyVersionsTable = "currency_versions"
	// CurrencyVersionsInverseTable is the table name for the CurrencyVersion entity.
	// It exists in this package in order to avoid circular dependency with the "currencyversion" package.
	CurrencyVersionsInverseTable = "currency_versions"
	// CurrencyVersionsColumn is the table column denoting the currency_versions relation/edge.
	CurrencyVersionsColumn = "currencie_currency_versions"
)

// Columns holds all SQL columns for currencie fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldSymbol,
	FieldThousandsSeparator,
	FieldUnitsSeparator,
	FieldSymbolPosition,
	FieldDenominator,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Currencie queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySymbol orders the results by the symbol field.
func BySymbol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSymbol, opts...).ToFunc()
}

// ByThousandsSeparator orders the results by the thousands_separator field.
func ByThousandsSeparator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThousandsSeparator, opts...).ToFunc()
}

// ByUnitsSeparator orders the results by the units_separator field.
func ByUnitsSeparator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitsSeparator, opts...).ToFunc()
}

// BySymbolPosition orders the results by the symbol_position field.
func BySymbolPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSymbolPosition, opts...).ToFunc()
}

// ByDenominator orders the results by the denominator field.
func ByDenominator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDenominator, opts...).ToFunc()
}

// ByCurrencyVersionsCount orders the results by currency_versions count.
func ByCurrencyVersionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCurrencyVersionsStep(), opts...)
	}
}

// ByCurrencyVersions orders the results by currency_versions terms.
func ByCurrencyVersions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCurrencyVersionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCurrencyVersionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CurrencyVersionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CurrencyVersionsTable, CurrencyVersionsColumn),
	)
}
