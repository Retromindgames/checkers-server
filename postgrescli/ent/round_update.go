// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
	"github.com/Lavizord/checkers-server/postgrescli/ent/round"
	"github.com/Lavizord/checkers-server/postgrescli/ent/transaction"
)

// RoundUpdate is the builder for updating Round entities.
type RoundUpdate struct {
	config
	hooks    []Hook
	mutation *RoundMutation
}

// Where appends a list predicates to the RoundUpdate builder.
func (ru *RoundUpdate) Where(ps ...predicate.Round) *RoundUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetPlatform sets the "platform" field.
func (ru *RoundUpdate) SetPlatform(s string) *RoundUpdate {
	ru.mutation.SetPlatform(s)
	return ru
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (ru *RoundUpdate) SetNillablePlatform(s *string) *RoundUpdate {
	if s != nil {
		ru.SetPlatform(*s)
	}
	return ru
}

// SetOperator sets the "operator" field.
func (ru *RoundUpdate) SetOperator(s string) *RoundUpdate {
	ru.mutation.SetOperator(s)
	return ru
}

// SetNillableOperator sets the "operator" field if the given value is not nil.
func (ru *RoundUpdate) SetNillableOperator(s *string) *RoundUpdate {
	if s != nil {
		ru.SetOperator(*s)
	}
	return ru
}

// SetReels sets the "reels" field.
func (ru *RoundUpdate) SetReels(m map[string]interface{}) *RoundUpdate {
	ru.mutation.SetReels(m)
	return ru
}

// ClearReels clears the value of the "reels" field.
func (ru *RoundUpdate) ClearReels() *RoundUpdate {
	ru.mutation.ClearReels()
	return ru
}

// SetMultipliers sets the "multipliers" field.
func (ru *RoundUpdate) SetMultipliers(m map[string]interface{}) *RoundUpdate {
	ru.mutation.SetMultipliers(m)
	return ru
}

// ClearMultipliers clears the value of the "multipliers" field.
func (ru *RoundUpdate) ClearMultipliers() *RoundUpdate {
	ru.mutation.ClearMultipliers()
	return ru
}

// SetBonusType sets the "bonus_type" field.
func (ru *RoundUpdate) SetBonusType(s string) *RoundUpdate {
	ru.mutation.SetBonusType(s)
	return ru
}

// SetNillableBonusType sets the "bonus_type" field if the given value is not nil.
func (ru *RoundUpdate) SetNillableBonusType(s *string) *RoundUpdate {
	if s != nil {
		ru.SetBonusType(*s)
	}
	return ru
}

// ClearBonusType clears the value of the "bonus_type" field.
func (ru *RoundUpdate) ClearBonusType() *RoundUpdate {
	ru.mutation.ClearBonusType()
	return ru
}

// SetBonusSymbol sets the "bonus_symbol" field.
func (ru *RoundUpdate) SetBonusSymbol(i int) *RoundUpdate {
	ru.mutation.ResetBonusSymbol()
	ru.mutation.SetBonusSymbol(i)
	return ru
}

// SetNillableBonusSymbol sets the "bonus_symbol" field if the given value is not nil.
func (ru *RoundUpdate) SetNillableBonusSymbol(i *int) *RoundUpdate {
	if i != nil {
		ru.SetBonusSymbol(*i)
	}
	return ru
}

// AddBonusSymbol adds i to the "bonus_symbol" field.
func (ru *RoundUpdate) AddBonusSymbol(i int) *RoundUpdate {
	ru.mutation.AddBonusSymbol(i)
	return ru
}

// ClearBonusSymbol clears the value of the "bonus_symbol" field.
func (ru *RoundUpdate) ClearBonusSymbol() *RoundUpdate {
	ru.mutation.ClearBonusSymbol()
	return ru
}

// SetBonusMultiplier sets the "bonus_multiplier" field.
func (ru *RoundUpdate) SetBonusMultiplier(i int) *RoundUpdate {
	ru.mutation.ResetBonusMultiplier()
	ru.mutation.SetBonusMultiplier(i)
	return ru
}

// SetNillableBonusMultiplier sets the "bonus_multiplier" field if the given value is not nil.
func (ru *RoundUpdate) SetNillableBonusMultiplier(i *int) *RoundUpdate {
	if i != nil {
		ru.SetBonusMultiplier(*i)
	}
	return ru
}

// AddBonusMultiplier adds i to the "bonus_multiplier" field.
func (ru *RoundUpdate) AddBonusMultiplier(i int) *RoundUpdate {
	ru.mutation.AddBonusMultiplier(i)
	return ru
}

// ClearBonusMultiplier clears the value of the "bonus_multiplier" field.
func (ru *RoundUpdate) ClearBonusMultiplier() *RoundUpdate {
	ru.mutation.ClearBonusMultiplier()
	return ru
}

// SetTimestamp sets the "timestamp" field.
func (ru *RoundUpdate) SetTimestamp(t time.Time) *RoundUpdate {
	ru.mutation.SetTimestamp(t)
	return ru
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (ru *RoundUpdate) SetNillableTimestamp(t *time.Time) *RoundUpdate {
	if t != nil {
		ru.SetTimestamp(*t)
	}
	return ru
}

// SetRoundType sets the "round_type" field.
func (ru *RoundUpdate) SetRoundType(s string) *RoundUpdate {
	ru.mutation.SetRoundType(s)
	return ru
}

// SetNillableRoundType sets the "round_type" field if the given value is not nil.
func (ru *RoundUpdate) SetNillableRoundType(s *string) *RoundUpdate {
	if s != nil {
		ru.SetRoundType(*s)
	}
	return ru
}

// ClearRoundType clears the value of the "round_type" field.
func (ru *RoundUpdate) ClearRoundType() *RoundUpdate {
	ru.mutation.ClearRoundType()
	return ru
}

// SetPlay sets the "play" field.
func (ru *RoundUpdate) SetPlay(m map[string]interface{}) *RoundUpdate {
	ru.mutation.SetPlay(m)
	return ru
}

// SetFreeSpinsRemaining sets the "free_spins_remaining" field.
func (ru *RoundUpdate) SetFreeSpinsRemaining(i int) *RoundUpdate {
	ru.mutation.ResetFreeSpinsRemaining()
	ru.mutation.SetFreeSpinsRemaining(i)
	return ru
}

// SetNillableFreeSpinsRemaining sets the "free_spins_remaining" field if the given value is not nil.
func (ru *RoundUpdate) SetNillableFreeSpinsRemaining(i *int) *RoundUpdate {
	if i != nil {
		ru.SetFreeSpinsRemaining(*i)
	}
	return ru
}

// AddFreeSpinsRemaining adds i to the "free_spins_remaining" field.
func (ru *RoundUpdate) AddFreeSpinsRemaining(i int) *RoundUpdate {
	ru.mutation.AddFreeSpinsRemaining(i)
	return ru
}

// ClearFreeSpinsRemaining clears the value of the "free_spins_remaining" field.
func (ru *RoundUpdate) ClearFreeSpinsRemaining() *RoundUpdate {
	ru.mutation.ClearFreeSpinsRemaining()
	return ru
}

// SetMathOutput sets the "math_output" field.
func (ru *RoundUpdate) SetMathOutput(s string) *RoundUpdate {
	ru.mutation.SetMathOutput(s)
	return ru
}

// SetNillableMathOutput sets the "math_output" field if the given value is not nil.
func (ru *RoundUpdate) SetNillableMathOutput(s *string) *RoundUpdate {
	if s != nil {
		ru.SetMathOutput(*s)
	}
	return ru
}

// ClearMathOutput clears the value of the "math_output" field.
func (ru *RoundUpdate) ClearMathOutput() *RoundUpdate {
	ru.mutation.ClearMathOutput()
	return ru
}

// SetGameService sets the "game_service" field.
func (ru *RoundUpdate) SetGameService(m map[string]interface{}) *RoundUpdate {
	ru.mutation.SetGameService(m)
	return ru
}

// ClearGameService clears the value of the "game_service" field.
func (ru *RoundUpdate) ClearGameService() *RoundUpdate {
	ru.mutation.ClearGameService()
	return ru
}

// SetFreeSpinsCount sets the "free_spins_count" field.
func (ru *RoundUpdate) SetFreeSpinsCount(i int) *RoundUpdate {
	ru.mutation.ResetFreeSpinsCount()
	ru.mutation.SetFreeSpinsCount(i)
	return ru
}

// SetNillableFreeSpinsCount sets the "free_spins_count" field if the given value is not nil.
func (ru *RoundUpdate) SetNillableFreeSpinsCount(i *int) *RoundUpdate {
	if i != nil {
		ru.SetFreeSpinsCount(*i)
	}
	return ru
}

// AddFreeSpinsCount adds i to the "free_spins_count" field.
func (ru *RoundUpdate) AddFreeSpinsCount(i int) *RoundUpdate {
	ru.mutation.AddFreeSpinsCount(i)
	return ru
}

// ClearFreeSpinsCount clears the value of the "free_spins_count" field.
func (ru *RoundUpdate) ClearFreeSpinsCount() *RoundUpdate {
	ru.mutation.ClearFreeSpinsCount()
	return ru
}

// SetAnteBet sets the "ante_bet" field.
func (ru *RoundUpdate) SetAnteBet(b bool) *RoundUpdate {
	ru.mutation.SetAnteBet(b)
	return ru
}

// SetNillableAnteBet sets the "ante_bet" field if the given value is not nil.
func (ru *RoundUpdate) SetNillableAnteBet(b *bool) *RoundUpdate {
	if b != nil {
		ru.SetAnteBet(*b)
	}
	return ru
}

// ClearAnteBet clears the value of the "ante_bet" field.
func (ru *RoundUpdate) ClearAnteBet() *RoundUpdate {
	ru.mutation.ClearAnteBet()
	return ru
}

// SetBuyBonus sets the "buy_bonus" field.
func (ru *RoundUpdate) SetBuyBonus(s string) *RoundUpdate {
	ru.mutation.SetBuyBonus(s)
	return ru
}

// SetNillableBuyBonus sets the "buy_bonus" field if the given value is not nil.
func (ru *RoundUpdate) SetNillableBuyBonus(s *string) *RoundUpdate {
	if s != nil {
		ru.SetBuyBonus(*s)
	}
	return ru
}

// ClearBuyBonus clears the value of the "buy_bonus" field.
func (ru *RoundUpdate) ClearBuyBonus() *RoundUpdate {
	ru.mutation.ClearBuyBonus()
	return ru
}

// SetCharacter sets the "character" field.
func (ru *RoundUpdate) SetCharacter(i int) *RoundUpdate {
	ru.mutation.ResetCharacter()
	ru.mutation.SetCharacter(i)
	return ru
}

// SetNillableCharacter sets the "character" field if the given value is not nil.
func (ru *RoundUpdate) SetNillableCharacter(i *int) *RoundUpdate {
	if i != nil {
		ru.SetCharacter(*i)
	}
	return ru
}

// AddCharacter adds i to the "character" field.
func (ru *RoundUpdate) AddCharacter(i int) *RoundUpdate {
	ru.mutation.AddCharacter(i)
	return ru
}

// ClearCharacter clears the value of the "character" field.
func (ru *RoundUpdate) ClearCharacter() *RoundUpdate {
	ru.mutation.ClearCharacter()
	return ru
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (ru *RoundUpdate) AddTransactionIDs(ids ...int) *RoundUpdate {
	ru.mutation.AddTransactionIDs(ids...)
	return ru
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (ru *RoundUpdate) AddTransactions(t ...*Transaction) *RoundUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ru.AddTransactionIDs(ids...)
}

// Mutation returns the RoundMutation object of the builder.
func (ru *RoundUpdate) Mutation() *RoundMutation {
	return ru.mutation
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (ru *RoundUpdate) ClearTransactions() *RoundUpdate {
	ru.mutation.ClearTransactions()
	return ru
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (ru *RoundUpdate) RemoveTransactionIDs(ids ...int) *RoundUpdate {
	ru.mutation.RemoveTransactionIDs(ids...)
	return ru
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (ru *RoundUpdate) RemoveTransactions(t ...*Transaction) *RoundUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ru.RemoveTransactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoundUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoundUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoundUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoundUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RoundUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(round.Table, round.Columns, sqlgraph.NewFieldSpec(round.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Platform(); ok {
		_spec.SetField(round.FieldPlatform, field.TypeString, value)
	}
	if value, ok := ru.mutation.Operator(); ok {
		_spec.SetField(round.FieldOperator, field.TypeString, value)
	}
	if value, ok := ru.mutation.Reels(); ok {
		_spec.SetField(round.FieldReels, field.TypeJSON, value)
	}
	if ru.mutation.ReelsCleared() {
		_spec.ClearField(round.FieldReels, field.TypeJSON)
	}
	if value, ok := ru.mutation.Multipliers(); ok {
		_spec.SetField(round.FieldMultipliers, field.TypeJSON, value)
	}
	if ru.mutation.MultipliersCleared() {
		_spec.ClearField(round.FieldMultipliers, field.TypeJSON)
	}
	if value, ok := ru.mutation.BonusType(); ok {
		_spec.SetField(round.FieldBonusType, field.TypeString, value)
	}
	if ru.mutation.BonusTypeCleared() {
		_spec.ClearField(round.FieldBonusType, field.TypeString)
	}
	if value, ok := ru.mutation.BonusSymbol(); ok {
		_spec.SetField(round.FieldBonusSymbol, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedBonusSymbol(); ok {
		_spec.AddField(round.FieldBonusSymbol, field.TypeInt, value)
	}
	if ru.mutation.BonusSymbolCleared() {
		_spec.ClearField(round.FieldBonusSymbol, field.TypeInt)
	}
	if value, ok := ru.mutation.BonusMultiplier(); ok {
		_spec.SetField(round.FieldBonusMultiplier, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedBonusMultiplier(); ok {
		_spec.AddField(round.FieldBonusMultiplier, field.TypeInt, value)
	}
	if ru.mutation.BonusMultiplierCleared() {
		_spec.ClearField(round.FieldBonusMultiplier, field.TypeInt)
	}
	if value, ok := ru.mutation.Timestamp(); ok {
		_spec.SetField(round.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := ru.mutation.RoundType(); ok {
		_spec.SetField(round.FieldRoundType, field.TypeString, value)
	}
	if ru.mutation.RoundTypeCleared() {
		_spec.ClearField(round.FieldRoundType, field.TypeString)
	}
	if value, ok := ru.mutation.Play(); ok {
		_spec.SetField(round.FieldPlay, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.FreeSpinsRemaining(); ok {
		_spec.SetField(round.FieldFreeSpinsRemaining, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedFreeSpinsRemaining(); ok {
		_spec.AddField(round.FieldFreeSpinsRemaining, field.TypeInt, value)
	}
	if ru.mutation.FreeSpinsRemainingCleared() {
		_spec.ClearField(round.FieldFreeSpinsRemaining, field.TypeInt)
	}
	if value, ok := ru.mutation.MathOutput(); ok {
		_spec.SetField(round.FieldMathOutput, field.TypeString, value)
	}
	if ru.mutation.MathOutputCleared() {
		_spec.ClearField(round.FieldMathOutput, field.TypeString)
	}
	if value, ok := ru.mutation.GameService(); ok {
		_spec.SetField(round.FieldGameService, field.TypeJSON, value)
	}
	if ru.mutation.GameServiceCleared() {
		_spec.ClearField(round.FieldGameService, field.TypeJSON)
	}
	if value, ok := ru.mutation.FreeSpinsCount(); ok {
		_spec.SetField(round.FieldFreeSpinsCount, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedFreeSpinsCount(); ok {
		_spec.AddField(round.FieldFreeSpinsCount, field.TypeInt, value)
	}
	if ru.mutation.FreeSpinsCountCleared() {
		_spec.ClearField(round.FieldFreeSpinsCount, field.TypeInt)
	}
	if value, ok := ru.mutation.AnteBet(); ok {
		_spec.SetField(round.FieldAnteBet, field.TypeBool, value)
	}
	if ru.mutation.AnteBetCleared() {
		_spec.ClearField(round.FieldAnteBet, field.TypeBool)
	}
	if value, ok := ru.mutation.BuyBonus(); ok {
		_spec.SetField(round.FieldBuyBonus, field.TypeString, value)
	}
	if ru.mutation.BuyBonusCleared() {
		_spec.ClearField(round.FieldBuyBonus, field.TypeString)
	}
	if value, ok := ru.mutation.Character(); ok {
		_spec.SetField(round.FieldCharacter, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedCharacter(); ok {
		_spec.AddField(round.FieldCharacter, field.TypeInt, value)
	}
	if ru.mutation.CharacterCleared() {
		_spec.ClearField(round.FieldCharacter, field.TypeInt)
	}
	if ru.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.TransactionsTable,
			Columns: []string{round.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !ru.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.TransactionsTable,
			Columns: []string{round.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.TransactionsTable,
			Columns: []string{round.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{round.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoundUpdateOne is the builder for updating a single Round entity.
type RoundUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoundMutation
}

// SetPlatform sets the "platform" field.
func (ruo *RoundUpdateOne) SetPlatform(s string) *RoundUpdateOne {
	ruo.mutation.SetPlatform(s)
	return ruo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (ruo *RoundUpdateOne) SetNillablePlatform(s *string) *RoundUpdateOne {
	if s != nil {
		ruo.SetPlatform(*s)
	}
	return ruo
}

// SetOperator sets the "operator" field.
func (ruo *RoundUpdateOne) SetOperator(s string) *RoundUpdateOne {
	ruo.mutation.SetOperator(s)
	return ruo
}

// SetNillableOperator sets the "operator" field if the given value is not nil.
func (ruo *RoundUpdateOne) SetNillableOperator(s *string) *RoundUpdateOne {
	if s != nil {
		ruo.SetOperator(*s)
	}
	return ruo
}

// SetReels sets the "reels" field.
func (ruo *RoundUpdateOne) SetReels(m map[string]interface{}) *RoundUpdateOne {
	ruo.mutation.SetReels(m)
	return ruo
}

// ClearReels clears the value of the "reels" field.
func (ruo *RoundUpdateOne) ClearReels() *RoundUpdateOne {
	ruo.mutation.ClearReels()
	return ruo
}

// SetMultipliers sets the "multipliers" field.
func (ruo *RoundUpdateOne) SetMultipliers(m map[string]interface{}) *RoundUpdateOne {
	ruo.mutation.SetMultipliers(m)
	return ruo
}

// ClearMultipliers clears the value of the "multipliers" field.
func (ruo *RoundUpdateOne) ClearMultipliers() *RoundUpdateOne {
	ruo.mutation.ClearMultipliers()
	return ruo
}

// SetBonusType sets the "bonus_type" field.
func (ruo *RoundUpdateOne) SetBonusType(s string) *RoundUpdateOne {
	ruo.mutation.SetBonusType(s)
	return ruo
}

// SetNillableBonusType sets the "bonus_type" field if the given value is not nil.
func (ruo *RoundUpdateOne) SetNillableBonusType(s *string) *RoundUpdateOne {
	if s != nil {
		ruo.SetBonusType(*s)
	}
	return ruo
}

// ClearBonusType clears the value of the "bonus_type" field.
func (ruo *RoundUpdateOne) ClearBonusType() *RoundUpdateOne {
	ruo.mutation.ClearBonusType()
	return ruo
}

// SetBonusSymbol sets the "bonus_symbol" field.
func (ruo *RoundUpdateOne) SetBonusSymbol(i int) *RoundUpdateOne {
	ruo.mutation.ResetBonusSymbol()
	ruo.mutation.SetBonusSymbol(i)
	return ruo
}

// SetNillableBonusSymbol sets the "bonus_symbol" field if the given value is not nil.
func (ruo *RoundUpdateOne) SetNillableBonusSymbol(i *int) *RoundUpdateOne {
	if i != nil {
		ruo.SetBonusSymbol(*i)
	}
	return ruo
}

// AddBonusSymbol adds i to the "bonus_symbol" field.
func (ruo *RoundUpdateOne) AddBonusSymbol(i int) *RoundUpdateOne {
	ruo.mutation.AddBonusSymbol(i)
	return ruo
}

// ClearBonusSymbol clears the value of the "bonus_symbol" field.
func (ruo *RoundUpdateOne) ClearBonusSymbol() *RoundUpdateOne {
	ruo.mutation.ClearBonusSymbol()
	return ruo
}

// SetBonusMultiplier sets the "bonus_multiplier" field.
func (ruo *RoundUpdateOne) SetBonusMultiplier(i int) *RoundUpdateOne {
	ruo.mutation.ResetBonusMultiplier()
	ruo.mutation.SetBonusMultiplier(i)
	return ruo
}

// SetNillableBonusMultiplier sets the "bonus_multiplier" field if the given value is not nil.
func (ruo *RoundUpdateOne) SetNillableBonusMultiplier(i *int) *RoundUpdateOne {
	if i != nil {
		ruo.SetBonusMultiplier(*i)
	}
	return ruo
}

// AddBonusMultiplier adds i to the "bonus_multiplier" field.
func (ruo *RoundUpdateOne) AddBonusMultiplier(i int) *RoundUpdateOne {
	ruo.mutation.AddBonusMultiplier(i)
	return ruo
}

// ClearBonusMultiplier clears the value of the "bonus_multiplier" field.
func (ruo *RoundUpdateOne) ClearBonusMultiplier() *RoundUpdateOne {
	ruo.mutation.ClearBonusMultiplier()
	return ruo
}

// SetTimestamp sets the "timestamp" field.
func (ruo *RoundUpdateOne) SetTimestamp(t time.Time) *RoundUpdateOne {
	ruo.mutation.SetTimestamp(t)
	return ruo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (ruo *RoundUpdateOne) SetNillableTimestamp(t *time.Time) *RoundUpdateOne {
	if t != nil {
		ruo.SetTimestamp(*t)
	}
	return ruo
}

// SetRoundType sets the "round_type" field.
func (ruo *RoundUpdateOne) SetRoundType(s string) *RoundUpdateOne {
	ruo.mutation.SetRoundType(s)
	return ruo
}

// SetNillableRoundType sets the "round_type" field if the given value is not nil.
func (ruo *RoundUpdateOne) SetNillableRoundType(s *string) *RoundUpdateOne {
	if s != nil {
		ruo.SetRoundType(*s)
	}
	return ruo
}

// ClearRoundType clears the value of the "round_type" field.
func (ruo *RoundUpdateOne) ClearRoundType() *RoundUpdateOne {
	ruo.mutation.ClearRoundType()
	return ruo
}

// SetPlay sets the "play" field.
func (ruo *RoundUpdateOne) SetPlay(m map[string]interface{}) *RoundUpdateOne {
	ruo.mutation.SetPlay(m)
	return ruo
}

// SetFreeSpinsRemaining sets the "free_spins_remaining" field.
func (ruo *RoundUpdateOne) SetFreeSpinsRemaining(i int) *RoundUpdateOne {
	ruo.mutation.ResetFreeSpinsRemaining()
	ruo.mutation.SetFreeSpinsRemaining(i)
	return ruo
}

// SetNillableFreeSpinsRemaining sets the "free_spins_remaining" field if the given value is not nil.
func (ruo *RoundUpdateOne) SetNillableFreeSpinsRemaining(i *int) *RoundUpdateOne {
	if i != nil {
		ruo.SetFreeSpinsRemaining(*i)
	}
	return ruo
}

// AddFreeSpinsRemaining adds i to the "free_spins_remaining" field.
func (ruo *RoundUpdateOne) AddFreeSpinsRemaining(i int) *RoundUpdateOne {
	ruo.mutation.AddFreeSpinsRemaining(i)
	return ruo
}

// ClearFreeSpinsRemaining clears the value of the "free_spins_remaining" field.
func (ruo *RoundUpdateOne) ClearFreeSpinsRemaining() *RoundUpdateOne {
	ruo.mutation.ClearFreeSpinsRemaining()
	return ruo
}

// SetMathOutput sets the "math_output" field.
func (ruo *RoundUpdateOne) SetMathOutput(s string) *RoundUpdateOne {
	ruo.mutation.SetMathOutput(s)
	return ruo
}

// SetNillableMathOutput sets the "math_output" field if the given value is not nil.
func (ruo *RoundUpdateOne) SetNillableMathOutput(s *string) *RoundUpdateOne {
	if s != nil {
		ruo.SetMathOutput(*s)
	}
	return ruo
}

// ClearMathOutput clears the value of the "math_output" field.
func (ruo *RoundUpdateOne) ClearMathOutput() *RoundUpdateOne {
	ruo.mutation.ClearMathOutput()
	return ruo
}

// SetGameService sets the "game_service" field.
func (ruo *RoundUpdateOne) SetGameService(m map[string]interface{}) *RoundUpdateOne {
	ruo.mutation.SetGameService(m)
	return ruo
}

// ClearGameService clears the value of the "game_service" field.
func (ruo *RoundUpdateOne) ClearGameService() *RoundUpdateOne {
	ruo.mutation.ClearGameService()
	return ruo
}

// SetFreeSpinsCount sets the "free_spins_count" field.
func (ruo *RoundUpdateOne) SetFreeSpinsCount(i int) *RoundUpdateOne {
	ruo.mutation.ResetFreeSpinsCount()
	ruo.mutation.SetFreeSpinsCount(i)
	return ruo
}

// SetNillableFreeSpinsCount sets the "free_spins_count" field if the given value is not nil.
func (ruo *RoundUpdateOne) SetNillableFreeSpinsCount(i *int) *RoundUpdateOne {
	if i != nil {
		ruo.SetFreeSpinsCount(*i)
	}
	return ruo
}

// AddFreeSpinsCount adds i to the "free_spins_count" field.
func (ruo *RoundUpdateOne) AddFreeSpinsCount(i int) *RoundUpdateOne {
	ruo.mutation.AddFreeSpinsCount(i)
	return ruo
}

// ClearFreeSpinsCount clears the value of the "free_spins_count" field.
func (ruo *RoundUpdateOne) ClearFreeSpinsCount() *RoundUpdateOne {
	ruo.mutation.ClearFreeSpinsCount()
	return ruo
}

// SetAnteBet sets the "ante_bet" field.
func (ruo *RoundUpdateOne) SetAnteBet(b bool) *RoundUpdateOne {
	ruo.mutation.SetAnteBet(b)
	return ruo
}

// SetNillableAnteBet sets the "ante_bet" field if the given value is not nil.
func (ruo *RoundUpdateOne) SetNillableAnteBet(b *bool) *RoundUpdateOne {
	if b != nil {
		ruo.SetAnteBet(*b)
	}
	return ruo
}

// ClearAnteBet clears the value of the "ante_bet" field.
func (ruo *RoundUpdateOne) ClearAnteBet() *RoundUpdateOne {
	ruo.mutation.ClearAnteBet()
	return ruo
}

// SetBuyBonus sets the "buy_bonus" field.
func (ruo *RoundUpdateOne) SetBuyBonus(s string) *RoundUpdateOne {
	ruo.mutation.SetBuyBonus(s)
	return ruo
}

// SetNillableBuyBonus sets the "buy_bonus" field if the given value is not nil.
func (ruo *RoundUpdateOne) SetNillableBuyBonus(s *string) *RoundUpdateOne {
	if s != nil {
		ruo.SetBuyBonus(*s)
	}
	return ruo
}

// ClearBuyBonus clears the value of the "buy_bonus" field.
func (ruo *RoundUpdateOne) ClearBuyBonus() *RoundUpdateOne {
	ruo.mutation.ClearBuyBonus()
	return ruo
}

// SetCharacter sets the "character" field.
func (ruo *RoundUpdateOne) SetCharacter(i int) *RoundUpdateOne {
	ruo.mutation.ResetCharacter()
	ruo.mutation.SetCharacter(i)
	return ruo
}

// SetNillableCharacter sets the "character" field if the given value is not nil.
func (ruo *RoundUpdateOne) SetNillableCharacter(i *int) *RoundUpdateOne {
	if i != nil {
		ruo.SetCharacter(*i)
	}
	return ruo
}

// AddCharacter adds i to the "character" field.
func (ruo *RoundUpdateOne) AddCharacter(i int) *RoundUpdateOne {
	ruo.mutation.AddCharacter(i)
	return ruo
}

// ClearCharacter clears the value of the "character" field.
func (ruo *RoundUpdateOne) ClearCharacter() *RoundUpdateOne {
	ruo.mutation.ClearCharacter()
	return ruo
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (ruo *RoundUpdateOne) AddTransactionIDs(ids ...int) *RoundUpdateOne {
	ruo.mutation.AddTransactionIDs(ids...)
	return ruo
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (ruo *RoundUpdateOne) AddTransactions(t ...*Transaction) *RoundUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ruo.AddTransactionIDs(ids...)
}

// Mutation returns the RoundMutation object of the builder.
func (ruo *RoundUpdateOne) Mutation() *RoundMutation {
	return ruo.mutation
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (ruo *RoundUpdateOne) ClearTransactions() *RoundUpdateOne {
	ruo.mutation.ClearTransactions()
	return ruo
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (ruo *RoundUpdateOne) RemoveTransactionIDs(ids ...int) *RoundUpdateOne {
	ruo.mutation.RemoveTransactionIDs(ids...)
	return ruo
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (ruo *RoundUpdateOne) RemoveTransactions(t ...*Transaction) *RoundUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ruo.RemoveTransactionIDs(ids...)
}

// Where appends a list predicates to the RoundUpdate builder.
func (ruo *RoundUpdateOne) Where(ps ...predicate.Round) *RoundUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoundUpdateOne) Select(field string, fields ...string) *RoundUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Round entity.
func (ruo *RoundUpdateOne) Save(ctx context.Context) (*Round, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoundUpdateOne) SaveX(ctx context.Context) *Round {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoundUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoundUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RoundUpdateOne) sqlSave(ctx context.Context) (_node *Round, err error) {
	_spec := sqlgraph.NewUpdateSpec(round.Table, round.Columns, sqlgraph.NewFieldSpec(round.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Round.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, round.FieldID)
		for _, f := range fields {
			if !round.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != round.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Platform(); ok {
		_spec.SetField(round.FieldPlatform, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Operator(); ok {
		_spec.SetField(round.FieldOperator, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Reels(); ok {
		_spec.SetField(round.FieldReels, field.TypeJSON, value)
	}
	if ruo.mutation.ReelsCleared() {
		_spec.ClearField(round.FieldReels, field.TypeJSON)
	}
	if value, ok := ruo.mutation.Multipliers(); ok {
		_spec.SetField(round.FieldMultipliers, field.TypeJSON, value)
	}
	if ruo.mutation.MultipliersCleared() {
		_spec.ClearField(round.FieldMultipliers, field.TypeJSON)
	}
	if value, ok := ruo.mutation.BonusType(); ok {
		_spec.SetField(round.FieldBonusType, field.TypeString, value)
	}
	if ruo.mutation.BonusTypeCleared() {
		_spec.ClearField(round.FieldBonusType, field.TypeString)
	}
	if value, ok := ruo.mutation.BonusSymbol(); ok {
		_spec.SetField(round.FieldBonusSymbol, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedBonusSymbol(); ok {
		_spec.AddField(round.FieldBonusSymbol, field.TypeInt, value)
	}
	if ruo.mutation.BonusSymbolCleared() {
		_spec.ClearField(round.FieldBonusSymbol, field.TypeInt)
	}
	if value, ok := ruo.mutation.BonusMultiplier(); ok {
		_spec.SetField(round.FieldBonusMultiplier, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedBonusMultiplier(); ok {
		_spec.AddField(round.FieldBonusMultiplier, field.TypeInt, value)
	}
	if ruo.mutation.BonusMultiplierCleared() {
		_spec.ClearField(round.FieldBonusMultiplier, field.TypeInt)
	}
	if value, ok := ruo.mutation.Timestamp(); ok {
		_spec.SetField(round.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.RoundType(); ok {
		_spec.SetField(round.FieldRoundType, field.TypeString, value)
	}
	if ruo.mutation.RoundTypeCleared() {
		_spec.ClearField(round.FieldRoundType, field.TypeString)
	}
	if value, ok := ruo.mutation.Play(); ok {
		_spec.SetField(round.FieldPlay, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.FreeSpinsRemaining(); ok {
		_spec.SetField(round.FieldFreeSpinsRemaining, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedFreeSpinsRemaining(); ok {
		_spec.AddField(round.FieldFreeSpinsRemaining, field.TypeInt, value)
	}
	if ruo.mutation.FreeSpinsRemainingCleared() {
		_spec.ClearField(round.FieldFreeSpinsRemaining, field.TypeInt)
	}
	if value, ok := ruo.mutation.MathOutput(); ok {
		_spec.SetField(round.FieldMathOutput, field.TypeString, value)
	}
	if ruo.mutation.MathOutputCleared() {
		_spec.ClearField(round.FieldMathOutput, field.TypeString)
	}
	if value, ok := ruo.mutation.GameService(); ok {
		_spec.SetField(round.FieldGameService, field.TypeJSON, value)
	}
	if ruo.mutation.GameServiceCleared() {
		_spec.ClearField(round.FieldGameService, field.TypeJSON)
	}
	if value, ok := ruo.mutation.FreeSpinsCount(); ok {
		_spec.SetField(round.FieldFreeSpinsCount, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedFreeSpinsCount(); ok {
		_spec.AddField(round.FieldFreeSpinsCount, field.TypeInt, value)
	}
	if ruo.mutation.FreeSpinsCountCleared() {
		_spec.ClearField(round.FieldFreeSpinsCount, field.TypeInt)
	}
	if value, ok := ruo.mutation.AnteBet(); ok {
		_spec.SetField(round.FieldAnteBet, field.TypeBool, value)
	}
	if ruo.mutation.AnteBetCleared() {
		_spec.ClearField(round.FieldAnteBet, field.TypeBool)
	}
	if value, ok := ruo.mutation.BuyBonus(); ok {
		_spec.SetField(round.FieldBuyBonus, field.TypeString, value)
	}
	if ruo.mutation.BuyBonusCleared() {
		_spec.ClearField(round.FieldBuyBonus, field.TypeString)
	}
	if value, ok := ruo.mutation.Character(); ok {
		_spec.SetField(round.FieldCharacter, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedCharacter(); ok {
		_spec.AddField(round.FieldCharacter, field.TypeInt, value)
	}
	if ruo.mutation.CharacterCleared() {
		_spec.ClearField(round.FieldCharacter, field.TypeInt)
	}
	if ruo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.TransactionsTable,
			Columns: []string{round.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !ruo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.TransactionsTable,
			Columns: []string{round.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.TransactionsTable,
			Columns: []string{round.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Round{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{round.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
