// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Lavizord/checkers-server/postgrescli/ent/round"
	"github.com/Lavizord/checkers-server/postgrescli/ent/transaction"
)

// Transaction is the model entity for the Transaction schema.
type Transaction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int `json:"amount,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// Operator holds the value of the "operator" field.
	Operator string `json:"operator,omitempty"`
	// Client holds the value of the "client" field.
	Client string `json:"client,omitempty"`
	// Game holds the value of the "game" field.
	Game string `json:"game,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// MathProfile holds the value of the "math_profile" field.
	MathProfile string `json:"math_profile,omitempty"`
	// Denominator holds the value of the "denominator" field.
	Denominator int `json:"denominator,omitempty"`
	// FinalBalance holds the value of the "final_balance" field.
	FinalBalance int `json:"final_balance,omitempty"`
	// SeqID holds the value of the "seq_id" field.
	SeqID int `json:"seq_id,omitempty"`
	// Multiplier holds the value of the "multiplier" field.
	Multiplier int `json:"multiplier,omitempty"`
	// GameService holds the value of the "game_service" field.
	GameService map[string]interface{} `json:"game_service,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// OriginalAmount holds the value of the "original_amount" field.
	OriginalAmount int `json:"original_amount,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransactionQuery when eager-loading is set.
	Edges              TransactionEdges `json:"edges"`
	round_transactions *int
	selectValues       sql.SelectValues
}

// TransactionEdges holds the relations/edges for other nodes in the graph.
type TransactionEdges struct {
	// Rounds holds the value of the rounds edge.
	Rounds *Round `json:"rounds,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RoundsOrErr returns the Rounds value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) RoundsOrErr() (*Round, error) {
	if e.Rounds != nil {
		return e.Rounds, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: round.Label}
	}
	return nil, &NotLoadedError{edge: "rounds"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transaction.FieldGameService:
			values[i] = new([]byte)
		case transaction.FieldID, transaction.FieldAmount, transaction.FieldStatus, transaction.FieldDenominator, transaction.FieldFinalBalance, transaction.FieldSeqID, transaction.FieldMultiplier, transaction.FieldOriginalAmount:
			values[i] = new(sql.NullInt64)
		case transaction.FieldType, transaction.FieldCurrency, transaction.FieldPlatform, transaction.FieldOperator, transaction.FieldClient, transaction.FieldGame, transaction.FieldDescription, transaction.FieldMathProfile, transaction.FieldToken:
			values[i] = new(sql.NullString)
		case transaction.FieldDeletedAt, transaction.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case transaction.ForeignKeys[0]: // round_transactions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transaction fields.
func (t *Transaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transaction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case transaction.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				t.Type = value.String
			}
		case transaction.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				t.DeletedAt = value.Time
			}
		case transaction.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				t.Amount = int(value.Int64)
			}
		case transaction.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				t.Currency = value.String
			}
		case transaction.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				t.Platform = value.String
			}
		case transaction.FieldOperator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operator", values[i])
			} else if value.Valid {
				t.Operator = value.String
			}
		case transaction.FieldClient:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client", values[i])
			} else if value.Valid {
				t.Client = value.String
			}
		case transaction.FieldGame:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field game", values[i])
			} else if value.Valid {
				t.Game = value.String
			}
		case transaction.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = int(value.Int64)
			}
		case transaction.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case transaction.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				t.Timestamp = value.Time
			}
		case transaction.FieldMathProfile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field math_profile", values[i])
			} else if value.Valid {
				t.MathProfile = value.String
			}
		case transaction.FieldDenominator:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field denominator", values[i])
			} else if value.Valid {
				t.Denominator = int(value.Int64)
			}
		case transaction.FieldFinalBalance:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field final_balance", values[i])
			} else if value.Valid {
				t.FinalBalance = int(value.Int64)
			}
		case transaction.FieldSeqID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field seq_id", values[i])
			} else if value.Valid {
				t.SeqID = int(value.Int64)
			}
		case transaction.FieldMultiplier:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field multiplier", values[i])
			} else if value.Valid {
				t.Multiplier = int(value.Int64)
			}
		case transaction.FieldGameService:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field game_service", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.GameService); err != nil {
					return fmt.Errorf("unmarshal field game_service: %w", err)
				}
			}
		case transaction.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				t.Token = value.String
			}
		case transaction.FieldOriginalAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field original_amount", values[i])
			} else if value.Valid {
				t.OriginalAmount = int(value.Int64)
			}
		case transaction.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field round_transactions", value)
			} else if value.Valid {
				t.round_transactions = new(int)
				*t.round_transactions = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Transaction.
// This includes values selected through modifiers, order, etc.
func (t *Transaction) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryRounds queries the "rounds" edge of the Transaction entity.
func (t *Transaction) QueryRounds() *RoundQuery {
	return NewTransactionClient(t.config).QueryRounds(t)
}

// Update returns a builder for updating this Transaction.
// Note that you need to call Transaction.Unwrap() before calling this method if this Transaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transaction) Update() *TransactionUpdateOne {
	return NewTransactionClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Transaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transaction) Unwrap() *Transaction {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transaction is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transaction) String() string {
	var builder strings.Builder
	builder.WriteString("Transaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("type=")
	builder.WriteString(t.Type)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(t.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", t.Amount))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(t.Currency)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(t.Platform)
	builder.WriteString(", ")
	builder.WriteString("operator=")
	builder.WriteString(t.Operator)
	builder.WriteString(", ")
	builder.WriteString("client=")
	builder.WriteString(t.Client)
	builder.WriteString(", ")
	builder.WriteString("game=")
	builder.WriteString(t.Game)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(t.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("math_profile=")
	builder.WriteString(t.MathProfile)
	builder.WriteString(", ")
	builder.WriteString("denominator=")
	builder.WriteString(fmt.Sprintf("%v", t.Denominator))
	builder.WriteString(", ")
	builder.WriteString("final_balance=")
	builder.WriteString(fmt.Sprintf("%v", t.FinalBalance))
	builder.WriteString(", ")
	builder.WriteString("seq_id=")
	builder.WriteString(fmt.Sprintf("%v", t.SeqID))
	builder.WriteString(", ")
	builder.WriteString("multiplier=")
	builder.WriteString(fmt.Sprintf("%v", t.Multiplier))
	builder.WriteString(", ")
	builder.WriteString("game_service=")
	builder.WriteString(fmt.Sprintf("%v", t.GameService))
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(t.Token)
	builder.WriteString(", ")
	builder.WriteString("original_amount=")
	builder.WriteString(fmt.Sprintf("%v", t.OriginalAmount))
	builder.WriteByte(')')
	return builder.String()
}

// Transactions is a parsable slice of Transaction.
type Transactions []*Transaction
