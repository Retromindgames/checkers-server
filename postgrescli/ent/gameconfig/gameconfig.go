// Code generated by ent, DO NOT EDIT.

package gameconfig

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the gameconfig type in the database.
	Label = "game_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCanDemo holds the string denoting the can_demo field in the database.
	FieldCanDemo = "can_demo"
	// FieldCanTournament holds the string denoting the can_tournament field in the database.
	FieldCanTournament = "can_tournament"
	// FieldCanFreeBets holds the string denoting the can_free_bets field in the database.
	FieldCanFreeBets = "can_free_bets"
	// FieldCanDropAndWins holds the string denoting the can_drop_and_wins field in the database.
	FieldCanDropAndWins = "can_drop_and_wins"
	// FieldCanTurbo holds the string denoting the can_turbo field in the database.
	FieldCanTurbo = "can_turbo"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldCanAutoBet holds the string denoting the can_auto_bet field in the database.
	FieldCanAutoBet = "can_auto_bet"
	// FieldCanAutoCashout holds the string denoting the can_auto_cashout field in the database.
	FieldCanAutoCashout = "can_auto_cashout"
	// FieldCanAnteBet holds the string denoting the can_ante_bet field in the database.
	FieldCanAnteBet = "can_ante_bet"
	// FieldCanHomeButton holds the string denoting the can_home_button field in the database.
	FieldCanHomeButton = "can_home_button"
	// EdgeMathVersions holds the string denoting the math_versions edge name in mutations.
	EdgeMathVersions = "math_versions"
	// EdgeGameVersions holds the string denoting the game_versions edge name in mutations.
	EdgeGameVersions = "game_versions"
	// EdgeGames holds the string denoting the games edge name in mutations.
	EdgeGames = "games"
	// EdgeOperator holds the string denoting the operator edge name in mutations.
	EdgeOperator = "Operator"
	// EdgeCurrencyVersions holds the string denoting the currency_versions edge name in mutations.
	EdgeCurrencyVersions = "currency_versions"
	// Table holds the table name of the gameconfig in the database.
	Table = "game_configs"
	// MathVersionsTable is the table that holds the math_versions relation/edge.
	MathVersionsTable = "game_configs"
	// MathVersionsInverseTable is the table name for the MathVersion entity.
	// It exists in this package in order to avoid circular dependency with the "mathversion" package.
	MathVersionsInverseTable = "math_versions"
	// MathVersionsColumn is the table column denoting the math_versions relation/edge.
	MathVersionsColumn = "math_version_game_configs"
	// GameVersionsTable is the table that holds the game_versions relation/edge.
	GameVersionsTable = "game_configs"
	// GameVersionsInverseTable is the table name for the GameVersion entity.
	// It exists in this package in order to avoid circular dependency with the "gameversion" package.
	GameVersionsInverseTable = "game_versions"
	// GameVersionsColumn is the table column denoting the game_versions relation/edge.
	GameVersionsColumn = "game_version_game_configs"
	// GamesTable is the table that holds the games relation/edge.
	GamesTable = "game_configs"
	// GamesInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	GamesInverseTable = "games"
	// GamesColumn is the table column denoting the games relation/edge.
	GamesColumn = "game_game_configs"
	// OperatorTable is the table that holds the Operator relation/edge.
	OperatorTable = "game_configs"
	// OperatorInverseTable is the table name for the Operator entity.
	// It exists in this package in order to avoid circular dependency with the "operator" package.
	OperatorInverseTable = "operators"
	// OperatorColumn is the table column denoting the Operator relation/edge.
	OperatorColumn = "operator_game_configs"
	// CurrencyVersionsTable is the table that holds the currency_versions relation/edge.
	CurrencyVersionsTable = "game_configs"
	// CurrencyVersionsInverseTable is the table name for the CurrencyVersion entity.
	// It exists in this package in order to avoid circular dependency with the "currencyversion" package.
	CurrencyVersionsInverseTable = "currency_versions"
	// CurrencyVersionsColumn is the table column denoting the currency_versions relation/edge.
	CurrencyVersionsColumn = "currency_version_game_configs"
)

// Columns holds all SQL columns for gameconfig fields.
var Columns = []string{
	FieldID,
	FieldCanDemo,
	FieldCanTournament,
	FieldCanFreeBets,
	FieldCanDropAndWins,
	FieldCanTurbo,
	FieldIsActive,
	FieldCanAutoBet,
	FieldCanAutoCashout,
	FieldCanAnteBet,
	FieldCanHomeButton,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "game_configs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"currency_version_game_configs",
	"game_game_configs",
	"game_version_game_configs",
	"math_version_game_configs",
	"operator_game_configs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the GameConfig queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCanDemo orders the results by the can_demo field.
func ByCanDemo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanDemo, opts...).ToFunc()
}

// ByCanTournament orders the results by the can_tournament field.
func ByCanTournament(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanTournament, opts...).ToFunc()
}

// ByCanFreeBets orders the results by the can_free_bets field.
func ByCanFreeBets(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanFreeBets, opts...).ToFunc()
}

// ByCanDropAndWins orders the results by the can_drop_and_wins field.
func ByCanDropAndWins(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanDropAndWins, opts...).ToFunc()
}

// ByCanTurbo orders the results by the can_turbo field.
func ByCanTurbo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanTurbo, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByCanAutoBet orders the results by the can_auto_bet field.
func ByCanAutoBet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanAutoBet, opts...).ToFunc()
}

// ByCanAutoCashout orders the results by the can_auto_cashout field.
func ByCanAutoCashout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanAutoCashout, opts...).ToFunc()
}

// ByCanAnteBet orders the results by the can_ante_bet field.
func ByCanAnteBet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanAnteBet, opts...).ToFunc()
}

// ByCanHomeButton orders the results by the can_home_button field.
func ByCanHomeButton(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanHomeButton, opts...).ToFunc()
}

// ByMathVersionsField orders the results by math_versions field.
func ByMathVersionsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMathVersionsStep(), sql.OrderByField(field, opts...))
	}
}

// ByGameVersionsField orders the results by game_versions field.
func ByGameVersionsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameVersionsStep(), sql.OrderByField(field, opts...))
	}
}

// ByGamesField orders the results by games field.
func ByGamesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGamesStep(), sql.OrderByField(field, opts...))
	}
}

// ByOperatorField orders the results by Operator field.
func ByOperatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOperatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByCurrencyVersionsField orders the results by currency_versions field.
func ByCurrencyVersionsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCurrencyVersionsStep(), sql.OrderByField(field, opts...))
	}
}
func newMathVersionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MathVersionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MathVersionsTable, MathVersionsColumn),
	)
}
func newGameVersionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameVersionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GameVersionsTable, GameVersionsColumn),
	)
}
func newGamesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GamesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GamesTable, GamesColumn),
	)
}
func newOperatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OperatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OperatorTable, OperatorColumn),
	)
}
func newCurrencyVersionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CurrencyVersionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CurrencyVersionsTable, CurrencyVersionsColumn),
	)
}
