// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameconfig"
	"github.com/Lavizord/checkers-server/postgrescli/ent/operator"
	"github.com/Lavizord/checkers-server/postgrescli/ent/platform"
	"github.com/Lavizord/checkers-server/postgrescli/ent/session"
)

// OperatorCreate is the builder for creating a Operator entity.
type OperatorCreate struct {
	config
	mutation *OperatorMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (oc *OperatorCreate) SetName(s string) *OperatorCreate {
	oc.mutation.SetName(s)
	return oc
}

// SetCreatedAt sets the "created_at" field.
func (oc *OperatorCreate) SetCreatedAt(t time.Time) *OperatorCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OperatorCreate) SetNillableCreatedAt(t *time.Time) *OperatorCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetDeletedAt sets the "deleted_at" field.
func (oc *OperatorCreate) SetDeletedAt(t time.Time) *OperatorCreate {
	oc.mutation.SetDeletedAt(t)
	return oc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oc *OperatorCreate) SetNillableDeletedAt(t *time.Time) *OperatorCreate {
	if t != nil {
		oc.SetDeletedAt(*t)
	}
	return oc
}

// SetAlias sets the "alias" field.
func (oc *OperatorCreate) SetAlias(s string) *OperatorCreate {
	oc.mutation.SetAlias(s)
	return oc
}

// SetPlatformsID sets the "platforms" edge to the Platform entity by ID.
func (oc *OperatorCreate) SetPlatformsID(id int) *OperatorCreate {
	oc.mutation.SetPlatformsID(id)
	return oc
}

// SetNillablePlatformsID sets the "platforms" edge to the Platform entity by ID if the given value is not nil.
func (oc *OperatorCreate) SetNillablePlatformsID(id *int) *OperatorCreate {
	if id != nil {
		oc = oc.SetPlatformsID(*id)
	}
	return oc
}

// SetPlatforms sets the "platforms" edge to the Platform entity.
func (oc *OperatorCreate) SetPlatforms(p *Platform) *OperatorCreate {
	return oc.SetPlatformsID(p.ID)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (oc *OperatorCreate) AddSessionIDs(ids ...int) *OperatorCreate {
	oc.mutation.AddSessionIDs(ids...)
	return oc
}

// AddSessions adds the "sessions" edges to the Session entity.
func (oc *OperatorCreate) AddSessions(s ...*Session) *OperatorCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return oc.AddSessionIDs(ids...)
}

// AddGameConfigIDs adds the "game_configs" edge to the GameConfig entity by IDs.
func (oc *OperatorCreate) AddGameConfigIDs(ids ...int) *OperatorCreate {
	oc.mutation.AddGameConfigIDs(ids...)
	return oc
}

// AddGameConfigs adds the "game_configs" edges to the GameConfig entity.
func (oc *OperatorCreate) AddGameConfigs(g ...*GameConfig) *OperatorCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return oc.AddGameConfigIDs(ids...)
}

// Mutation returns the OperatorMutation object of the builder.
func (oc *OperatorCreate) Mutation() *OperatorMutation {
	return oc.mutation
}

// Save creates the Operator in the database.
func (oc *OperatorCreate) Save(ctx context.Context) (*Operator, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OperatorCreate) SaveX(ctx context.Context) *Operator {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OperatorCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OperatorCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OperatorCreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := operator.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OperatorCreate) check() error {
	if _, ok := oc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Operator.name"`)}
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Operator.created_at"`)}
	}
	if _, ok := oc.mutation.Alias(); !ok {
		return &ValidationError{Name: "alias", err: errors.New(`ent: missing required field "Operator.alias"`)}
	}
	return nil
}

func (oc *OperatorCreate) sqlSave(ctx context.Context) (*Operator, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OperatorCreate) createSpec() (*Operator, *sqlgraph.CreateSpec) {
	var (
		_node = &Operator{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(operator.Table, sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt))
	)
	if value, ok := oc.mutation.Name(); ok {
		_spec.SetField(operator.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(operator.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.DeletedAt(); ok {
		_spec.SetField(operator.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := oc.mutation.Alias(); ok {
		_spec.SetField(operator.FieldAlias, field.TypeString, value)
		_node.Alias = value
	}
	if nodes := oc.mutation.PlatformsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operator.PlatformsTable,
			Columns: []string{operator.PlatformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platform.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.platform_operator = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.SessionsTable,
			Columns: []string{operator.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.GameConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GameConfigsTable,
			Columns: []string{operator.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OperatorCreateBulk is the builder for creating many Operator entities in bulk.
type OperatorCreateBulk struct {
	config
	err      error
	builders []*OperatorCreate
}

// Save creates the Operator entities in the database.
func (ocb *OperatorCreateBulk) Save(ctx context.Context) ([]*Operator, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Operator, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OperatorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OperatorCreateBulk) SaveX(ctx context.Context) []*Operator {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OperatorCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OperatorCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
