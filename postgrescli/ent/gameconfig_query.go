// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencyversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameconfig"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/mathversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/operator"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
)

// GameConfigQuery is the builder for querying GameConfig entities.
type GameConfigQuery struct {
	config
	ctx                  *QueryContext
	order                []gameconfig.OrderOption
	inters               []Interceptor
	predicates           []predicate.GameConfig
	withMathVersions     *MathVersionQuery
	withGameVersions     *GameVersionQuery
	withGames            *GameQuery
	withOperator         *OperatorQuery
	withCurrencyVersions *CurrencyVersionQuery
	withFKs              bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GameConfigQuery builder.
func (gcq *GameConfigQuery) Where(ps ...predicate.GameConfig) *GameConfigQuery {
	gcq.predicates = append(gcq.predicates, ps...)
	return gcq
}

// Limit the number of records to be returned by this query.
func (gcq *GameConfigQuery) Limit(limit int) *GameConfigQuery {
	gcq.ctx.Limit = &limit
	return gcq
}

// Offset to start from.
func (gcq *GameConfigQuery) Offset(offset int) *GameConfigQuery {
	gcq.ctx.Offset = &offset
	return gcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gcq *GameConfigQuery) Unique(unique bool) *GameConfigQuery {
	gcq.ctx.Unique = &unique
	return gcq
}

// Order specifies how the records should be ordered.
func (gcq *GameConfigQuery) Order(o ...gameconfig.OrderOption) *GameConfigQuery {
	gcq.order = append(gcq.order, o...)
	return gcq
}

// QueryMathVersions chains the current query on the "math_versions" edge.
func (gcq *GameConfigQuery) QueryMathVersions() *MathVersionQuery {
	query := (&MathVersionClient{config: gcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gameconfig.Table, gameconfig.FieldID, selector),
			sqlgraph.To(mathversion.Table, mathversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gameconfig.MathVersionsTable, gameconfig.MathVersionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(gcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGameVersions chains the current query on the "game_versions" edge.
func (gcq *GameConfigQuery) QueryGameVersions() *GameVersionQuery {
	query := (&GameVersionClient{config: gcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gameconfig.Table, gameconfig.FieldID, selector),
			sqlgraph.To(gameversion.Table, gameversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gameconfig.GameVersionsTable, gameconfig.GameVersionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(gcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGames chains the current query on the "games" edge.
func (gcq *GameConfigQuery) QueryGames() *GameQuery {
	query := (&GameClient{config: gcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gameconfig.Table, gameconfig.FieldID, selector),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gameconfig.GamesTable, gameconfig.GamesColumn),
		)
		fromU = sqlgraph.SetNeighbors(gcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOperator chains the current query on the "Operator" edge.
func (gcq *GameConfigQuery) QueryOperator() *OperatorQuery {
	query := (&OperatorClient{config: gcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gameconfig.Table, gameconfig.FieldID, selector),
			sqlgraph.To(operator.Table, operator.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gameconfig.OperatorTable, gameconfig.OperatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(gcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCurrencyVersions chains the current query on the "currency_versions" edge.
func (gcq *GameConfigQuery) QueryCurrencyVersions() *CurrencyVersionQuery {
	query := (&CurrencyVersionClient{config: gcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gameconfig.Table, gameconfig.FieldID, selector),
			sqlgraph.To(currencyversion.Table, currencyversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gameconfig.CurrencyVersionsTable, gameconfig.CurrencyVersionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(gcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GameConfig entity from the query.
// Returns a *NotFoundError when no GameConfig was found.
func (gcq *GameConfigQuery) First(ctx context.Context) (*GameConfig, error) {
	nodes, err := gcq.Limit(1).All(setContextOp(ctx, gcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{gameconfig.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gcq *GameConfigQuery) FirstX(ctx context.Context) *GameConfig {
	node, err := gcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GameConfig ID from the query.
// Returns a *NotFoundError when no GameConfig ID was found.
func (gcq *GameConfigQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gcq.Limit(1).IDs(setContextOp(ctx, gcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{gameconfig.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gcq *GameConfigQuery) FirstIDX(ctx context.Context) int {
	id, err := gcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GameConfig entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GameConfig entity is found.
// Returns a *NotFoundError when no GameConfig entities are found.
func (gcq *GameConfigQuery) Only(ctx context.Context) (*GameConfig, error) {
	nodes, err := gcq.Limit(2).All(setContextOp(ctx, gcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{gameconfig.Label}
	default:
		return nil, &NotSingularError{gameconfig.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gcq *GameConfigQuery) OnlyX(ctx context.Context) *GameConfig {
	node, err := gcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GameConfig ID in the query.
// Returns a *NotSingularError when more than one GameConfig ID is found.
// Returns a *NotFoundError when no entities are found.
func (gcq *GameConfigQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gcq.Limit(2).IDs(setContextOp(ctx, gcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{gameconfig.Label}
	default:
		err = &NotSingularError{gameconfig.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gcq *GameConfigQuery) OnlyIDX(ctx context.Context) int {
	id, err := gcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GameConfigs.
func (gcq *GameConfigQuery) All(ctx context.Context) ([]*GameConfig, error) {
	ctx = setContextOp(ctx, gcq.ctx, ent.OpQueryAll)
	if err := gcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GameConfig, *GameConfigQuery]()
	return withInterceptors[[]*GameConfig](ctx, gcq, qr, gcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gcq *GameConfigQuery) AllX(ctx context.Context) []*GameConfig {
	nodes, err := gcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GameConfig IDs.
func (gcq *GameConfigQuery) IDs(ctx context.Context) (ids []int, err error) {
	if gcq.ctx.Unique == nil && gcq.path != nil {
		gcq.Unique(true)
	}
	ctx = setContextOp(ctx, gcq.ctx, ent.OpQueryIDs)
	if err = gcq.Select(gameconfig.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gcq *GameConfigQuery) IDsX(ctx context.Context) []int {
	ids, err := gcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gcq *GameConfigQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gcq.ctx, ent.OpQueryCount)
	if err := gcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gcq, querierCount[*GameConfigQuery](), gcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gcq *GameConfigQuery) CountX(ctx context.Context) int {
	count, err := gcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gcq *GameConfigQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gcq.ctx, ent.OpQueryExist)
	switch _, err := gcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gcq *GameConfigQuery) ExistX(ctx context.Context) bool {
	exist, err := gcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GameConfigQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gcq *GameConfigQuery) Clone() *GameConfigQuery {
	if gcq == nil {
		return nil
	}
	return &GameConfigQuery{
		config:               gcq.config,
		ctx:                  gcq.ctx.Clone(),
		order:                append([]gameconfig.OrderOption{}, gcq.order...),
		inters:               append([]Interceptor{}, gcq.inters...),
		predicates:           append([]predicate.GameConfig{}, gcq.predicates...),
		withMathVersions:     gcq.withMathVersions.Clone(),
		withGameVersions:     gcq.withGameVersions.Clone(),
		withGames:            gcq.withGames.Clone(),
		withOperator:         gcq.withOperator.Clone(),
		withCurrencyVersions: gcq.withCurrencyVersions.Clone(),
		// clone intermediate query.
		sql:  gcq.sql.Clone(),
		path: gcq.path,
	}
}

// WithMathVersions tells the query-builder to eager-load the nodes that are connected to
// the "math_versions" edge. The optional arguments are used to configure the query builder of the edge.
func (gcq *GameConfigQuery) WithMathVersions(opts ...func(*MathVersionQuery)) *GameConfigQuery {
	query := (&MathVersionClient{config: gcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gcq.withMathVersions = query
	return gcq
}

// WithGameVersions tells the query-builder to eager-load the nodes that are connected to
// the "game_versions" edge. The optional arguments are used to configure the query builder of the edge.
func (gcq *GameConfigQuery) WithGameVersions(opts ...func(*GameVersionQuery)) *GameConfigQuery {
	query := (&GameVersionClient{config: gcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gcq.withGameVersions = query
	return gcq
}

// WithGames tells the query-builder to eager-load the nodes that are connected to
// the "games" edge. The optional arguments are used to configure the query builder of the edge.
func (gcq *GameConfigQuery) WithGames(opts ...func(*GameQuery)) *GameConfigQuery {
	query := (&GameClient{config: gcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gcq.withGames = query
	return gcq
}

// WithOperator tells the query-builder to eager-load the nodes that are connected to
// the "Operator" edge. The optional arguments are used to configure the query builder of the edge.
func (gcq *GameConfigQuery) WithOperator(opts ...func(*OperatorQuery)) *GameConfigQuery {
	query := (&OperatorClient{config: gcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gcq.withOperator = query
	return gcq
}

// WithCurrencyVersions tells the query-builder to eager-load the nodes that are connected to
// the "currency_versions" edge. The optional arguments are used to configure the query builder of the edge.
func (gcq *GameConfigQuery) WithCurrencyVersions(opts ...func(*CurrencyVersionQuery)) *GameConfigQuery {
	query := (&CurrencyVersionClient{config: gcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gcq.withCurrencyVersions = query
	return gcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CanDemo bool `json:"can_demo,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GameConfig.Query().
//		GroupBy(gameconfig.FieldCanDemo).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gcq *GameConfigQuery) GroupBy(field string, fields ...string) *GameConfigGroupBy {
	gcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GameConfigGroupBy{build: gcq}
	grbuild.flds = &gcq.ctx.Fields
	grbuild.label = gameconfig.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CanDemo bool `json:"can_demo,omitempty"`
//	}
//
//	client.GameConfig.Query().
//		Select(gameconfig.FieldCanDemo).
//		Scan(ctx, &v)
func (gcq *GameConfigQuery) Select(fields ...string) *GameConfigSelect {
	gcq.ctx.Fields = append(gcq.ctx.Fields, fields...)
	sbuild := &GameConfigSelect{GameConfigQuery: gcq}
	sbuild.label = gameconfig.Label
	sbuild.flds, sbuild.scan = &gcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GameConfigSelect configured with the given aggregations.
func (gcq *GameConfigQuery) Aggregate(fns ...AggregateFunc) *GameConfigSelect {
	return gcq.Select().Aggregate(fns...)
}

func (gcq *GameConfigQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gcq); err != nil {
				return err
			}
		}
	}
	for _, f := range gcq.ctx.Fields {
		if !gameconfig.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gcq.path != nil {
		prev, err := gcq.path(ctx)
		if err != nil {
			return err
		}
		gcq.sql = prev
	}
	return nil
}

func (gcq *GameConfigQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GameConfig, error) {
	var (
		nodes       = []*GameConfig{}
		withFKs     = gcq.withFKs
		_spec       = gcq.querySpec()
		loadedTypes = [5]bool{
			gcq.withMathVersions != nil,
			gcq.withGameVersions != nil,
			gcq.withGames != nil,
			gcq.withOperator != nil,
			gcq.withCurrencyVersions != nil,
		}
	)
	if gcq.withMathVersions != nil || gcq.withGameVersions != nil || gcq.withGames != nil || gcq.withOperator != nil || gcq.withCurrencyVersions != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, gameconfig.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GameConfig).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GameConfig{config: gcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gcq.withMathVersions; query != nil {
		if err := gcq.loadMathVersions(ctx, query, nodes, nil,
			func(n *GameConfig, e *MathVersion) { n.Edges.MathVersions = e }); err != nil {
			return nil, err
		}
	}
	if query := gcq.withGameVersions; query != nil {
		if err := gcq.loadGameVersions(ctx, query, nodes, nil,
			func(n *GameConfig, e *GameVersion) { n.Edges.GameVersions = e }); err != nil {
			return nil, err
		}
	}
	if query := gcq.withGames; query != nil {
		if err := gcq.loadGames(ctx, query, nodes, nil,
			func(n *GameConfig, e *Game) { n.Edges.Games = e }); err != nil {
			return nil, err
		}
	}
	if query := gcq.withOperator; query != nil {
		if err := gcq.loadOperator(ctx, query, nodes, nil,
			func(n *GameConfig, e *Operator) { n.Edges.Operator = e }); err != nil {
			return nil, err
		}
	}
	if query := gcq.withCurrencyVersions; query != nil {
		if err := gcq.loadCurrencyVersions(ctx, query, nodes, nil,
			func(n *GameConfig, e *CurrencyVersion) { n.Edges.CurrencyVersions = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gcq *GameConfigQuery) loadMathVersions(ctx context.Context, query *MathVersionQuery, nodes []*GameConfig, init func(*GameConfig), assign func(*GameConfig, *MathVersion)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*GameConfig)
	for i := range nodes {
		if nodes[i].math_version_game_configs == nil {
			continue
		}
		fk := *nodes[i].math_version_game_configs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(mathversion.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "math_version_game_configs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gcq *GameConfigQuery) loadGameVersions(ctx context.Context, query *GameVersionQuery, nodes []*GameConfig, init func(*GameConfig), assign func(*GameConfig, *GameVersion)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*GameConfig)
	for i := range nodes {
		if nodes[i].game_version_game_configs == nil {
			continue
		}
		fk := *nodes[i].game_version_game_configs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(gameversion.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "game_version_game_configs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gcq *GameConfigQuery) loadGames(ctx context.Context, query *GameQuery, nodes []*GameConfig, init func(*GameConfig), assign func(*GameConfig, *Game)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*GameConfig)
	for i := range nodes {
		if nodes[i].game_game_configs == nil {
			continue
		}
		fk := *nodes[i].game_game_configs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(game.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "game_game_configs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gcq *GameConfigQuery) loadOperator(ctx context.Context, query *OperatorQuery, nodes []*GameConfig, init func(*GameConfig), assign func(*GameConfig, *Operator)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*GameConfig)
	for i := range nodes {
		if nodes[i].operator_game_configs == nil {
			continue
		}
		fk := *nodes[i].operator_game_configs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(operator.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "operator_game_configs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gcq *GameConfigQuery) loadCurrencyVersions(ctx context.Context, query *CurrencyVersionQuery, nodes []*GameConfig, init func(*GameConfig), assign func(*GameConfig, *CurrencyVersion)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*GameConfig)
	for i := range nodes {
		if nodes[i].currency_version_game_configs == nil {
			continue
		}
		fk := *nodes[i].currency_version_game_configs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(currencyversion.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "currency_version_game_configs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (gcq *GameConfigQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gcq.querySpec()
	_spec.Node.Columns = gcq.ctx.Fields
	if len(gcq.ctx.Fields) > 0 {
		_spec.Unique = gcq.ctx.Unique != nil && *gcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, gcq.driver, _spec)
}

func (gcq *GameConfigQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(gameconfig.Table, gameconfig.Columns, sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt))
	_spec.From = gcq.sql
	if unique := gcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if gcq.path != nil {
		_spec.Unique = true
	}
	if fields := gcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gameconfig.FieldID)
		for i := range fields {
			if fields[i] != gameconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gcq *GameConfigQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gcq.driver.Dialect())
	t1 := builder.Table(gameconfig.Table)
	columns := gcq.ctx.Fields
	if len(columns) == 0 {
		columns = gameconfig.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gcq.sql != nil {
		selector = gcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gcq.ctx.Unique != nil && *gcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range gcq.predicates {
		p(selector)
	}
	for _, p := range gcq.order {
		p(selector)
	}
	if offset := gcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GameConfigGroupBy is the group-by builder for GameConfig entities.
type GameConfigGroupBy struct {
	selector
	build *GameConfigQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gcgb *GameConfigGroupBy) Aggregate(fns ...AggregateFunc) *GameConfigGroupBy {
	gcgb.fns = append(gcgb.fns, fns...)
	return gcgb
}

// Scan applies the selector query and scans the result into the given value.
func (gcgb *GameConfigGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gcgb.build.ctx, ent.OpQueryGroupBy)
	if err := gcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GameConfigQuery, *GameConfigGroupBy](ctx, gcgb.build, gcgb, gcgb.build.inters, v)
}

func (gcgb *GameConfigGroupBy) sqlScan(ctx context.Context, root *GameConfigQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gcgb.fns))
	for _, fn := range gcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gcgb.flds)+len(gcgb.fns))
		for _, f := range *gcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*gcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GameConfigSelect is the builder for selecting fields of GameConfig entities.
type GameConfigSelect struct {
	*GameConfigQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gcs *GameConfigSelect) Aggregate(fns ...AggregateFunc) *GameConfigSelect {
	gcs.fns = append(gcs.fns, fns...)
	return gcs
}

// Scan applies the selector query and scans the result into the given value.
func (gcs *GameConfigSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gcs.ctx, ent.OpQuerySelect)
	if err := gcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GameConfigQuery, *GameConfigSelect](ctx, gcs.GameConfigQuery, gcs, gcs.inters, v)
}

func (gcs *GameConfigSelect) sqlScan(ctx context.Context, root *GameConfigQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gcs.fns))
	for _, fn := range gcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
