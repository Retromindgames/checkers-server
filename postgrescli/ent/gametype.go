// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gametype"
)

// GameType is the model entity for the GameType schema.
type GameType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// ExternalTypeID holds the value of the "external_type_id" field.
	ExternalTypeID string `json:"external_type_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameTypeQuery when eager-loading is set.
	Edges        GameTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GameTypeEdges holds the relations/edges for other nodes in the graph.
type GameTypeEdges struct {
	// Games holds the value of the games edge.
	Games []*Game `json:"games,omitempty"`
	// GameVersions holds the value of the game_versions edge.
	GameVersions []*GameVersion `json:"game_versions,omitempty"`
	// CurrencyVersions holds the value of the currency_versions edge.
	CurrencyVersions []*CurrencyVersion `json:"currency_versions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// GamesOrErr returns the Games value or an error if the edge
// was not loaded in eager-loading.
func (e GameTypeEdges) GamesOrErr() ([]*Game, error) {
	if e.loadedTypes[0] {
		return e.Games, nil
	}
	return nil, &NotLoadedError{edge: "games"}
}

// GameVersionsOrErr returns the GameVersions value or an error if the edge
// was not loaded in eager-loading.
func (e GameTypeEdges) GameVersionsOrErr() ([]*GameVersion, error) {
	if e.loadedTypes[1] {
		return e.GameVersions, nil
	}
	return nil, &NotLoadedError{edge: "game_versions"}
}

// CurrencyVersionsOrErr returns the CurrencyVersions value or an error if the edge
// was not loaded in eager-loading.
func (e GameTypeEdges) CurrencyVersionsOrErr() ([]*CurrencyVersion, error) {
	if e.loadedTypes[2] {
		return e.CurrencyVersions, nil
	}
	return nil, &NotLoadedError{edge: "currency_versions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GameType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gametype.FieldID:
			values[i] = new(sql.NullInt64)
		case gametype.FieldType, gametype.FieldExternalTypeID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GameType fields.
func (gt *GameType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gametype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gt.ID = int(value.Int64)
		case gametype.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				gt.Type = value.String
			}
		case gametype.FieldExternalTypeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_type_id", values[i])
			} else if value.Valid {
				gt.ExternalTypeID = value.String
			}
		default:
			gt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GameType.
// This includes values selected through modifiers, order, etc.
func (gt *GameType) Value(name string) (ent.Value, error) {
	return gt.selectValues.Get(name)
}

// QueryGames queries the "games" edge of the GameType entity.
func (gt *GameType) QueryGames() *GameQuery {
	return NewGameTypeClient(gt.config).QueryGames(gt)
}

// QueryGameVersions queries the "game_versions" edge of the GameType entity.
func (gt *GameType) QueryGameVersions() *GameVersionQuery {
	return NewGameTypeClient(gt.config).QueryGameVersions(gt)
}

// QueryCurrencyVersions queries the "currency_versions" edge of the GameType entity.
func (gt *GameType) QueryCurrencyVersions() *CurrencyVersionQuery {
	return NewGameTypeClient(gt.config).QueryCurrencyVersions(gt)
}

// Update returns a builder for updating this GameType.
// Note that you need to call GameType.Unwrap() before calling this method if this GameType
// was returned from a transaction, and the transaction was committed or rolled back.
func (gt *GameType) Update() *GameTypeUpdateOne {
	return NewGameTypeClient(gt.config).UpdateOne(gt)
}

// Unwrap unwraps the GameType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gt *GameType) Unwrap() *GameType {
	_tx, ok := gt.config.driver.(*txDriver)
	if !ok {
		panic("ent: GameType is not a transactional entity")
	}
	gt.config.driver = _tx.drv
	return gt
}

// String implements the fmt.Stringer.
func (gt *GameType) String() string {
	var builder strings.Builder
	builder.WriteString("GameType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gt.ID))
	builder.WriteString("type=")
	builder.WriteString(gt.Type)
	builder.WriteString(", ")
	builder.WriteString("external_type_id=")
	builder.WriteString(gt.ExternalTypeID)
	builder.WriteByte(')')
	return builder.String()
}

// GameTypes is a parsable slice of GameType.
type GameTypes []*GameType
