// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currency"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencyversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameconfig"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gametype"
	"github.com/Lavizord/checkers-server/postgrescli/ent/session"
)

// CurrencyVersionCreate is the builder for creating a CurrencyVersion entity.
type CurrencyVersionCreate struct {
	config
	mutation *CurrencyVersionMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cvc *CurrencyVersionCreate) SetName(s string) *CurrencyVersionCreate {
	cvc.mutation.SetName(s)
	return cvc
}

// SetMinBet sets the "min_bet" field.
func (cvc *CurrencyVersionCreate) SetMinBet(i int) *CurrencyVersionCreate {
	cvc.mutation.SetMinBet(i)
	return cvc
}

// SetNillableMinBet sets the "min_bet" field if the given value is not nil.
func (cvc *CurrencyVersionCreate) SetNillableMinBet(i *int) *CurrencyVersionCreate {
	if i != nil {
		cvc.SetMinBet(*i)
	}
	return cvc
}

// SetMaxExp sets the "max_exp" field.
func (cvc *CurrencyVersionCreate) SetMaxExp(i int) *CurrencyVersionCreate {
	cvc.mutation.SetMaxExp(i)
	return cvc
}

// SetNillableMaxExp sets the "max_exp" field if the given value is not nil.
func (cvc *CurrencyVersionCreate) SetNillableMaxExp(i *int) *CurrencyVersionCreate {
	if i != nil {
		cvc.SetMaxExp(*i)
	}
	return cvc
}

// SetDenominator sets the "denominator" field.
func (cvc *CurrencyVersionCreate) SetDenominator(i int) *CurrencyVersionCreate {
	cvc.mutation.SetDenominator(i)
	return cvc
}

// SetDefaultMultiplier sets the "default_multiplier" field.
func (cvc *CurrencyVersionCreate) SetDefaultMultiplier(i int) *CurrencyVersionCreate {
	cvc.mutation.SetDefaultMultiplier(i)
	return cvc
}

// SetNillableDefaultMultiplier sets the "default_multiplier" field if the given value is not nil.
func (cvc *CurrencyVersionCreate) SetNillableDefaultMultiplier(i *int) *CurrencyVersionCreate {
	if i != nil {
		cvc.SetDefaultMultiplier(*i)
	}
	return cvc
}

// SetDeprecated sets the "deprecated" field.
func (cvc *CurrencyVersionCreate) SetDeprecated(b bool) *CurrencyVersionCreate {
	cvc.mutation.SetDeprecated(b)
	return cvc
}

// SetNillableDeprecated sets the "deprecated" field if the given value is not nil.
func (cvc *CurrencyVersionCreate) SetNillableDeprecated(b *bool) *CurrencyVersionCreate {
	if b != nil {
		cvc.SetDeprecated(*b)
	}
	return cvc
}

// SetCrashBetIncrement sets the "crash_bet_increment" field.
func (cvc *CurrencyVersionCreate) SetCrashBetIncrement(i int) *CurrencyVersionCreate {
	cvc.mutation.SetCrashBetIncrement(i)
	return cvc
}

// SetNillableCrashBetIncrement sets the "crash_bet_increment" field if the given value is not nil.
func (cvc *CurrencyVersionCreate) SetNillableCrashBetIncrement(i *int) *CurrencyVersionCreate {
	if i != nil {
		cvc.SetCrashBetIncrement(*i)
	}
	return cvc
}

// SetSlotsBetMultipliers sets the "slots_bet_multipliers" field.
func (cvc *CurrencyVersionCreate) SetSlotsBetMultipliers(i []int) *CurrencyVersionCreate {
	cvc.mutation.SetSlotsBetMultipliers(i)
	return cvc
}

// SetCurrencyID sets the "Currency" edge to the Currency entity by ID.
func (cvc *CurrencyVersionCreate) SetCurrencyID(id int) *CurrencyVersionCreate {
	cvc.mutation.SetCurrencyID(id)
	return cvc
}

// SetNillableCurrencyID sets the "Currency" edge to the Currency entity by ID if the given value is not nil.
func (cvc *CurrencyVersionCreate) SetNillableCurrencyID(id *int) *CurrencyVersionCreate {
	if id != nil {
		cvc = cvc.SetCurrencyID(*id)
	}
	return cvc
}

// SetCurrency sets the "Currency" edge to the Currency entity.
func (cvc *CurrencyVersionCreate) SetCurrency(c *Currency) *CurrencyVersionCreate {
	return cvc.SetCurrencyID(c.ID)
}

// SetGameTypesID sets the "game_types" edge to the GameType entity by ID.
func (cvc *CurrencyVersionCreate) SetGameTypesID(id int) *CurrencyVersionCreate {
	cvc.mutation.SetGameTypesID(id)
	return cvc
}

// SetNillableGameTypesID sets the "game_types" edge to the GameType entity by ID if the given value is not nil.
func (cvc *CurrencyVersionCreate) SetNillableGameTypesID(id *int) *CurrencyVersionCreate {
	if id != nil {
		cvc = cvc.SetGameTypesID(*id)
	}
	return cvc
}

// SetGameTypes sets the "game_types" edge to the GameType entity.
func (cvc *CurrencyVersionCreate) SetGameTypes(g *GameType) *CurrencyVersionCreate {
	return cvc.SetGameTypesID(g.ID)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (cvc *CurrencyVersionCreate) AddSessionIDs(ids ...int) *CurrencyVersionCreate {
	cvc.mutation.AddSessionIDs(ids...)
	return cvc
}

// AddSessions adds the "sessions" edges to the Session entity.
func (cvc *CurrencyVersionCreate) AddSessions(s ...*Session) *CurrencyVersionCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cvc.AddSessionIDs(ids...)
}

// AddGameConfigIDs adds the "game_configs" edge to the GameConfig entity by IDs.
func (cvc *CurrencyVersionCreate) AddGameConfigIDs(ids ...int) *CurrencyVersionCreate {
	cvc.mutation.AddGameConfigIDs(ids...)
	return cvc
}

// AddGameConfigs adds the "game_configs" edges to the GameConfig entity.
func (cvc *CurrencyVersionCreate) AddGameConfigs(g ...*GameConfig) *CurrencyVersionCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cvc.AddGameConfigIDs(ids...)
}

// Mutation returns the CurrencyVersionMutation object of the builder.
func (cvc *CurrencyVersionCreate) Mutation() *CurrencyVersionMutation {
	return cvc.mutation
}

// Save creates the CurrencyVersion in the database.
func (cvc *CurrencyVersionCreate) Save(ctx context.Context) (*CurrencyVersion, error) {
	cvc.defaults()
	return withHooks(ctx, cvc.sqlSave, cvc.mutation, cvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cvc *CurrencyVersionCreate) SaveX(ctx context.Context) *CurrencyVersion {
	v, err := cvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cvc *CurrencyVersionCreate) Exec(ctx context.Context) error {
	_, err := cvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvc *CurrencyVersionCreate) ExecX(ctx context.Context) {
	if err := cvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cvc *CurrencyVersionCreate) defaults() {
	if _, ok := cvc.mutation.Deprecated(); !ok {
		v := currencyversion.DefaultDeprecated
		cvc.mutation.SetDeprecated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cvc *CurrencyVersionCreate) check() error {
	if _, ok := cvc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CurrencyVersion.name"`)}
	}
	if _, ok := cvc.mutation.Denominator(); !ok {
		return &ValidationError{Name: "denominator", err: errors.New(`ent: missing required field "CurrencyVersion.denominator"`)}
	}
	if _, ok := cvc.mutation.Deprecated(); !ok {
		return &ValidationError{Name: "deprecated", err: errors.New(`ent: missing required field "CurrencyVersion.deprecated"`)}
	}
	return nil
}

func (cvc *CurrencyVersionCreate) sqlSave(ctx context.Context) (*CurrencyVersion, error) {
	if err := cvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cvc.mutation.id = &_node.ID
	cvc.mutation.done = true
	return _node, nil
}

func (cvc *CurrencyVersionCreate) createSpec() (*CurrencyVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &CurrencyVersion{config: cvc.config}
		_spec = sqlgraph.NewCreateSpec(currencyversion.Table, sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt))
	)
	if value, ok := cvc.mutation.Name(); ok {
		_spec.SetField(currencyversion.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cvc.mutation.MinBet(); ok {
		_spec.SetField(currencyversion.FieldMinBet, field.TypeInt, value)
		_node.MinBet = value
	}
	if value, ok := cvc.mutation.MaxExp(); ok {
		_spec.SetField(currencyversion.FieldMaxExp, field.TypeInt, value)
		_node.MaxExp = value
	}
	if value, ok := cvc.mutation.Denominator(); ok {
		_spec.SetField(currencyversion.FieldDenominator, field.TypeInt, value)
		_node.Denominator = value
	}
	if value, ok := cvc.mutation.DefaultMultiplier(); ok {
		_spec.SetField(currencyversion.FieldDefaultMultiplier, field.TypeInt, value)
		_node.DefaultMultiplier = value
	}
	if value, ok := cvc.mutation.Deprecated(); ok {
		_spec.SetField(currencyversion.FieldDeprecated, field.TypeBool, value)
		_node.Deprecated = value
	}
	if value, ok := cvc.mutation.CrashBetIncrement(); ok {
		_spec.SetField(currencyversion.FieldCrashBetIncrement, field.TypeInt, value)
		_node.CrashBetIncrement = value
	}
	if value, ok := cvc.mutation.SlotsBetMultipliers(); ok {
		_spec.SetField(currencyversion.FieldSlotsBetMultipliers, field.TypeJSON, value)
		_node.SlotsBetMultipliers = value
	}
	if nodes := cvc.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   currencyversion.CurrencyTable,
			Columns: []string{currencyversion.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.currency_currency_versions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cvc.mutation.GameTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   currencyversion.GameTypesTable,
			Columns: []string{currencyversion.GameTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gametype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_type_currency_versions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cvc.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencyversion.SessionsTable,
			Columns: []string{currencyversion.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cvc.mutation.GameConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencyversion.GameConfigsTable,
			Columns: []string{currencyversion.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CurrencyVersionCreateBulk is the builder for creating many CurrencyVersion entities in bulk.
type CurrencyVersionCreateBulk struct {
	config
	err      error
	builders []*CurrencyVersionCreate
}

// Save creates the CurrencyVersion entities in the database.
func (cvcb *CurrencyVersionCreateBulk) Save(ctx context.Context) ([]*CurrencyVersion, error) {
	if cvcb.err != nil {
		return nil, cvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cvcb.builders))
	nodes := make([]*CurrencyVersion, len(cvcb.builders))
	mutators := make([]Mutator, len(cvcb.builders))
	for i := range cvcb.builders {
		func(i int, root context.Context) {
			builder := cvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CurrencyVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cvcb *CurrencyVersionCreateBulk) SaveX(ctx context.Context) []*CurrencyVersion {
	v, err := cvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cvcb *CurrencyVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := cvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvcb *CurrencyVersionCreateBulk) ExecX(ctx context.Context) {
	if err := cvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
