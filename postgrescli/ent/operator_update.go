// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameconfig"
	"github.com/Lavizord/checkers-server/postgrescli/ent/operator"
	"github.com/Lavizord/checkers-server/postgrescli/ent/platform"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
	"github.com/Lavizord/checkers-server/postgrescli/ent/session"
)

// OperatorUpdate is the builder for updating Operator entities.
type OperatorUpdate struct {
	config
	hooks    []Hook
	mutation *OperatorMutation
}

// Where appends a list predicates to the OperatorUpdate builder.
func (ou *OperatorUpdate) Where(ps ...predicate.Operator) *OperatorUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetName sets the "name" field.
func (ou *OperatorUpdate) SetName(s string) *OperatorUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ou *OperatorUpdate) SetNillableName(s *string) *OperatorUpdate {
	if s != nil {
		ou.SetName(*s)
	}
	return ou
}

// SetCreatedAt sets the "created_at" field.
func (ou *OperatorUpdate) SetCreatedAt(t time.Time) *OperatorUpdate {
	ou.mutation.SetCreatedAt(t)
	return ou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ou *OperatorUpdate) SetNillableCreatedAt(t *time.Time) *OperatorUpdate {
	if t != nil {
		ou.SetCreatedAt(*t)
	}
	return ou
}

// SetDeletedAt sets the "deleted_at" field.
func (ou *OperatorUpdate) SetDeletedAt(t time.Time) *OperatorUpdate {
	ou.mutation.SetDeletedAt(t)
	return ou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ou *OperatorUpdate) SetNillableDeletedAt(t *time.Time) *OperatorUpdate {
	if t != nil {
		ou.SetDeletedAt(*t)
	}
	return ou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ou *OperatorUpdate) ClearDeletedAt() *OperatorUpdate {
	ou.mutation.ClearDeletedAt()
	return ou
}

// SetAlias sets the "alias" field.
func (ou *OperatorUpdate) SetAlias(s string) *OperatorUpdate {
	ou.mutation.SetAlias(s)
	return ou
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (ou *OperatorUpdate) SetNillableAlias(s *string) *OperatorUpdate {
	if s != nil {
		ou.SetAlias(*s)
	}
	return ou
}

// SetPlatformsID sets the "platforms" edge to the Platform entity by ID.
func (ou *OperatorUpdate) SetPlatformsID(id int) *OperatorUpdate {
	ou.mutation.SetPlatformsID(id)
	return ou
}

// SetNillablePlatformsID sets the "platforms" edge to the Platform entity by ID if the given value is not nil.
func (ou *OperatorUpdate) SetNillablePlatformsID(id *int) *OperatorUpdate {
	if id != nil {
		ou = ou.SetPlatformsID(*id)
	}
	return ou
}

// SetPlatforms sets the "platforms" edge to the Platform entity.
func (ou *OperatorUpdate) SetPlatforms(p *Platform) *OperatorUpdate {
	return ou.SetPlatformsID(p.ID)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (ou *OperatorUpdate) AddSessionIDs(ids ...int) *OperatorUpdate {
	ou.mutation.AddSessionIDs(ids...)
	return ou
}

// AddSessions adds the "sessions" edges to the Session entity.
func (ou *OperatorUpdate) AddSessions(s ...*Session) *OperatorUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ou.AddSessionIDs(ids...)
}

// AddGameConfigIDs adds the "game_configs" edge to the GameConfig entity by IDs.
func (ou *OperatorUpdate) AddGameConfigIDs(ids ...int) *OperatorUpdate {
	ou.mutation.AddGameConfigIDs(ids...)
	return ou
}

// AddGameConfigs adds the "game_configs" edges to the GameConfig entity.
func (ou *OperatorUpdate) AddGameConfigs(g ...*GameConfig) *OperatorUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ou.AddGameConfigIDs(ids...)
}

// Mutation returns the OperatorMutation object of the builder.
func (ou *OperatorUpdate) Mutation() *OperatorMutation {
	return ou.mutation
}

// ClearPlatforms clears the "platforms" edge to the Platform entity.
func (ou *OperatorUpdate) ClearPlatforms() *OperatorUpdate {
	ou.mutation.ClearPlatforms()
	return ou
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (ou *OperatorUpdate) ClearSessions() *OperatorUpdate {
	ou.mutation.ClearSessions()
	return ou
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (ou *OperatorUpdate) RemoveSessionIDs(ids ...int) *OperatorUpdate {
	ou.mutation.RemoveSessionIDs(ids...)
	return ou
}

// RemoveSessions removes "sessions" edges to Session entities.
func (ou *OperatorUpdate) RemoveSessions(s ...*Session) *OperatorUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ou.RemoveSessionIDs(ids...)
}

// ClearGameConfigs clears all "game_configs" edges to the GameConfig entity.
func (ou *OperatorUpdate) ClearGameConfigs() *OperatorUpdate {
	ou.mutation.ClearGameConfigs()
	return ou
}

// RemoveGameConfigIDs removes the "game_configs" edge to GameConfig entities by IDs.
func (ou *OperatorUpdate) RemoveGameConfigIDs(ids ...int) *OperatorUpdate {
	ou.mutation.RemoveGameConfigIDs(ids...)
	return ou
}

// RemoveGameConfigs removes "game_configs" edges to GameConfig entities.
func (ou *OperatorUpdate) RemoveGameConfigs(g ...*GameConfig) *OperatorUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ou.RemoveGameConfigIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OperatorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OperatorUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OperatorUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OperatorUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OperatorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(operator.Table, operator.Columns, sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(operator.FieldName, field.TypeString, value)
	}
	if value, ok := ou.mutation.CreatedAt(); ok {
		_spec.SetField(operator.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.DeletedAt(); ok {
		_spec.SetField(operator.FieldDeletedAt, field.TypeTime, value)
	}
	if ou.mutation.DeletedAtCleared() {
		_spec.ClearField(operator.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.Alias(); ok {
		_spec.SetField(operator.FieldAlias, field.TypeString, value)
	}
	if ou.mutation.PlatformsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operator.PlatformsTable,
			Columns: []string{operator.PlatformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platform.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PlatformsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operator.PlatformsTable,
			Columns: []string{operator.PlatformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platform.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.SessionsTable,
			Columns: []string{operator.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !ou.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.SessionsTable,
			Columns: []string{operator.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.SessionsTable,
			Columns: []string{operator.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.GameConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GameConfigsTable,
			Columns: []string{operator.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedGameConfigsIDs(); len(nodes) > 0 && !ou.mutation.GameConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GameConfigsTable,
			Columns: []string{operator.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.GameConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GameConfigsTable,
			Columns: []string{operator.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OperatorUpdateOne is the builder for updating a single Operator entity.
type OperatorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OperatorMutation
}

// SetName sets the "name" field.
func (ouo *OperatorUpdateOne) SetName(s string) *OperatorUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillableName(s *string) *OperatorUpdateOne {
	if s != nil {
		ouo.SetName(*s)
	}
	return ouo
}

// SetCreatedAt sets the "created_at" field.
func (ouo *OperatorUpdateOne) SetCreatedAt(t time.Time) *OperatorUpdateOne {
	ouo.mutation.SetCreatedAt(t)
	return ouo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillableCreatedAt(t *time.Time) *OperatorUpdateOne {
	if t != nil {
		ouo.SetCreatedAt(*t)
	}
	return ouo
}

// SetDeletedAt sets the "deleted_at" field.
func (ouo *OperatorUpdateOne) SetDeletedAt(t time.Time) *OperatorUpdateOne {
	ouo.mutation.SetDeletedAt(t)
	return ouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillableDeletedAt(t *time.Time) *OperatorUpdateOne {
	if t != nil {
		ouo.SetDeletedAt(*t)
	}
	return ouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ouo *OperatorUpdateOne) ClearDeletedAt() *OperatorUpdateOne {
	ouo.mutation.ClearDeletedAt()
	return ouo
}

// SetAlias sets the "alias" field.
func (ouo *OperatorUpdateOne) SetAlias(s string) *OperatorUpdateOne {
	ouo.mutation.SetAlias(s)
	return ouo
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillableAlias(s *string) *OperatorUpdateOne {
	if s != nil {
		ouo.SetAlias(*s)
	}
	return ouo
}

// SetPlatformsID sets the "platforms" edge to the Platform entity by ID.
func (ouo *OperatorUpdateOne) SetPlatformsID(id int) *OperatorUpdateOne {
	ouo.mutation.SetPlatformsID(id)
	return ouo
}

// SetNillablePlatformsID sets the "platforms" edge to the Platform entity by ID if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillablePlatformsID(id *int) *OperatorUpdateOne {
	if id != nil {
		ouo = ouo.SetPlatformsID(*id)
	}
	return ouo
}

// SetPlatforms sets the "platforms" edge to the Platform entity.
func (ouo *OperatorUpdateOne) SetPlatforms(p *Platform) *OperatorUpdateOne {
	return ouo.SetPlatformsID(p.ID)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (ouo *OperatorUpdateOne) AddSessionIDs(ids ...int) *OperatorUpdateOne {
	ouo.mutation.AddSessionIDs(ids...)
	return ouo
}

// AddSessions adds the "sessions" edges to the Session entity.
func (ouo *OperatorUpdateOne) AddSessions(s ...*Session) *OperatorUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ouo.AddSessionIDs(ids...)
}

// AddGameConfigIDs adds the "game_configs" edge to the GameConfig entity by IDs.
func (ouo *OperatorUpdateOne) AddGameConfigIDs(ids ...int) *OperatorUpdateOne {
	ouo.mutation.AddGameConfigIDs(ids...)
	return ouo
}

// AddGameConfigs adds the "game_configs" edges to the GameConfig entity.
func (ouo *OperatorUpdateOne) AddGameConfigs(g ...*GameConfig) *OperatorUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ouo.AddGameConfigIDs(ids...)
}

// Mutation returns the OperatorMutation object of the builder.
func (ouo *OperatorUpdateOne) Mutation() *OperatorMutation {
	return ouo.mutation
}

// ClearPlatforms clears the "platforms" edge to the Platform entity.
func (ouo *OperatorUpdateOne) ClearPlatforms() *OperatorUpdateOne {
	ouo.mutation.ClearPlatforms()
	return ouo
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (ouo *OperatorUpdateOne) ClearSessions() *OperatorUpdateOne {
	ouo.mutation.ClearSessions()
	return ouo
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (ouo *OperatorUpdateOne) RemoveSessionIDs(ids ...int) *OperatorUpdateOne {
	ouo.mutation.RemoveSessionIDs(ids...)
	return ouo
}

// RemoveSessions removes "sessions" edges to Session entities.
func (ouo *OperatorUpdateOne) RemoveSessions(s ...*Session) *OperatorUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ouo.RemoveSessionIDs(ids...)
}

// ClearGameConfigs clears all "game_configs" edges to the GameConfig entity.
func (ouo *OperatorUpdateOne) ClearGameConfigs() *OperatorUpdateOne {
	ouo.mutation.ClearGameConfigs()
	return ouo
}

// RemoveGameConfigIDs removes the "game_configs" edge to GameConfig entities by IDs.
func (ouo *OperatorUpdateOne) RemoveGameConfigIDs(ids ...int) *OperatorUpdateOne {
	ouo.mutation.RemoveGameConfigIDs(ids...)
	return ouo
}

// RemoveGameConfigs removes "game_configs" edges to GameConfig entities.
func (ouo *OperatorUpdateOne) RemoveGameConfigs(g ...*GameConfig) *OperatorUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ouo.RemoveGameConfigIDs(ids...)
}

// Where appends a list predicates to the OperatorUpdate builder.
func (ouo *OperatorUpdateOne) Where(ps ...predicate.Operator) *OperatorUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OperatorUpdateOne) Select(field string, fields ...string) *OperatorUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Operator entity.
func (ouo *OperatorUpdateOne) Save(ctx context.Context) (*Operator, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OperatorUpdateOne) SaveX(ctx context.Context) *Operator {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OperatorUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OperatorUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OperatorUpdateOne) sqlSave(ctx context.Context) (_node *Operator, err error) {
	_spec := sqlgraph.NewUpdateSpec(operator.Table, operator.Columns, sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Operator.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operator.FieldID)
		for _, f := range fields {
			if !operator.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != operator.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(operator.FieldName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.CreatedAt(); ok {
		_spec.SetField(operator.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.DeletedAt(); ok {
		_spec.SetField(operator.FieldDeletedAt, field.TypeTime, value)
	}
	if ouo.mutation.DeletedAtCleared() {
		_spec.ClearField(operator.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.Alias(); ok {
		_spec.SetField(operator.FieldAlias, field.TypeString, value)
	}
	if ouo.mutation.PlatformsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operator.PlatformsTable,
			Columns: []string{operator.PlatformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platform.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PlatformsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operator.PlatformsTable,
			Columns: []string{operator.PlatformsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(platform.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.SessionsTable,
			Columns: []string{operator.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !ouo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.SessionsTable,
			Columns: []string{operator.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.SessionsTable,
			Columns: []string{operator.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.GameConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GameConfigsTable,
			Columns: []string{operator.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedGameConfigsIDs(); len(nodes) > 0 && !ouo.mutation.GameConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GameConfigsTable,
			Columns: []string{operator.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.GameConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GameConfigsTable,
			Columns: []string{operator.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Operator{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
