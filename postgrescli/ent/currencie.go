// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencie"
)

// Currencie is the model entity for the Currencie schema.
type Currencie struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// ThousandsSeparator holds the value of the "thousands_separator" field.
	ThousandsSeparator string `json:"thousands_separator,omitempty"`
	// UnitsSeparator holds the value of the "units_separator" field.
	UnitsSeparator string `json:"units_separator,omitempty"`
	// SymbolPosition holds the value of the "symbol_position" field.
	SymbolPosition string `json:"symbol_position,omitempty"`
	// Denominator holds the value of the "denominator" field.
	Denominator int `json:"denominator,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CurrencieQuery when eager-loading is set.
	Edges        CurrencieEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CurrencieEdges holds the relations/edges for other nodes in the graph.
type CurrencieEdges struct {
	// CurrencyVersions holds the value of the currency_versions edge.
	CurrencyVersions []*CurrencyVersion `json:"currency_versions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CurrencyVersionsOrErr returns the CurrencyVersions value or an error if the edge
// was not loaded in eager-loading.
func (e CurrencieEdges) CurrencyVersionsOrErr() ([]*CurrencyVersion, error) {
	if e.loadedTypes[0] {
		return e.CurrencyVersions, nil
	}
	return nil, &NotLoadedError{edge: "currency_versions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Currencie) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case currencie.FieldID, currencie.FieldDenominator:
			values[i] = new(sql.NullInt64)
		case currencie.FieldName, currencie.FieldSymbol, currencie.FieldThousandsSeparator, currencie.FieldUnitsSeparator, currencie.FieldSymbolPosition:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Currencie fields.
func (c *Currencie) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case currencie.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case currencie.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case currencie.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				c.Symbol = value.String
			}
		case currencie.FieldThousandsSeparator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thousands_separator", values[i])
			} else if value.Valid {
				c.ThousandsSeparator = value.String
			}
		case currencie.FieldUnitsSeparator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field units_separator", values[i])
			} else if value.Valid {
				c.UnitsSeparator = value.String
			}
		case currencie.FieldSymbolPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol_position", values[i])
			} else if value.Valid {
				c.SymbolPosition = value.String
			}
		case currencie.FieldDenominator:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field denominator", values[i])
			} else if value.Valid {
				c.Denominator = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Currencie.
// This includes values selected through modifiers, order, etc.
func (c *Currencie) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryCurrencyVersions queries the "currency_versions" edge of the Currencie entity.
func (c *Currencie) QueryCurrencyVersions() *CurrencyVersionQuery {
	return NewCurrencieClient(c.config).QueryCurrencyVersions(c)
}

// Update returns a builder for updating this Currencie.
// Note that you need to call Currencie.Unwrap() before calling this method if this Currencie
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Currencie) Update() *CurrencieUpdateOne {
	return NewCurrencieClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Currencie entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Currencie) Unwrap() *Currencie {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Currencie is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Currencie) String() string {
	var builder strings.Builder
	builder.WriteString("Currencie(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("symbol=")
	builder.WriteString(c.Symbol)
	builder.WriteString(", ")
	builder.WriteString("thousands_separator=")
	builder.WriteString(c.ThousandsSeparator)
	builder.WriteString(", ")
	builder.WriteString("units_separator=")
	builder.WriteString(c.UnitsSeparator)
	builder.WriteString(", ")
	builder.WriteString("symbol_position=")
	builder.WriteString(c.SymbolPosition)
	builder.WriteString(", ")
	builder.WriteString("denominator=")
	builder.WriteString(fmt.Sprintf("%v", c.Denominator))
	builder.WriteByte(')')
	return builder.String()
}

// Currencies is a parsable slice of Currencie.
type Currencies []*Currencie
