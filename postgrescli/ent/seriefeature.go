// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Lavizord/checkers-server/postgrescli/ent/feature"
	"github.com/Lavizord/checkers-server/postgrescli/ent/serie"
	"github.com/Lavizord/checkers-server/postgrescli/ent/seriefeature"
)

// SerieFeature is the model entity for the SerieFeature schema.
type SerieFeature struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SerieFeatureQuery when eager-loading is set.
	Edges                  SerieFeatureEdges `json:"edges"`
	feature_serie_features *int
	serie_serie_features   *int
	selectValues           sql.SelectValues
}

// SerieFeatureEdges holds the relations/edges for other nodes in the graph.
type SerieFeatureEdges struct {
	// Features holds the value of the features edge.
	Features *Feature `json:"features,omitempty"`
	// Series holds the value of the series edge.
	Series *Serie `json:"series,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FeaturesOrErr returns the Features value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SerieFeatureEdges) FeaturesOrErr() (*Feature, error) {
	if e.Features != nil {
		return e.Features, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: feature.Label}
	}
	return nil, &NotLoadedError{edge: "features"}
}

// SeriesOrErr returns the Series value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SerieFeatureEdges) SeriesOrErr() (*Serie, error) {
	if e.Series != nil {
		return e.Series, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: serie.Label}
	}
	return nil, &NotLoadedError{edge: "series"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SerieFeature) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case seriefeature.FieldID:
			values[i] = new(sql.NullInt64)
		case seriefeature.ForeignKeys[0]: // feature_serie_features
			values[i] = new(sql.NullInt64)
		case seriefeature.ForeignKeys[1]: // serie_serie_features
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SerieFeature fields.
func (sf *SerieFeature) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case seriefeature.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sf.ID = int(value.Int64)
		case seriefeature.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field feature_serie_features", value)
			} else if value.Valid {
				sf.feature_serie_features = new(int)
				*sf.feature_serie_features = int(value.Int64)
			}
		case seriefeature.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field serie_serie_features", value)
			} else if value.Valid {
				sf.serie_serie_features = new(int)
				*sf.serie_serie_features = int(value.Int64)
			}
		default:
			sf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SerieFeature.
// This includes values selected through modifiers, order, etc.
func (sf *SerieFeature) Value(name string) (ent.Value, error) {
	return sf.selectValues.Get(name)
}

// QueryFeatures queries the "features" edge of the SerieFeature entity.
func (sf *SerieFeature) QueryFeatures() *FeatureQuery {
	return NewSerieFeatureClient(sf.config).QueryFeatures(sf)
}

// QuerySeries queries the "series" edge of the SerieFeature entity.
func (sf *SerieFeature) QuerySeries() *SerieQuery {
	return NewSerieFeatureClient(sf.config).QuerySeries(sf)
}

// Update returns a builder for updating this SerieFeature.
// Note that you need to call SerieFeature.Unwrap() before calling this method if this SerieFeature
// was returned from a transaction, and the transaction was committed or rolled back.
func (sf *SerieFeature) Update() *SerieFeatureUpdateOne {
	return NewSerieFeatureClient(sf.config).UpdateOne(sf)
}

// Unwrap unwraps the SerieFeature entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sf *SerieFeature) Unwrap() *SerieFeature {
	_tx, ok := sf.config.driver.(*txDriver)
	if !ok {
		panic("ent: SerieFeature is not a transactional entity")
	}
	sf.config.driver = _tx.drv
	return sf
}

// String implements the fmt.Stringer.
func (sf *SerieFeature) String() string {
	var builder strings.Builder
	builder.WriteString("SerieFeature(")
	builder.WriteString(fmt.Sprintf("id=%v", sf.ID))
	builder.WriteByte(')')
	return builder.String()
}

// SerieFeatures is a parsable slice of SerieFeature.
type SerieFeatures []*SerieFeature
