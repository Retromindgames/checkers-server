// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencyversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameconfig"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/mathversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/operator"
)

// GameConfigCreate is the builder for creating a GameConfig entity.
type GameConfigCreate struct {
	config
	mutation *GameConfigMutation
	hooks    []Hook
}

// SetCanDemo sets the "can_demo" field.
func (gcc *GameConfigCreate) SetCanDemo(b bool) *GameConfigCreate {
	gcc.mutation.SetCanDemo(b)
	return gcc
}

// SetNillableCanDemo sets the "can_demo" field if the given value is not nil.
func (gcc *GameConfigCreate) SetNillableCanDemo(b *bool) *GameConfigCreate {
	if b != nil {
		gcc.SetCanDemo(*b)
	}
	return gcc
}

// SetCanTournament sets the "can_tournament" field.
func (gcc *GameConfigCreate) SetCanTournament(b bool) *GameConfigCreate {
	gcc.mutation.SetCanTournament(b)
	return gcc
}

// SetNillableCanTournament sets the "can_tournament" field if the given value is not nil.
func (gcc *GameConfigCreate) SetNillableCanTournament(b *bool) *GameConfigCreate {
	if b != nil {
		gcc.SetCanTournament(*b)
	}
	return gcc
}

// SetCanFreeBets sets the "can_free_bets" field.
func (gcc *GameConfigCreate) SetCanFreeBets(b bool) *GameConfigCreate {
	gcc.mutation.SetCanFreeBets(b)
	return gcc
}

// SetNillableCanFreeBets sets the "can_free_bets" field if the given value is not nil.
func (gcc *GameConfigCreate) SetNillableCanFreeBets(b *bool) *GameConfigCreate {
	if b != nil {
		gcc.SetCanFreeBets(*b)
	}
	return gcc
}

// SetCanDropAndWins sets the "can_drop_and_wins" field.
func (gcc *GameConfigCreate) SetCanDropAndWins(b bool) *GameConfigCreate {
	gcc.mutation.SetCanDropAndWins(b)
	return gcc
}

// SetNillableCanDropAndWins sets the "can_drop_and_wins" field if the given value is not nil.
func (gcc *GameConfigCreate) SetNillableCanDropAndWins(b *bool) *GameConfigCreate {
	if b != nil {
		gcc.SetCanDropAndWins(*b)
	}
	return gcc
}

// SetCanBuyBonus sets the "can_buy_bonus" field.
func (gcc *GameConfigCreate) SetCanBuyBonus(b bool) *GameConfigCreate {
	gcc.mutation.SetCanBuyBonus(b)
	return gcc
}

// SetNillableCanBuyBonus sets the "can_buy_bonus" field if the given value is not nil.
func (gcc *GameConfigCreate) SetNillableCanBuyBonus(b *bool) *GameConfigCreate {
	if b != nil {
		gcc.SetCanBuyBonus(*b)
	}
	return gcc
}

// SetCanTurbo sets the "can_turbo" field.
func (gcc *GameConfigCreate) SetCanTurbo(b bool) *GameConfigCreate {
	gcc.mutation.SetCanTurbo(b)
	return gcc
}

// SetNillableCanTurbo sets the "can_turbo" field if the given value is not nil.
func (gcc *GameConfigCreate) SetNillableCanTurbo(b *bool) *GameConfigCreate {
	if b != nil {
		gcc.SetCanTurbo(*b)
	}
	return gcc
}

// SetIsActive sets the "is_active" field.
func (gcc *GameConfigCreate) SetIsActive(b bool) *GameConfigCreate {
	gcc.mutation.SetIsActive(b)
	return gcc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (gcc *GameConfigCreate) SetNillableIsActive(b *bool) *GameConfigCreate {
	if b != nil {
		gcc.SetIsActive(*b)
	}
	return gcc
}

// SetCanAutoBet sets the "can_auto_bet" field.
func (gcc *GameConfigCreate) SetCanAutoBet(b bool) *GameConfigCreate {
	gcc.mutation.SetCanAutoBet(b)
	return gcc
}

// SetNillableCanAutoBet sets the "can_auto_bet" field if the given value is not nil.
func (gcc *GameConfigCreate) SetNillableCanAutoBet(b *bool) *GameConfigCreate {
	if b != nil {
		gcc.SetCanAutoBet(*b)
	}
	return gcc
}

// SetCanAutoCashout sets the "can_auto_cashout" field.
func (gcc *GameConfigCreate) SetCanAutoCashout(b bool) *GameConfigCreate {
	gcc.mutation.SetCanAutoCashout(b)
	return gcc
}

// SetNillableCanAutoCashout sets the "can_auto_cashout" field if the given value is not nil.
func (gcc *GameConfigCreate) SetNillableCanAutoCashout(b *bool) *GameConfigCreate {
	if b != nil {
		gcc.SetCanAutoCashout(*b)
	}
	return gcc
}

// SetCanAnteBet sets the "can_ante_bet" field.
func (gcc *GameConfigCreate) SetCanAnteBet(b bool) *GameConfigCreate {
	gcc.mutation.SetCanAnteBet(b)
	return gcc
}

// SetNillableCanAnteBet sets the "can_ante_bet" field if the given value is not nil.
func (gcc *GameConfigCreate) SetNillableCanAnteBet(b *bool) *GameConfigCreate {
	if b != nil {
		gcc.SetCanAnteBet(*b)
	}
	return gcc
}

// SetCanHomeButton sets the "can_home_button" field.
func (gcc *GameConfigCreate) SetCanHomeButton(b bool) *GameConfigCreate {
	gcc.mutation.SetCanHomeButton(b)
	return gcc
}

// SetNillableCanHomeButton sets the "can_home_button" field if the given value is not nil.
func (gcc *GameConfigCreate) SetNillableCanHomeButton(b *bool) *GameConfigCreate {
	if b != nil {
		gcc.SetCanHomeButton(*b)
	}
	return gcc
}

// SetMathVersionsID sets the "math_versions" edge to the MathVersion entity by ID.
func (gcc *GameConfigCreate) SetMathVersionsID(id int) *GameConfigCreate {
	gcc.mutation.SetMathVersionsID(id)
	return gcc
}

// SetNillableMathVersionsID sets the "math_versions" edge to the MathVersion entity by ID if the given value is not nil.
func (gcc *GameConfigCreate) SetNillableMathVersionsID(id *int) *GameConfigCreate {
	if id != nil {
		gcc = gcc.SetMathVersionsID(*id)
	}
	return gcc
}

// SetMathVersions sets the "math_versions" edge to the MathVersion entity.
func (gcc *GameConfigCreate) SetMathVersions(m *MathVersion) *GameConfigCreate {
	return gcc.SetMathVersionsID(m.ID)
}

// SetGameVersionsID sets the "game_versions" edge to the GameVersion entity by ID.
func (gcc *GameConfigCreate) SetGameVersionsID(id int) *GameConfigCreate {
	gcc.mutation.SetGameVersionsID(id)
	return gcc
}

// SetNillableGameVersionsID sets the "game_versions" edge to the GameVersion entity by ID if the given value is not nil.
func (gcc *GameConfigCreate) SetNillableGameVersionsID(id *int) *GameConfigCreate {
	if id != nil {
		gcc = gcc.SetGameVersionsID(*id)
	}
	return gcc
}

// SetGameVersions sets the "game_versions" edge to the GameVersion entity.
func (gcc *GameConfigCreate) SetGameVersions(g *GameVersion) *GameConfigCreate {
	return gcc.SetGameVersionsID(g.ID)
}

// SetGamesID sets the "games" edge to the Game entity by ID.
func (gcc *GameConfigCreate) SetGamesID(id int) *GameConfigCreate {
	gcc.mutation.SetGamesID(id)
	return gcc
}

// SetNillableGamesID sets the "games" edge to the Game entity by ID if the given value is not nil.
func (gcc *GameConfigCreate) SetNillableGamesID(id *int) *GameConfigCreate {
	if id != nil {
		gcc = gcc.SetGamesID(*id)
	}
	return gcc
}

// SetGames sets the "games" edge to the Game entity.
func (gcc *GameConfigCreate) SetGames(g *Game) *GameConfigCreate {
	return gcc.SetGamesID(g.ID)
}

// SetOperatorID sets the "Operator" edge to the Operator entity by ID.
func (gcc *GameConfigCreate) SetOperatorID(id int) *GameConfigCreate {
	gcc.mutation.SetOperatorID(id)
	return gcc
}

// SetNillableOperatorID sets the "Operator" edge to the Operator entity by ID if the given value is not nil.
func (gcc *GameConfigCreate) SetNillableOperatorID(id *int) *GameConfigCreate {
	if id != nil {
		gcc = gcc.SetOperatorID(*id)
	}
	return gcc
}

// SetOperator sets the "Operator" edge to the Operator entity.
func (gcc *GameConfigCreate) SetOperator(o *Operator) *GameConfigCreate {
	return gcc.SetOperatorID(o.ID)
}

// SetCurrencyVersionsID sets the "currency_versions" edge to the CurrencyVersion entity by ID.
func (gcc *GameConfigCreate) SetCurrencyVersionsID(id int) *GameConfigCreate {
	gcc.mutation.SetCurrencyVersionsID(id)
	return gcc
}

// SetNillableCurrencyVersionsID sets the "currency_versions" edge to the CurrencyVersion entity by ID if the given value is not nil.
func (gcc *GameConfigCreate) SetNillableCurrencyVersionsID(id *int) *GameConfigCreate {
	if id != nil {
		gcc = gcc.SetCurrencyVersionsID(*id)
	}
	return gcc
}

// SetCurrencyVersions sets the "currency_versions" edge to the CurrencyVersion entity.
func (gcc *GameConfigCreate) SetCurrencyVersions(c *CurrencyVersion) *GameConfigCreate {
	return gcc.SetCurrencyVersionsID(c.ID)
}

// Mutation returns the GameConfigMutation object of the builder.
func (gcc *GameConfigCreate) Mutation() *GameConfigMutation {
	return gcc.mutation
}

// Save creates the GameConfig in the database.
func (gcc *GameConfigCreate) Save(ctx context.Context) (*GameConfig, error) {
	gcc.defaults()
	return withHooks(ctx, gcc.sqlSave, gcc.mutation, gcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gcc *GameConfigCreate) SaveX(ctx context.Context) *GameConfig {
	v, err := gcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcc *GameConfigCreate) Exec(ctx context.Context) error {
	_, err := gcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcc *GameConfigCreate) ExecX(ctx context.Context) {
	if err := gcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gcc *GameConfigCreate) defaults() {
	if _, ok := gcc.mutation.CanDemo(); !ok {
		v := gameconfig.DefaultCanDemo
		gcc.mutation.SetCanDemo(v)
	}
	if _, ok := gcc.mutation.CanTournament(); !ok {
		v := gameconfig.DefaultCanTournament
		gcc.mutation.SetCanTournament(v)
	}
	if _, ok := gcc.mutation.CanFreeBets(); !ok {
		v := gameconfig.DefaultCanFreeBets
		gcc.mutation.SetCanFreeBets(v)
	}
	if _, ok := gcc.mutation.CanDropAndWins(); !ok {
		v := gameconfig.DefaultCanDropAndWins
		gcc.mutation.SetCanDropAndWins(v)
	}
	if _, ok := gcc.mutation.CanBuyBonus(); !ok {
		v := gameconfig.DefaultCanBuyBonus
		gcc.mutation.SetCanBuyBonus(v)
	}
	if _, ok := gcc.mutation.CanTurbo(); !ok {
		v := gameconfig.DefaultCanTurbo
		gcc.mutation.SetCanTurbo(v)
	}
	if _, ok := gcc.mutation.IsActive(); !ok {
		v := gameconfig.DefaultIsActive
		gcc.mutation.SetIsActive(v)
	}
	if _, ok := gcc.mutation.CanAutoBet(); !ok {
		v := gameconfig.DefaultCanAutoBet
		gcc.mutation.SetCanAutoBet(v)
	}
	if _, ok := gcc.mutation.CanAutoCashout(); !ok {
		v := gameconfig.DefaultCanAutoCashout
		gcc.mutation.SetCanAutoCashout(v)
	}
	if _, ok := gcc.mutation.CanAnteBet(); !ok {
		v := gameconfig.DefaultCanAnteBet
		gcc.mutation.SetCanAnteBet(v)
	}
	if _, ok := gcc.mutation.CanHomeButton(); !ok {
		v := gameconfig.DefaultCanHomeButton
		gcc.mutation.SetCanHomeButton(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gcc *GameConfigCreate) check() error {
	if _, ok := gcc.mutation.CanDemo(); !ok {
		return &ValidationError{Name: "can_demo", err: errors.New(`ent: missing required field "GameConfig.can_demo"`)}
	}
	if _, ok := gcc.mutation.CanTournament(); !ok {
		return &ValidationError{Name: "can_tournament", err: errors.New(`ent: missing required field "GameConfig.can_tournament"`)}
	}
	if _, ok := gcc.mutation.CanFreeBets(); !ok {
		return &ValidationError{Name: "can_free_bets", err: errors.New(`ent: missing required field "GameConfig.can_free_bets"`)}
	}
	if _, ok := gcc.mutation.CanDropAndWins(); !ok {
		return &ValidationError{Name: "can_drop_and_wins", err: errors.New(`ent: missing required field "GameConfig.can_drop_and_wins"`)}
	}
	if _, ok := gcc.mutation.CanBuyBonus(); !ok {
		return &ValidationError{Name: "can_buy_bonus", err: errors.New(`ent: missing required field "GameConfig.can_buy_bonus"`)}
	}
	if _, ok := gcc.mutation.CanTurbo(); !ok {
		return &ValidationError{Name: "can_turbo", err: errors.New(`ent: missing required field "GameConfig.can_turbo"`)}
	}
	if _, ok := gcc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "GameConfig.is_active"`)}
	}
	if _, ok := gcc.mutation.CanAutoBet(); !ok {
		return &ValidationError{Name: "can_auto_bet", err: errors.New(`ent: missing required field "GameConfig.can_auto_bet"`)}
	}
	if _, ok := gcc.mutation.CanAutoCashout(); !ok {
		return &ValidationError{Name: "can_auto_cashout", err: errors.New(`ent: missing required field "GameConfig.can_auto_cashout"`)}
	}
	if _, ok := gcc.mutation.CanAnteBet(); !ok {
		return &ValidationError{Name: "can_ante_bet", err: errors.New(`ent: missing required field "GameConfig.can_ante_bet"`)}
	}
	if _, ok := gcc.mutation.CanHomeButton(); !ok {
		return &ValidationError{Name: "can_home_button", err: errors.New(`ent: missing required field "GameConfig.can_home_button"`)}
	}
	return nil
}

func (gcc *GameConfigCreate) sqlSave(ctx context.Context) (*GameConfig, error) {
	if err := gcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gcc.mutation.id = &_node.ID
	gcc.mutation.done = true
	return _node, nil
}

func (gcc *GameConfigCreate) createSpec() (*GameConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &GameConfig{config: gcc.config}
		_spec = sqlgraph.NewCreateSpec(gameconfig.Table, sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt))
	)
	if value, ok := gcc.mutation.CanDemo(); ok {
		_spec.SetField(gameconfig.FieldCanDemo, field.TypeBool, value)
		_node.CanDemo = value
	}
	if value, ok := gcc.mutation.CanTournament(); ok {
		_spec.SetField(gameconfig.FieldCanTournament, field.TypeBool, value)
		_node.CanTournament = value
	}
	if value, ok := gcc.mutation.CanFreeBets(); ok {
		_spec.SetField(gameconfig.FieldCanFreeBets, field.TypeBool, value)
		_node.CanFreeBets = value
	}
	if value, ok := gcc.mutation.CanDropAndWins(); ok {
		_spec.SetField(gameconfig.FieldCanDropAndWins, field.TypeBool, value)
		_node.CanDropAndWins = value
	}
	if value, ok := gcc.mutation.CanBuyBonus(); ok {
		_spec.SetField(gameconfig.FieldCanBuyBonus, field.TypeBool, value)
		_node.CanBuyBonus = value
	}
	if value, ok := gcc.mutation.CanTurbo(); ok {
		_spec.SetField(gameconfig.FieldCanTurbo, field.TypeBool, value)
		_node.CanTurbo = value
	}
	if value, ok := gcc.mutation.IsActive(); ok {
		_spec.SetField(gameconfig.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := gcc.mutation.CanAutoBet(); ok {
		_spec.SetField(gameconfig.FieldCanAutoBet, field.TypeBool, value)
		_node.CanAutoBet = value
	}
	if value, ok := gcc.mutation.CanAutoCashout(); ok {
		_spec.SetField(gameconfig.FieldCanAutoCashout, field.TypeBool, value)
		_node.CanAutoCashout = value
	}
	if value, ok := gcc.mutation.CanAnteBet(); ok {
		_spec.SetField(gameconfig.FieldCanAnteBet, field.TypeBool, value)
		_node.CanAnteBet = value
	}
	if value, ok := gcc.mutation.CanHomeButton(); ok {
		_spec.SetField(gameconfig.FieldCanHomeButton, field.TypeBool, value)
		_node.CanHomeButton = value
	}
	if nodes := gcc.mutation.MathVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.MathVersionsTable,
			Columns: []string{gameconfig.MathVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mathversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.math_version_game_configs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gcc.mutation.GameVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.GameVersionsTable,
			Columns: []string{gameconfig.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_version_game_configs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gcc.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.GamesTable,
			Columns: []string{gameconfig.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_game_configs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gcc.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.OperatorTable,
			Columns: []string{gameconfig.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.operator_game_configs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gcc.mutation.CurrencyVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.CurrencyVersionsTable,
			Columns: []string{gameconfig.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.currency_version_game_configs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GameConfigCreateBulk is the builder for creating many GameConfig entities in bulk.
type GameConfigCreateBulk struct {
	config
	err      error
	builders []*GameConfigCreate
}

// Save creates the GameConfig entities in the database.
func (gccb *GameConfigCreateBulk) Save(ctx context.Context) ([]*GameConfig, error) {
	if gccb.err != nil {
		return nil, gccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gccb.builders))
	nodes := make([]*GameConfig, len(gccb.builders))
	mutators := make([]Mutator, len(gccb.builders))
	for i := range gccb.builders {
		func(i int, root context.Context) {
			builder := gccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gccb *GameConfigCreateBulk) SaveX(ctx context.Context) []*GameConfig {
	v, err := gccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gccb *GameConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := gccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gccb *GameConfigCreateBulk) ExecX(ctx context.Context) {
	if err := gccb.Exec(ctx); err != nil {
		panic(err)
	}
}
