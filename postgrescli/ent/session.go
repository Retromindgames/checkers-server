// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencyversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/mathversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/operator"
	"github.com/Lavizord/checkers-server/postgrescli/ent/session"
)

// Session is the model entity for the Session schema.
type Session struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID string `json:"client_id,omitempty"`
	// Demo holds the value of the "demo" field.
	Demo bool `json:"demo,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SessionQuery when eager-loading is set.
	Edges                     SessionEdges `json:"edges"`
	currency_version_sessions *int
	game_sessions             *int
	game_version_sessions     *int
	math_version_sessions     *int
	operator_sessions         *int
	selectValues              sql.SelectValues
}

// SessionEdges holds the relations/edges for other nodes in the graph.
type SessionEdges struct {
	// Games holds the value of the games edge.
	Games *Game `json:"games,omitempty"`
	// GameVersions holds the value of the game_versions edge.
	GameVersions *GameVersion `json:"game_versions,omitempty"`
	// Operator holds the value of the Operator edge.
	Operator *Operator `json:"Operator,omitempty"`
	// CurrencyVersions holds the value of the currency_versions edge.
	CurrencyVersions *CurrencyVersion `json:"currency_versions,omitempty"`
	// MathVersions holds the value of the math_versions edge.
	MathVersions *MathVersion `json:"math_versions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// GamesOrErr returns the Games value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SessionEdges) GamesOrErr() (*Game, error) {
	if e.Games != nil {
		return e.Games, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: game.Label}
	}
	return nil, &NotLoadedError{edge: "games"}
}

// GameVersionsOrErr returns the GameVersions value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SessionEdges) GameVersionsOrErr() (*GameVersion, error) {
	if e.GameVersions != nil {
		return e.GameVersions, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: gameversion.Label}
	}
	return nil, &NotLoadedError{edge: "game_versions"}
}

// OperatorOrErr returns the Operator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SessionEdges) OperatorOrErr() (*Operator, error) {
	if e.Operator != nil {
		return e.Operator, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: operator.Label}
	}
	return nil, &NotLoadedError{edge: "Operator"}
}

// CurrencyVersionsOrErr returns the CurrencyVersions value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SessionEdges) CurrencyVersionsOrErr() (*CurrencyVersion, error) {
	if e.CurrencyVersions != nil {
		return e.CurrencyVersions, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: currencyversion.Label}
	}
	return nil, &NotLoadedError{edge: "currency_versions"}
}

// MathVersionsOrErr returns the MathVersions value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SessionEdges) MathVersionsOrErr() (*MathVersion, error) {
	if e.MathVersions != nil {
		return e.MathVersions, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: mathversion.Label}
	}
	return nil, &NotLoadedError{edge: "math_versions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Session) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case session.FieldDemo:
			values[i] = new(sql.NullBool)
		case session.FieldID:
			values[i] = new(sql.NullInt64)
		case session.FieldToken, session.FieldClientID:
			values[i] = new(sql.NullString)
		case session.FieldCreatedAt, session.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case session.ForeignKeys[0]: // currency_version_sessions
			values[i] = new(sql.NullInt64)
		case session.ForeignKeys[1]: // game_sessions
			values[i] = new(sql.NullInt64)
		case session.ForeignKeys[2]: // game_version_sessions
			values[i] = new(sql.NullInt64)
		case session.ForeignKeys[3]: // math_version_sessions
			values[i] = new(sql.NullInt64)
		case session.ForeignKeys[4]: // operator_sessions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Session fields.
func (s *Session) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case session.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case session.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				s.Token = value.String
			}
		case session.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				s.ClientID = value.String
			}
		case session.FieldDemo:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field demo", values[i])
			} else if value.Valid {
				s.Demo = value.Bool
			}
		case session.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case session.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = new(time.Time)
				*s.DeletedAt = value.Time
			}
		case session.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field currency_version_sessions", value)
			} else if value.Valid {
				s.currency_version_sessions = new(int)
				*s.currency_version_sessions = int(value.Int64)
			}
		case session.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field game_sessions", value)
			} else if value.Valid {
				s.game_sessions = new(int)
				*s.game_sessions = int(value.Int64)
			}
		case session.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field game_version_sessions", value)
			} else if value.Valid {
				s.game_version_sessions = new(int)
				*s.game_version_sessions = int(value.Int64)
			}
		case session.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field math_version_sessions", value)
			} else if value.Valid {
				s.math_version_sessions = new(int)
				*s.math_version_sessions = int(value.Int64)
			}
		case session.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field operator_sessions", value)
			} else if value.Valid {
				s.operator_sessions = new(int)
				*s.operator_sessions = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Session.
// This includes values selected through modifiers, order, etc.
func (s *Session) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryGames queries the "games" edge of the Session entity.
func (s *Session) QueryGames() *GameQuery {
	return NewSessionClient(s.config).QueryGames(s)
}

// QueryGameVersions queries the "game_versions" edge of the Session entity.
func (s *Session) QueryGameVersions() *GameVersionQuery {
	return NewSessionClient(s.config).QueryGameVersions(s)
}

// QueryOperator queries the "Operator" edge of the Session entity.
func (s *Session) QueryOperator() *OperatorQuery {
	return NewSessionClient(s.config).QueryOperator(s)
}

// QueryCurrencyVersions queries the "currency_versions" edge of the Session entity.
func (s *Session) QueryCurrencyVersions() *CurrencyVersionQuery {
	return NewSessionClient(s.config).QueryCurrencyVersions(s)
}

// QueryMathVersions queries the "math_versions" edge of the Session entity.
func (s *Session) QueryMathVersions() *MathVersionQuery {
	return NewSessionClient(s.config).QueryMathVersions(s)
}

// Update returns a builder for updating this Session.
// Note that you need to call Session.Unwrap() before calling this method if this Session
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Session) Update() *SessionUpdateOne {
	return NewSessionClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Session entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Session) Unwrap() *Session {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Session is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Session) String() string {
	var builder strings.Builder
	builder.WriteString("Session(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("token=")
	builder.WriteString(s.Token)
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(s.ClientID)
	builder.WriteString(", ")
	builder.WriteString("demo=")
	builder.WriteString(fmt.Sprintf("%v", s.Demo))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := s.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Sessions is a parsable slice of Session.
type Sessions []*Session
