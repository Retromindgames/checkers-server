// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/round"
	"github.com/Lavizord/checkers-server/postgrescli/ent/transaction"
)

// RoundCreate is the builder for creating a Round entity.
type RoundCreate struct {
	config
	mutation *RoundMutation
	hooks    []Hook
}

// SetPlatform sets the "platform" field.
func (rc *RoundCreate) SetPlatform(s string) *RoundCreate {
	rc.mutation.SetPlatform(s)
	return rc
}

// SetOperator sets the "operator" field.
func (rc *RoundCreate) SetOperator(s string) *RoundCreate {
	rc.mutation.SetOperator(s)
	return rc
}

// SetReels sets the "reels" field.
func (rc *RoundCreate) SetReels(m map[string]interface{}) *RoundCreate {
	rc.mutation.SetReels(m)
	return rc
}

// SetMultipliers sets the "multipliers" field.
func (rc *RoundCreate) SetMultipliers(m map[string]interface{}) *RoundCreate {
	rc.mutation.SetMultipliers(m)
	return rc
}

// SetBonusType sets the "bonus_type" field.
func (rc *RoundCreate) SetBonusType(s string) *RoundCreate {
	rc.mutation.SetBonusType(s)
	return rc
}

// SetNillableBonusType sets the "bonus_type" field if the given value is not nil.
func (rc *RoundCreate) SetNillableBonusType(s *string) *RoundCreate {
	if s != nil {
		rc.SetBonusType(*s)
	}
	return rc
}

// SetBonusSymbol sets the "bonus_symbol" field.
func (rc *RoundCreate) SetBonusSymbol(i int) *RoundCreate {
	rc.mutation.SetBonusSymbol(i)
	return rc
}

// SetNillableBonusSymbol sets the "bonus_symbol" field if the given value is not nil.
func (rc *RoundCreate) SetNillableBonusSymbol(i *int) *RoundCreate {
	if i != nil {
		rc.SetBonusSymbol(*i)
	}
	return rc
}

// SetBonusMultiplier sets the "bonus_multiplier" field.
func (rc *RoundCreate) SetBonusMultiplier(i int) *RoundCreate {
	rc.mutation.SetBonusMultiplier(i)
	return rc
}

// SetNillableBonusMultiplier sets the "bonus_multiplier" field if the given value is not nil.
func (rc *RoundCreate) SetNillableBonusMultiplier(i *int) *RoundCreate {
	if i != nil {
		rc.SetBonusMultiplier(*i)
	}
	return rc
}

// SetTimestamp sets the "timestamp" field.
func (rc *RoundCreate) SetTimestamp(t time.Time) *RoundCreate {
	rc.mutation.SetTimestamp(t)
	return rc
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (rc *RoundCreate) SetNillableTimestamp(t *time.Time) *RoundCreate {
	if t != nil {
		rc.SetTimestamp(*t)
	}
	return rc
}

// SetRoundType sets the "round_type" field.
func (rc *RoundCreate) SetRoundType(s string) *RoundCreate {
	rc.mutation.SetRoundType(s)
	return rc
}

// SetNillableRoundType sets the "round_type" field if the given value is not nil.
func (rc *RoundCreate) SetNillableRoundType(s *string) *RoundCreate {
	if s != nil {
		rc.SetRoundType(*s)
	}
	return rc
}

// SetPlay sets the "play" field.
func (rc *RoundCreate) SetPlay(m map[string]interface{}) *RoundCreate {
	rc.mutation.SetPlay(m)
	return rc
}

// SetFreeSpinsRemaining sets the "free_spins_remaining" field.
func (rc *RoundCreate) SetFreeSpinsRemaining(i int) *RoundCreate {
	rc.mutation.SetFreeSpinsRemaining(i)
	return rc
}

// SetNillableFreeSpinsRemaining sets the "free_spins_remaining" field if the given value is not nil.
func (rc *RoundCreate) SetNillableFreeSpinsRemaining(i *int) *RoundCreate {
	if i != nil {
		rc.SetFreeSpinsRemaining(*i)
	}
	return rc
}

// SetMathOutput sets the "math_output" field.
func (rc *RoundCreate) SetMathOutput(s string) *RoundCreate {
	rc.mutation.SetMathOutput(s)
	return rc
}

// SetNillableMathOutput sets the "math_output" field if the given value is not nil.
func (rc *RoundCreate) SetNillableMathOutput(s *string) *RoundCreate {
	if s != nil {
		rc.SetMathOutput(*s)
	}
	return rc
}

// SetGameService sets the "game_service" field.
func (rc *RoundCreate) SetGameService(m map[string]interface{}) *RoundCreate {
	rc.mutation.SetGameService(m)
	return rc
}

// SetFreeSpinsCount sets the "free_spins_count" field.
func (rc *RoundCreate) SetFreeSpinsCount(i int) *RoundCreate {
	rc.mutation.SetFreeSpinsCount(i)
	return rc
}

// SetNillableFreeSpinsCount sets the "free_spins_count" field if the given value is not nil.
func (rc *RoundCreate) SetNillableFreeSpinsCount(i *int) *RoundCreate {
	if i != nil {
		rc.SetFreeSpinsCount(*i)
	}
	return rc
}

// SetAnteBet sets the "ante_bet" field.
func (rc *RoundCreate) SetAnteBet(b bool) *RoundCreate {
	rc.mutation.SetAnteBet(b)
	return rc
}

// SetNillableAnteBet sets the "ante_bet" field if the given value is not nil.
func (rc *RoundCreate) SetNillableAnteBet(b *bool) *RoundCreate {
	if b != nil {
		rc.SetAnteBet(*b)
	}
	return rc
}

// SetBuyBonus sets the "buy_bonus" field.
func (rc *RoundCreate) SetBuyBonus(s string) *RoundCreate {
	rc.mutation.SetBuyBonus(s)
	return rc
}

// SetNillableBuyBonus sets the "buy_bonus" field if the given value is not nil.
func (rc *RoundCreate) SetNillableBuyBonus(s *string) *RoundCreate {
	if s != nil {
		rc.SetBuyBonus(*s)
	}
	return rc
}

// SetCharacter sets the "character" field.
func (rc *RoundCreate) SetCharacter(i int) *RoundCreate {
	rc.mutation.SetCharacter(i)
	return rc
}

// SetNillableCharacter sets the "character" field if the given value is not nil.
func (rc *RoundCreate) SetNillableCharacter(i *int) *RoundCreate {
	if i != nil {
		rc.SetCharacter(*i)
	}
	return rc
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (rc *RoundCreate) AddTransactionIDs(ids ...int) *RoundCreate {
	rc.mutation.AddTransactionIDs(ids...)
	return rc
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (rc *RoundCreate) AddTransactions(t ...*Transaction) *RoundCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return rc.AddTransactionIDs(ids...)
}

// Mutation returns the RoundMutation object of the builder.
func (rc *RoundCreate) Mutation() *RoundMutation {
	return rc.mutation
}

// Save creates the Round in the database.
func (rc *RoundCreate) Save(ctx context.Context) (*Round, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RoundCreate) SaveX(ctx context.Context) *Round {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RoundCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RoundCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RoundCreate) defaults() {
	if _, ok := rc.mutation.Timestamp(); !ok {
		v := round.DefaultTimestamp()
		rc.mutation.SetTimestamp(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RoundCreate) check() error {
	if _, ok := rc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "Round.platform"`)}
	}
	if _, ok := rc.mutation.Operator(); !ok {
		return &ValidationError{Name: "operator", err: errors.New(`ent: missing required field "Round.operator"`)}
	}
	if _, ok := rc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "Round.timestamp"`)}
	}
	if _, ok := rc.mutation.Play(); !ok {
		return &ValidationError{Name: "play", err: errors.New(`ent: missing required field "Round.play"`)}
	}
	return nil
}

func (rc *RoundCreate) sqlSave(ctx context.Context) (*Round, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RoundCreate) createSpec() (*Round, *sqlgraph.CreateSpec) {
	var (
		_node = &Round{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(round.Table, sqlgraph.NewFieldSpec(round.FieldID, field.TypeInt))
	)
	if value, ok := rc.mutation.Platform(); ok {
		_spec.SetField(round.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := rc.mutation.Operator(); ok {
		_spec.SetField(round.FieldOperator, field.TypeString, value)
		_node.Operator = value
	}
	if value, ok := rc.mutation.Reels(); ok {
		_spec.SetField(round.FieldReels, field.TypeJSON, value)
		_node.Reels = value
	}
	if value, ok := rc.mutation.Multipliers(); ok {
		_spec.SetField(round.FieldMultipliers, field.TypeJSON, value)
		_node.Multipliers = value
	}
	if value, ok := rc.mutation.BonusType(); ok {
		_spec.SetField(round.FieldBonusType, field.TypeString, value)
		_node.BonusType = value
	}
	if value, ok := rc.mutation.BonusSymbol(); ok {
		_spec.SetField(round.FieldBonusSymbol, field.TypeInt, value)
		_node.BonusSymbol = value
	}
	if value, ok := rc.mutation.BonusMultiplier(); ok {
		_spec.SetField(round.FieldBonusMultiplier, field.TypeInt, value)
		_node.BonusMultiplier = value
	}
	if value, ok := rc.mutation.Timestamp(); ok {
		_spec.SetField(round.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := rc.mutation.RoundType(); ok {
		_spec.SetField(round.FieldRoundType, field.TypeString, value)
		_node.RoundType = value
	}
	if value, ok := rc.mutation.Play(); ok {
		_spec.SetField(round.FieldPlay, field.TypeJSON, value)
		_node.Play = value
	}
	if value, ok := rc.mutation.FreeSpinsRemaining(); ok {
		_spec.SetField(round.FieldFreeSpinsRemaining, field.TypeInt, value)
		_node.FreeSpinsRemaining = value
	}
	if value, ok := rc.mutation.MathOutput(); ok {
		_spec.SetField(round.FieldMathOutput, field.TypeString, value)
		_node.MathOutput = value
	}
	if value, ok := rc.mutation.GameService(); ok {
		_spec.SetField(round.FieldGameService, field.TypeJSON, value)
		_node.GameService = value
	}
	if value, ok := rc.mutation.FreeSpinsCount(); ok {
		_spec.SetField(round.FieldFreeSpinsCount, field.TypeInt, value)
		_node.FreeSpinsCount = value
	}
	if value, ok := rc.mutation.AnteBet(); ok {
		_spec.SetField(round.FieldAnteBet, field.TypeBool, value)
		_node.AnteBet = value
	}
	if value, ok := rc.mutation.BuyBonus(); ok {
		_spec.SetField(round.FieldBuyBonus, field.TypeString, value)
		_node.BuyBonus = value
	}
	if value, ok := rc.mutation.Character(); ok {
		_spec.SetField(round.FieldCharacter, field.TypeInt, value)
		_node.Character = value
	}
	if nodes := rc.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.TransactionsTable,
			Columns: []string{round.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RoundCreateBulk is the builder for creating many Round entities in bulk.
type RoundCreateBulk struct {
	config
	err      error
	builders []*RoundCreate
}

// Save creates the Round entities in the database.
func (rcb *RoundCreateBulk) Save(ctx context.Context) ([]*Round, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Round, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoundMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RoundCreateBulk) SaveX(ctx context.Context) []*Round {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RoundCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RoundCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
