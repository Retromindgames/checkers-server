// Code generated by ent, DO NOT EDIT.

package gameversion

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the gameversion type in the database.
	Label = "game_version"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldCanDemo holds the string denoting the can_demo field in the database.
	FieldCanDemo = "can_demo"
	// FieldCanTournament holds the string denoting the can_tournament field in the database.
	FieldCanTournament = "can_tournament"
	// FieldCanFreeBets holds the string denoting the can_free_bets field in the database.
	FieldCanFreeBets = "can_free_bets"
	// FieldCanDropAndWins holds the string denoting the can_drop_and_wins field in the database.
	FieldCanDropAndWins = "can_drop_and_wins"
	// FieldCanTurbo holds the string denoting the can_turbo field in the database.
	FieldCanTurbo = "can_turbo"
	// FieldURLMediaPack holds the string denoting the url_media_pack field in the database.
	FieldURLMediaPack = "url_media_pack"
	// FieldURLReleaseNote holds the string denoting the url_release_note field in the database.
	FieldURLReleaseNote = "url_release_note"
	// FieldDeprecated holds the string denoting the deprecated field in the database.
	FieldDeprecated = "deprecated"
	// FieldAvailableMathVersions holds the string denoting the available_math_versions field in the database.
	FieldAvailableMathVersions = "available_math_versions"
	// FieldCanAutoBet holds the string denoting the can_auto_bet field in the database.
	FieldCanAutoBet = "can_auto_bet"
	// FieldURLGameManual holds the string denoting the url_game_manual field in the database.
	FieldURLGameManual = "url_game_manual"
	// FieldCanAutoCashout holds the string denoting the can_auto_cashout field in the database.
	FieldCanAutoCashout = "can_auto_cashout"
	// FieldCanBuyBonus holds the string denoting the can_buy_bonus field in the database.
	FieldCanBuyBonus = "can_buy_bonus"
	// FieldCanAnteBet holds the string denoting the can_ante_bet field in the database.
	FieldCanAnteBet = "can_ante_bet"
	// EdgeGames holds the string denoting the games edge name in mutations.
	EdgeGames = "games"
	// EdgeGameType holds the string denoting the game_type edge name in mutations.
	EdgeGameType = "game_type"
	// EdgeSessions holds the string denoting the sessions edge name in mutations.
	EdgeSessions = "sessions"
	// EdgeGameConfigs holds the string denoting the game_configs edge name in mutations.
	EdgeGameConfigs = "game_configs"
	// Table holds the table name of the gameversion in the database.
	Table = "game_versions"
	// GamesTable is the table that holds the games relation/edge.
	GamesTable = "game_versions"
	// GamesInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	GamesInverseTable = "games"
	// GamesColumn is the table column denoting the games relation/edge.
	GamesColumn = "game_game_versions"
	// GameTypeTable is the table that holds the game_type relation/edge.
	GameTypeTable = "game_versions"
	// GameTypeInverseTable is the table name for the GameType entity.
	// It exists in this package in order to avoid circular dependency with the "gametype" package.
	GameTypeInverseTable = "game_types"
	// GameTypeColumn is the table column denoting the game_type relation/edge.
	GameTypeColumn = "game_type_game_versions"
	// SessionsTable is the table that holds the sessions relation/edge.
	SessionsTable = "sessions"
	// SessionsInverseTable is the table name for the Session entity.
	// It exists in this package in order to avoid circular dependency with the "session" package.
	SessionsInverseTable = "sessions"
	// SessionsColumn is the table column denoting the sessions relation/edge.
	SessionsColumn = "game_version_sessions"
	// GameConfigsTable is the table that holds the game_configs relation/edge.
	GameConfigsTable = "game_configs"
	// GameConfigsInverseTable is the table name for the GameConfig entity.
	// It exists in this package in order to avoid circular dependency with the "gameconfig" package.
	GameConfigsInverseTable = "game_configs"
	// GameConfigsColumn is the table column denoting the game_configs relation/edge.
	GameConfigsColumn = "game_version_game_configs"
)

// Columns holds all SQL columns for gameversion fields.
var Columns = []string{
	FieldID,
	FieldVersion,
	FieldCanDemo,
	FieldCanTournament,
	FieldCanFreeBets,
	FieldCanDropAndWins,
	FieldCanTurbo,
	FieldURLMediaPack,
	FieldURLReleaseNote,
	FieldDeprecated,
	FieldAvailableMathVersions,
	FieldCanAutoBet,
	FieldURLGameManual,
	FieldCanAutoCashout,
	FieldCanBuyBonus,
	FieldCanAnteBet,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "game_versions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"game_game_versions",
	"game_type_game_versions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCanDemo holds the default value on creation for the "can_demo" field.
	DefaultCanDemo bool
	// DefaultCanTournament holds the default value on creation for the "can_tournament" field.
	DefaultCanTournament bool
	// DefaultCanFreeBets holds the default value on creation for the "can_free_bets" field.
	DefaultCanFreeBets bool
	// DefaultCanDropAndWins holds the default value on creation for the "can_drop_and_wins" field.
	DefaultCanDropAndWins bool
	// DefaultCanTurbo holds the default value on creation for the "can_turbo" field.
	DefaultCanTurbo bool
	// DefaultDeprecated holds the default value on creation for the "deprecated" field.
	DefaultDeprecated bool
	// DefaultCanAutoBet holds the default value on creation for the "can_auto_bet" field.
	DefaultCanAutoBet bool
	// DefaultCanAutoCashout holds the default value on creation for the "can_auto_cashout" field.
	DefaultCanAutoCashout bool
	// DefaultCanBuyBonus holds the default value on creation for the "can_buy_bonus" field.
	DefaultCanBuyBonus bool
	// DefaultCanAnteBet holds the default value on creation for the "can_ante_bet" field.
	DefaultCanAnteBet bool
)

// OrderOption defines the ordering options for the GameVersion queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByCanDemo orders the results by the can_demo field.
func ByCanDemo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanDemo, opts...).ToFunc()
}

// ByCanTournament orders the results by the can_tournament field.
func ByCanTournament(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanTournament, opts...).ToFunc()
}

// ByCanFreeBets orders the results by the can_free_bets field.
func ByCanFreeBets(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanFreeBets, opts...).ToFunc()
}

// ByCanDropAndWins orders the results by the can_drop_and_wins field.
func ByCanDropAndWins(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanDropAndWins, opts...).ToFunc()
}

// ByCanTurbo orders the results by the can_turbo field.
func ByCanTurbo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanTurbo, opts...).ToFunc()
}

// ByURLMediaPack orders the results by the url_media_pack field.
func ByURLMediaPack(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURLMediaPack, opts...).ToFunc()
}

// ByURLReleaseNote orders the results by the url_release_note field.
func ByURLReleaseNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURLReleaseNote, opts...).ToFunc()
}

// ByDeprecated orders the results by the deprecated field.
func ByDeprecated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeprecated, opts...).ToFunc()
}

// ByCanAutoBet orders the results by the can_auto_bet field.
func ByCanAutoBet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanAutoBet, opts...).ToFunc()
}

// ByURLGameManual orders the results by the url_game_manual field.
func ByURLGameManual(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURLGameManual, opts...).ToFunc()
}

// ByCanAutoCashout orders the results by the can_auto_cashout field.
func ByCanAutoCashout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanAutoCashout, opts...).ToFunc()
}

// ByCanBuyBonus orders the results by the can_buy_bonus field.
func ByCanBuyBonus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanBuyBonus, opts...).ToFunc()
}

// ByCanAnteBet orders the results by the can_ante_bet field.
func ByCanAnteBet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanAnteBet, opts...).ToFunc()
}

// ByGamesField orders the results by games field.
func ByGamesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGamesStep(), sql.OrderByField(field, opts...))
	}
}

// ByGameTypeField orders the results by game_type field.
func ByGameTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameTypeStep(), sql.OrderByField(field, opts...))
	}
}

// BySessionsCount orders the results by sessions count.
func BySessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSessionsStep(), opts...)
	}
}

// BySessions orders the results by sessions terms.
func BySessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGameConfigsCount orders the results by game_configs count.
func ByGameConfigsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGameConfigsStep(), opts...)
	}
}

// ByGameConfigs orders the results by game_configs terms.
func ByGameConfigs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameConfigsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newGamesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GamesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GamesTable, GamesColumn),
	)
}
func newGameTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GameTypeTable, GameTypeColumn),
	)
}
func newSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
	)
}
func newGameConfigsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameConfigsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GameConfigsTable, GameConfigsColumn),
	)
}
