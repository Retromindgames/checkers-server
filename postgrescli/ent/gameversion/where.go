// Code generated by ent, DO NOT EDIT.

package gameversion

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldLTE(FieldID, id))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldVersion, v))
}

// CanDemo applies equality check predicate on the "can_demo" field. It's identical to CanDemoEQ.
func CanDemo(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldCanDemo, v))
}

// CanTournament applies equality check predicate on the "can_tournament" field. It's identical to CanTournamentEQ.
func CanTournament(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldCanTournament, v))
}

// CanFreeBets applies equality check predicate on the "can_free_bets" field. It's identical to CanFreeBetsEQ.
func CanFreeBets(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldCanFreeBets, v))
}

// CanDropAndWins applies equality check predicate on the "can_drop_and_wins" field. It's identical to CanDropAndWinsEQ.
func CanDropAndWins(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldCanDropAndWins, v))
}

// CanTurbo applies equality check predicate on the "can_turbo" field. It's identical to CanTurboEQ.
func CanTurbo(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldCanTurbo, v))
}

// URLMediaPack applies equality check predicate on the "url_media_pack" field. It's identical to URLMediaPackEQ.
func URLMediaPack(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldURLMediaPack, v))
}

// URLReleaseNote applies equality check predicate on the "url_release_note" field. It's identical to URLReleaseNoteEQ.
func URLReleaseNote(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldURLReleaseNote, v))
}

// Deprecated applies equality check predicate on the "deprecated" field. It's identical to DeprecatedEQ.
func Deprecated(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldDeprecated, v))
}

// CanAutoBet applies equality check predicate on the "can_auto_bet" field. It's identical to CanAutoBetEQ.
func CanAutoBet(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldCanAutoBet, v))
}

// URLGameManual applies equality check predicate on the "url_game_manual" field. It's identical to URLGameManualEQ.
func URLGameManual(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldURLGameManual, v))
}

// CanAutoCashout applies equality check predicate on the "can_auto_cashout" field. It's identical to CanAutoCashoutEQ.
func CanAutoCashout(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldCanAutoCashout, v))
}

// CanBuyBonus applies equality check predicate on the "can_buy_bonus" field. It's identical to CanBuyBonusEQ.
func CanBuyBonus(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldCanBuyBonus, v))
}

// CanAnteBet applies equality check predicate on the "can_ante_bet" field. It's identical to CanAnteBetEQ.
func CanAnteBet(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldCanAnteBet, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldContainsFold(FieldVersion, v))
}

// CanDemoEQ applies the EQ predicate on the "can_demo" field.
func CanDemoEQ(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldCanDemo, v))
}

// CanDemoNEQ applies the NEQ predicate on the "can_demo" field.
func CanDemoNEQ(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldNEQ(FieldCanDemo, v))
}

// CanTournamentEQ applies the EQ predicate on the "can_tournament" field.
func CanTournamentEQ(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldCanTournament, v))
}

// CanTournamentNEQ applies the NEQ predicate on the "can_tournament" field.
func CanTournamentNEQ(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldNEQ(FieldCanTournament, v))
}

// CanFreeBetsEQ applies the EQ predicate on the "can_free_bets" field.
func CanFreeBetsEQ(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldCanFreeBets, v))
}

// CanFreeBetsNEQ applies the NEQ predicate on the "can_free_bets" field.
func CanFreeBetsNEQ(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldNEQ(FieldCanFreeBets, v))
}

// CanDropAndWinsEQ applies the EQ predicate on the "can_drop_and_wins" field.
func CanDropAndWinsEQ(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldCanDropAndWins, v))
}

// CanDropAndWinsNEQ applies the NEQ predicate on the "can_drop_and_wins" field.
func CanDropAndWinsNEQ(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldNEQ(FieldCanDropAndWins, v))
}

// CanTurboEQ applies the EQ predicate on the "can_turbo" field.
func CanTurboEQ(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldCanTurbo, v))
}

// CanTurboNEQ applies the NEQ predicate on the "can_turbo" field.
func CanTurboNEQ(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldNEQ(FieldCanTurbo, v))
}

// URLMediaPackEQ applies the EQ predicate on the "url_media_pack" field.
func URLMediaPackEQ(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldURLMediaPack, v))
}

// URLMediaPackNEQ applies the NEQ predicate on the "url_media_pack" field.
func URLMediaPackNEQ(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldNEQ(FieldURLMediaPack, v))
}

// URLMediaPackIn applies the In predicate on the "url_media_pack" field.
func URLMediaPackIn(vs ...string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldIn(FieldURLMediaPack, vs...))
}

// URLMediaPackNotIn applies the NotIn predicate on the "url_media_pack" field.
func URLMediaPackNotIn(vs ...string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldNotIn(FieldURLMediaPack, vs...))
}

// URLMediaPackGT applies the GT predicate on the "url_media_pack" field.
func URLMediaPackGT(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldGT(FieldURLMediaPack, v))
}

// URLMediaPackGTE applies the GTE predicate on the "url_media_pack" field.
func URLMediaPackGTE(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldGTE(FieldURLMediaPack, v))
}

// URLMediaPackLT applies the LT predicate on the "url_media_pack" field.
func URLMediaPackLT(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldLT(FieldURLMediaPack, v))
}

// URLMediaPackLTE applies the LTE predicate on the "url_media_pack" field.
func URLMediaPackLTE(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldLTE(FieldURLMediaPack, v))
}

// URLMediaPackContains applies the Contains predicate on the "url_media_pack" field.
func URLMediaPackContains(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldContains(FieldURLMediaPack, v))
}

// URLMediaPackHasPrefix applies the HasPrefix predicate on the "url_media_pack" field.
func URLMediaPackHasPrefix(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldHasPrefix(FieldURLMediaPack, v))
}

// URLMediaPackHasSuffix applies the HasSuffix predicate on the "url_media_pack" field.
func URLMediaPackHasSuffix(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldHasSuffix(FieldURLMediaPack, v))
}

// URLMediaPackEqualFold applies the EqualFold predicate on the "url_media_pack" field.
func URLMediaPackEqualFold(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEqualFold(FieldURLMediaPack, v))
}

// URLMediaPackContainsFold applies the ContainsFold predicate on the "url_media_pack" field.
func URLMediaPackContainsFold(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldContainsFold(FieldURLMediaPack, v))
}

// URLReleaseNoteEQ applies the EQ predicate on the "url_release_note" field.
func URLReleaseNoteEQ(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldURLReleaseNote, v))
}

// URLReleaseNoteNEQ applies the NEQ predicate on the "url_release_note" field.
func URLReleaseNoteNEQ(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldNEQ(FieldURLReleaseNote, v))
}

// URLReleaseNoteIn applies the In predicate on the "url_release_note" field.
func URLReleaseNoteIn(vs ...string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldIn(FieldURLReleaseNote, vs...))
}

// URLReleaseNoteNotIn applies the NotIn predicate on the "url_release_note" field.
func URLReleaseNoteNotIn(vs ...string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldNotIn(FieldURLReleaseNote, vs...))
}

// URLReleaseNoteGT applies the GT predicate on the "url_release_note" field.
func URLReleaseNoteGT(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldGT(FieldURLReleaseNote, v))
}

// URLReleaseNoteGTE applies the GTE predicate on the "url_release_note" field.
func URLReleaseNoteGTE(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldGTE(FieldURLReleaseNote, v))
}

// URLReleaseNoteLT applies the LT predicate on the "url_release_note" field.
func URLReleaseNoteLT(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldLT(FieldURLReleaseNote, v))
}

// URLReleaseNoteLTE applies the LTE predicate on the "url_release_note" field.
func URLReleaseNoteLTE(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldLTE(FieldURLReleaseNote, v))
}

// URLReleaseNoteContains applies the Contains predicate on the "url_release_note" field.
func URLReleaseNoteContains(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldContains(FieldURLReleaseNote, v))
}

// URLReleaseNoteHasPrefix applies the HasPrefix predicate on the "url_release_note" field.
func URLReleaseNoteHasPrefix(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldHasPrefix(FieldURLReleaseNote, v))
}

// URLReleaseNoteHasSuffix applies the HasSuffix predicate on the "url_release_note" field.
func URLReleaseNoteHasSuffix(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldHasSuffix(FieldURLReleaseNote, v))
}

// URLReleaseNoteEqualFold applies the EqualFold predicate on the "url_release_note" field.
func URLReleaseNoteEqualFold(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEqualFold(FieldURLReleaseNote, v))
}

// URLReleaseNoteContainsFold applies the ContainsFold predicate on the "url_release_note" field.
func URLReleaseNoteContainsFold(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldContainsFold(FieldURLReleaseNote, v))
}

// DeprecatedEQ applies the EQ predicate on the "deprecated" field.
func DeprecatedEQ(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldDeprecated, v))
}

// DeprecatedNEQ applies the NEQ predicate on the "deprecated" field.
func DeprecatedNEQ(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldNEQ(FieldDeprecated, v))
}

// CanAutoBetEQ applies the EQ predicate on the "can_auto_bet" field.
func CanAutoBetEQ(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldCanAutoBet, v))
}

// CanAutoBetNEQ applies the NEQ predicate on the "can_auto_bet" field.
func CanAutoBetNEQ(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldNEQ(FieldCanAutoBet, v))
}

// URLGameManualEQ applies the EQ predicate on the "url_game_manual" field.
func URLGameManualEQ(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldURLGameManual, v))
}

// URLGameManualNEQ applies the NEQ predicate on the "url_game_manual" field.
func URLGameManualNEQ(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldNEQ(FieldURLGameManual, v))
}

// URLGameManualIn applies the In predicate on the "url_game_manual" field.
func URLGameManualIn(vs ...string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldIn(FieldURLGameManual, vs...))
}

// URLGameManualNotIn applies the NotIn predicate on the "url_game_manual" field.
func URLGameManualNotIn(vs ...string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldNotIn(FieldURLGameManual, vs...))
}

// URLGameManualGT applies the GT predicate on the "url_game_manual" field.
func URLGameManualGT(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldGT(FieldURLGameManual, v))
}

// URLGameManualGTE applies the GTE predicate on the "url_game_manual" field.
func URLGameManualGTE(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldGTE(FieldURLGameManual, v))
}

// URLGameManualLT applies the LT predicate on the "url_game_manual" field.
func URLGameManualLT(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldLT(FieldURLGameManual, v))
}

// URLGameManualLTE applies the LTE predicate on the "url_game_manual" field.
func URLGameManualLTE(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldLTE(FieldURLGameManual, v))
}

// URLGameManualContains applies the Contains predicate on the "url_game_manual" field.
func URLGameManualContains(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldContains(FieldURLGameManual, v))
}

// URLGameManualHasPrefix applies the HasPrefix predicate on the "url_game_manual" field.
func URLGameManualHasPrefix(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldHasPrefix(FieldURLGameManual, v))
}

// URLGameManualHasSuffix applies the HasSuffix predicate on the "url_game_manual" field.
func URLGameManualHasSuffix(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldHasSuffix(FieldURLGameManual, v))
}

// URLGameManualEqualFold applies the EqualFold predicate on the "url_game_manual" field.
func URLGameManualEqualFold(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEqualFold(FieldURLGameManual, v))
}

// URLGameManualContainsFold applies the ContainsFold predicate on the "url_game_manual" field.
func URLGameManualContainsFold(v string) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldContainsFold(FieldURLGameManual, v))
}

// CanAutoCashoutEQ applies the EQ predicate on the "can_auto_cashout" field.
func CanAutoCashoutEQ(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldCanAutoCashout, v))
}

// CanAutoCashoutNEQ applies the NEQ predicate on the "can_auto_cashout" field.
func CanAutoCashoutNEQ(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldNEQ(FieldCanAutoCashout, v))
}

// CanBuyBonusEQ applies the EQ predicate on the "can_buy_bonus" field.
func CanBuyBonusEQ(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldCanBuyBonus, v))
}

// CanBuyBonusNEQ applies the NEQ predicate on the "can_buy_bonus" field.
func CanBuyBonusNEQ(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldNEQ(FieldCanBuyBonus, v))
}

// CanAnteBetEQ applies the EQ predicate on the "can_ante_bet" field.
func CanAnteBetEQ(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldEQ(FieldCanAnteBet, v))
}

// CanAnteBetNEQ applies the NEQ predicate on the "can_ante_bet" field.
func CanAnteBetNEQ(v bool) predicate.GameVersion {
	return predicate.GameVersion(sql.FieldNEQ(FieldCanAnteBet, v))
}

// HasGames applies the HasEdge predicate on the "games" edge.
func HasGames() predicate.GameVersion {
	return predicate.GameVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GamesTable, GamesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGamesWith applies the HasEdge predicate on the "games" edge with a given conditions (other predicates).
func HasGamesWith(preds ...predicate.Game) predicate.GameVersion {
	return predicate.GameVersion(func(s *sql.Selector) {
		step := newGamesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGameType applies the HasEdge predicate on the "game_type" edge.
func HasGameType() predicate.GameVersion {
	return predicate.GameVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GameTypeTable, GameTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGameTypeWith applies the HasEdge predicate on the "game_type" edge with a given conditions (other predicates).
func HasGameTypeWith(preds ...predicate.GameType) predicate.GameVersion {
	return predicate.GameVersion(func(s *sql.Selector) {
		step := newGameTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSessions applies the HasEdge predicate on the "sessions" edge.
func HasSessions() predicate.GameVersion {
	return predicate.GameVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSessionsWith applies the HasEdge predicate on the "sessions" edge with a given conditions (other predicates).
func HasSessionsWith(preds ...predicate.Session) predicate.GameVersion {
	return predicate.GameVersion(func(s *sql.Selector) {
		step := newSessionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGameConfigs applies the HasEdge predicate on the "game_configs" edge.
func HasGameConfigs() predicate.GameVersion {
	return predicate.GameVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GameConfigsTable, GameConfigsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGameConfigsWith applies the HasEdge predicate on the "game_configs" edge with a given conditions (other predicates).
func HasGameConfigsWith(preds ...predicate.GameConfig) predicate.GameVersion {
	return predicate.GameVersion(func(s *sql.Selector) {
		step := newGameConfigsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GameVersion) predicate.GameVersion {
	return predicate.GameVersion(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GameVersion) predicate.GameVersion {
	return predicate.GameVersion(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GameVersion) predicate.GameVersion {
	return predicate.GameVersion(sql.NotPredicates(p))
}
