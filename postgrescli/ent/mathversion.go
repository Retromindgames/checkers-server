// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Lavizord/checkers-server/postgrescli/ent/mathversion"
)

// MathVersion is the model entity for the MathVersion schema.
type MathVersion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Volatility holds the value of the "volatility" field.
	Volatility int `json:"volatility,omitempty"`
	// Rtp holds the value of the "rtp" field.
	Rtp int `json:"rtp,omitempty"`
	// MaxWin holds the value of the "max_win" field.
	MaxWin int `json:"max_win,omitempty"`
	// CanBuyBonus holds the value of the "can_buy_bonus" field.
	CanBuyBonus bool `json:"can_buy_bonus,omitempty"`
	// URLReleaseNote holds the value of the "url_release_note" field.
	URLReleaseNote string `json:"url_release_note,omitempty"`
	// Deprecated holds the value of the "deprecated" field.
	Deprecated bool `json:"deprecated,omitempty"`
	// CanAnteBet holds the value of the "can_ante_bet" field.
	CanAnteBet bool `json:"can_ante_bet,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MathVersionQuery when eager-loading is set.
	Edges        MathVersionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MathVersionEdges holds the relations/edges for other nodes in the graph.
type MathVersionEdges struct {
	// Sessions holds the value of the sessions edge.
	Sessions []*Session `json:"sessions,omitempty"`
	// GameConfigs holds the value of the game_configs edge.
	GameConfigs []*GameConfig `json:"game_configs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SessionsOrErr returns the Sessions value or an error if the edge
// was not loaded in eager-loading.
func (e MathVersionEdges) SessionsOrErr() ([]*Session, error) {
	if e.loadedTypes[0] {
		return e.Sessions, nil
	}
	return nil, &NotLoadedError{edge: "sessions"}
}

// GameConfigsOrErr returns the GameConfigs value or an error if the edge
// was not loaded in eager-loading.
func (e MathVersionEdges) GameConfigsOrErr() ([]*GameConfig, error) {
	if e.loadedTypes[1] {
		return e.GameConfigs, nil
	}
	return nil, &NotLoadedError{edge: "game_configs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MathVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mathversion.FieldCanBuyBonus, mathversion.FieldDeprecated, mathversion.FieldCanAnteBet:
			values[i] = new(sql.NullBool)
		case mathversion.FieldID, mathversion.FieldVolatility, mathversion.FieldRtp, mathversion.FieldMaxWin:
			values[i] = new(sql.NullInt64)
		case mathversion.FieldName, mathversion.FieldVersion, mathversion.FieldURLReleaseNote:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MathVersion fields.
func (mv *MathVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mathversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mv.ID = int(value.Int64)
		case mathversion.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mv.Name = value.String
			}
		case mathversion.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				mv.Version = value.String
			}
		case mathversion.FieldVolatility:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field volatility", values[i])
			} else if value.Valid {
				mv.Volatility = int(value.Int64)
			}
		case mathversion.FieldRtp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rtp", values[i])
			} else if value.Valid {
				mv.Rtp = int(value.Int64)
			}
		case mathversion.FieldMaxWin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_win", values[i])
			} else if value.Valid {
				mv.MaxWin = int(value.Int64)
			}
		case mathversion.FieldCanBuyBonus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_buy_bonus", values[i])
			} else if value.Valid {
				mv.CanBuyBonus = value.Bool
			}
		case mathversion.FieldURLReleaseNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url_release_note", values[i])
			} else if value.Valid {
				mv.URLReleaseNote = value.String
			}
		case mathversion.FieldDeprecated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deprecated", values[i])
			} else if value.Valid {
				mv.Deprecated = value.Bool
			}
		case mathversion.FieldCanAnteBet:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_ante_bet", values[i])
			} else if value.Valid {
				mv.CanAnteBet = value.Bool
			}
		default:
			mv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MathVersion.
// This includes values selected through modifiers, order, etc.
func (mv *MathVersion) Value(name string) (ent.Value, error) {
	return mv.selectValues.Get(name)
}

// QuerySessions queries the "sessions" edge of the MathVersion entity.
func (mv *MathVersion) QuerySessions() *SessionQuery {
	return NewMathVersionClient(mv.config).QuerySessions(mv)
}

// QueryGameConfigs queries the "game_configs" edge of the MathVersion entity.
func (mv *MathVersion) QueryGameConfigs() *GameConfigQuery {
	return NewMathVersionClient(mv.config).QueryGameConfigs(mv)
}

// Update returns a builder for updating this MathVersion.
// Note that you need to call MathVersion.Unwrap() before calling this method if this MathVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (mv *MathVersion) Update() *MathVersionUpdateOne {
	return NewMathVersionClient(mv.config).UpdateOne(mv)
}

// Unwrap unwraps the MathVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mv *MathVersion) Unwrap() *MathVersion {
	_tx, ok := mv.config.driver.(*txDriver)
	if !ok {
		panic("ent: MathVersion is not a transactional entity")
	}
	mv.config.driver = _tx.drv
	return mv
}

// String implements the fmt.Stringer.
func (mv *MathVersion) String() string {
	var builder strings.Builder
	builder.WriteString("MathVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mv.ID))
	builder.WriteString("name=")
	builder.WriteString(mv.Name)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(mv.Version)
	builder.WriteString(", ")
	builder.WriteString("volatility=")
	builder.WriteString(fmt.Sprintf("%v", mv.Volatility))
	builder.WriteString(", ")
	builder.WriteString("rtp=")
	builder.WriteString(fmt.Sprintf("%v", mv.Rtp))
	builder.WriteString(", ")
	builder.WriteString("max_win=")
	builder.WriteString(fmt.Sprintf("%v", mv.MaxWin))
	builder.WriteString(", ")
	builder.WriteString("can_buy_bonus=")
	builder.WriteString(fmt.Sprintf("%v", mv.CanBuyBonus))
	builder.WriteString(", ")
	builder.WriteString("url_release_note=")
	builder.WriteString(mv.URLReleaseNote)
	builder.WriteString(", ")
	builder.WriteString("deprecated=")
	builder.WriteString(fmt.Sprintf("%v", mv.Deprecated))
	builder.WriteString(", ")
	builder.WriteString("can_ante_bet=")
	builder.WriteString(fmt.Sprintf("%v", mv.CanAnteBet))
	builder.WriteByte(')')
	return builder.String()
}

// MathVersions is a parsable slice of MathVersion.
type MathVersions []*MathVersion
