// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameconfig"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gamefeature"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gametype"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/serie"
	"github.com/Lavizord/checkers-server/postgrescli/ent/session"
	"github.com/Lavizord/checkers-server/postgrescli/ent/studio"
)

// GameCreate is the builder for creating a Game entity.
type GameCreate struct {
	config
	mutation *GameMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (gc *GameCreate) SetName(s string) *GameCreate {
	gc.mutation.SetName(s)
	return gc
}

// SetExternalID sets the "external_id" field.
func (gc *GameCreate) SetExternalID(s string) *GameCreate {
	gc.mutation.SetExternalID(s)
	return gc
}

// SetTrademarkName sets the "trademark_name" field.
func (gc *GameCreate) SetTrademarkName(s string) *GameCreate {
	gc.mutation.SetTrademarkName(s)
	return gc
}

// SetStudioID sets the "studio" edge to the Studio entity by ID.
func (gc *GameCreate) SetStudioID(id int) *GameCreate {
	gc.mutation.SetStudioID(id)
	return gc
}

// SetNillableStudioID sets the "studio" edge to the Studio entity by ID if the given value is not nil.
func (gc *GameCreate) SetNillableStudioID(id *int) *GameCreate {
	if id != nil {
		gc = gc.SetStudioID(*id)
	}
	return gc
}

// SetStudio sets the "studio" edge to the Studio entity.
func (gc *GameCreate) SetStudio(s *Studio) *GameCreate {
	return gc.SetStudioID(s.ID)
}

// SetGameTypeID sets the "game_type" edge to the GameType entity by ID.
func (gc *GameCreate) SetGameTypeID(id int) *GameCreate {
	gc.mutation.SetGameTypeID(id)
	return gc
}

// SetNillableGameTypeID sets the "game_type" edge to the GameType entity by ID if the given value is not nil.
func (gc *GameCreate) SetNillableGameTypeID(id *int) *GameCreate {
	if id != nil {
		gc = gc.SetGameTypeID(*id)
	}
	return gc
}

// SetGameType sets the "game_type" edge to the GameType entity.
func (gc *GameCreate) SetGameType(g *GameType) *GameCreate {
	return gc.SetGameTypeID(g.ID)
}

// SetSerieID sets the "serie" edge to the Serie entity by ID.
func (gc *GameCreate) SetSerieID(id int) *GameCreate {
	gc.mutation.SetSerieID(id)
	return gc
}

// SetNillableSerieID sets the "serie" edge to the Serie entity by ID if the given value is not nil.
func (gc *GameCreate) SetNillableSerieID(id *int) *GameCreate {
	if id != nil {
		gc = gc.SetSerieID(*id)
	}
	return gc
}

// SetSerie sets the "serie" edge to the Serie entity.
func (gc *GameCreate) SetSerie(s *Serie) *GameCreate {
	return gc.SetSerieID(s.ID)
}

// AddGameFeatureIDs adds the "game_features" edge to the GameFeature entity by IDs.
func (gc *GameCreate) AddGameFeatureIDs(ids ...int) *GameCreate {
	gc.mutation.AddGameFeatureIDs(ids...)
	return gc
}

// AddGameFeatures adds the "game_features" edges to the GameFeature entity.
func (gc *GameCreate) AddGameFeatures(g ...*GameFeature) *GameCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gc.AddGameFeatureIDs(ids...)
}

// AddGameVersionIDs adds the "game_versions" edge to the GameVersion entity by IDs.
func (gc *GameCreate) AddGameVersionIDs(ids ...int) *GameCreate {
	gc.mutation.AddGameVersionIDs(ids...)
	return gc
}

// AddGameVersions adds the "game_versions" edges to the GameVersion entity.
func (gc *GameCreate) AddGameVersions(g ...*GameVersion) *GameCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gc.AddGameVersionIDs(ids...)
}

// AddGameConfigIDs adds the "game_configs" edge to the GameConfig entity by IDs.
func (gc *GameCreate) AddGameConfigIDs(ids ...int) *GameCreate {
	gc.mutation.AddGameConfigIDs(ids...)
	return gc
}

// AddGameConfigs adds the "game_configs" edges to the GameConfig entity.
func (gc *GameCreate) AddGameConfigs(g ...*GameConfig) *GameCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gc.AddGameConfigIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (gc *GameCreate) AddSessionIDs(ids ...int) *GameCreate {
	gc.mutation.AddSessionIDs(ids...)
	return gc
}

// AddSessions adds the "sessions" edges to the Session entity.
func (gc *GameCreate) AddSessions(s ...*Session) *GameCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return gc.AddSessionIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (gc *GameCreate) Mutation() *GameMutation {
	return gc.mutation
}

// Save creates the Game in the database.
func (gc *GameCreate) Save(ctx context.Context) (*Game, error) {
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GameCreate) SaveX(ctx context.Context) *Game {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GameCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GameCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GameCreate) check() error {
	if _, ok := gc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Game.name"`)}
	}
	if _, ok := gc.mutation.ExternalID(); !ok {
		return &ValidationError{Name: "external_id", err: errors.New(`ent: missing required field "Game.external_id"`)}
	}
	if _, ok := gc.mutation.TrademarkName(); !ok {
		return &ValidationError{Name: "trademark_name", err: errors.New(`ent: missing required field "Game.trademark_name"`)}
	}
	return nil
}

func (gc *GameCreate) sqlSave(ctx context.Context) (*Game, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GameCreate) createSpec() (*Game, *sqlgraph.CreateSpec) {
	var (
		_node = &Game{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(game.Table, sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt))
	)
	if value, ok := gc.mutation.Name(); ok {
		_spec.SetField(game.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := gc.mutation.ExternalID(); ok {
		_spec.SetField(game.FieldExternalID, field.TypeString, value)
		_node.ExternalID = value
	}
	if value, ok := gc.mutation.TrademarkName(); ok {
		_spec.SetField(game.FieldTrademarkName, field.TypeString, value)
		_node.TrademarkName = value
	}
	if nodes := gc.mutation.StudioIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.StudioTable,
			Columns: []string{game.StudioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studio.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.studio_games = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.GameTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.GameTypeTable,
			Columns: []string{game.GameTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gametype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_type_games = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.SerieIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.SerieTable,
			Columns: []string{game.SerieColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serie.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.serie_games = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.GameFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameFeaturesTable,
			Columns: []string{game.GameFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamefeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.GameVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameVersionsTable,
			Columns: []string{game.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.GameConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameConfigsTable,
			Columns: []string{game.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.SessionsTable,
			Columns: []string{game.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GameCreateBulk is the builder for creating many Game entities in bulk.
type GameCreateBulk struct {
	config
	err      error
	builders []*GameCreate
}

// Save creates the Game entities in the database.
func (gcb *GameCreateBulk) Save(ctx context.Context) ([]*Game, error) {
	if gcb.err != nil {
		return nil, gcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Game, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GameCreateBulk) SaveX(ctx context.Context) []*Game {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GameCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GameCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
