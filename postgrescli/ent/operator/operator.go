// Code generated by ent, DO NOT EDIT.

package operator

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the operator type in the database.
	Label = "operator"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldAlias holds the string denoting the alias field in the database.
	FieldAlias = "alias"
	// EdgePlatforms holds the string denoting the platforms edge name in mutations.
	EdgePlatforms = "platforms"
	// EdgeSessions holds the string denoting the sessions edge name in mutations.
	EdgeSessions = "sessions"
	// EdgeGameConfigs holds the string denoting the game_configs edge name in mutations.
	EdgeGameConfigs = "game_configs"
	// Table holds the table name of the operator in the database.
	Table = "operators"
	// PlatformsTable is the table that holds the platforms relation/edge.
	PlatformsTable = "operators"
	// PlatformsInverseTable is the table name for the Platform entity.
	// It exists in this package in order to avoid circular dependency with the "platform" package.
	PlatformsInverseTable = "platforms"
	// PlatformsColumn is the table column denoting the platforms relation/edge.
	PlatformsColumn = "platform_operator"
	// SessionsTable is the table that holds the sessions relation/edge.
	SessionsTable = "sessions"
	// SessionsInverseTable is the table name for the Session entity.
	// It exists in this package in order to avoid circular dependency with the "session" package.
	SessionsInverseTable = "sessions"
	// SessionsColumn is the table column denoting the sessions relation/edge.
	SessionsColumn = "operator_sessions"
	// GameConfigsTable is the table that holds the game_configs relation/edge.
	GameConfigsTable = "game_configs"
	// GameConfigsInverseTable is the table name for the GameConfig entity.
	// It exists in this package in order to avoid circular dependency with the "gameconfig" package.
	GameConfigsInverseTable = "game_configs"
	// GameConfigsColumn is the table column denoting the game_configs relation/edge.
	GameConfigsColumn = "operator_game_configs"
)

// Columns holds all SQL columns for operator fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCreatedAt,
	FieldDeletedAt,
	FieldAlias,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "operators"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"platform_operator",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Operator queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByAlias orders the results by the alias field.
func ByAlias(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlias, opts...).ToFunc()
}

// ByPlatformsField orders the results by platforms field.
func ByPlatformsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlatformsStep(), sql.OrderByField(field, opts...))
	}
}

// BySessionsCount orders the results by sessions count.
func BySessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSessionsStep(), opts...)
	}
}

// BySessions orders the results by sessions terms.
func BySessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGameConfigsCount orders the results by game_configs count.
func ByGameConfigsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGameConfigsStep(), opts...)
	}
}

// ByGameConfigs orders the results by game_configs terms.
func ByGameConfigs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameConfigsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPlatformsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlatformsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlatformsTable, PlatformsColumn),
	)
}
func newSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
	)
}
func newGameConfigsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameConfigsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GameConfigsTable, GameConfigsColumn),
	)
}
