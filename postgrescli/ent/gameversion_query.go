// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameconfig"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gametype"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
	"github.com/Lavizord/checkers-server/postgrescli/ent/session"
)

// GameVersionQuery is the builder for querying GameVersion entities.
type GameVersionQuery struct {
	config
	ctx             *QueryContext
	order           []gameversion.OrderOption
	inters          []Interceptor
	predicates      []predicate.GameVersion
	withGames       *GameQuery
	withGameType    *GameTypeQuery
	withSessions    *SessionQuery
	withGameConfigs *GameConfigQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GameVersionQuery builder.
func (gvq *GameVersionQuery) Where(ps ...predicate.GameVersion) *GameVersionQuery {
	gvq.predicates = append(gvq.predicates, ps...)
	return gvq
}

// Limit the number of records to be returned by this query.
func (gvq *GameVersionQuery) Limit(limit int) *GameVersionQuery {
	gvq.ctx.Limit = &limit
	return gvq
}

// Offset to start from.
func (gvq *GameVersionQuery) Offset(offset int) *GameVersionQuery {
	gvq.ctx.Offset = &offset
	return gvq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gvq *GameVersionQuery) Unique(unique bool) *GameVersionQuery {
	gvq.ctx.Unique = &unique
	return gvq
}

// Order specifies how the records should be ordered.
func (gvq *GameVersionQuery) Order(o ...gameversion.OrderOption) *GameVersionQuery {
	gvq.order = append(gvq.order, o...)
	return gvq
}

// QueryGames chains the current query on the "games" edge.
func (gvq *GameVersionQuery) QueryGames() *GameQuery {
	query := (&GameClient{config: gvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gameversion.Table, gameversion.FieldID, selector),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gameversion.GamesTable, gameversion.GamesColumn),
		)
		fromU = sqlgraph.SetNeighbors(gvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGameType chains the current query on the "game_type" edge.
func (gvq *GameVersionQuery) QueryGameType() *GameTypeQuery {
	query := (&GameTypeClient{config: gvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gameversion.Table, gameversion.FieldID, selector),
			sqlgraph.To(gametype.Table, gametype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gameversion.GameTypeTable, gameversion.GameTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(gvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySessions chains the current query on the "sessions" edge.
func (gvq *GameVersionQuery) QuerySessions() *SessionQuery {
	query := (&SessionClient{config: gvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gameversion.Table, gameversion.FieldID, selector),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gameversion.SessionsTable, gameversion.SessionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(gvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGameConfigs chains the current query on the "game_configs" edge.
func (gvq *GameVersionQuery) QueryGameConfigs() *GameConfigQuery {
	query := (&GameConfigClient{config: gvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gameversion.Table, gameversion.FieldID, selector),
			sqlgraph.To(gameconfig.Table, gameconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gameversion.GameConfigsTable, gameversion.GameConfigsColumn),
		)
		fromU = sqlgraph.SetNeighbors(gvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GameVersion entity from the query.
// Returns a *NotFoundError when no GameVersion was found.
func (gvq *GameVersionQuery) First(ctx context.Context) (*GameVersion, error) {
	nodes, err := gvq.Limit(1).All(setContextOp(ctx, gvq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{gameversion.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gvq *GameVersionQuery) FirstX(ctx context.Context) *GameVersion {
	node, err := gvq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GameVersion ID from the query.
// Returns a *NotFoundError when no GameVersion ID was found.
func (gvq *GameVersionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gvq.Limit(1).IDs(setContextOp(ctx, gvq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{gameversion.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gvq *GameVersionQuery) FirstIDX(ctx context.Context) int {
	id, err := gvq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GameVersion entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GameVersion entity is found.
// Returns a *NotFoundError when no GameVersion entities are found.
func (gvq *GameVersionQuery) Only(ctx context.Context) (*GameVersion, error) {
	nodes, err := gvq.Limit(2).All(setContextOp(ctx, gvq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{gameversion.Label}
	default:
		return nil, &NotSingularError{gameversion.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gvq *GameVersionQuery) OnlyX(ctx context.Context) *GameVersion {
	node, err := gvq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GameVersion ID in the query.
// Returns a *NotSingularError when more than one GameVersion ID is found.
// Returns a *NotFoundError when no entities are found.
func (gvq *GameVersionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gvq.Limit(2).IDs(setContextOp(ctx, gvq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{gameversion.Label}
	default:
		err = &NotSingularError{gameversion.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gvq *GameVersionQuery) OnlyIDX(ctx context.Context) int {
	id, err := gvq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GameVersions.
func (gvq *GameVersionQuery) All(ctx context.Context) ([]*GameVersion, error) {
	ctx = setContextOp(ctx, gvq.ctx, ent.OpQueryAll)
	if err := gvq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GameVersion, *GameVersionQuery]()
	return withInterceptors[[]*GameVersion](ctx, gvq, qr, gvq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gvq *GameVersionQuery) AllX(ctx context.Context) []*GameVersion {
	nodes, err := gvq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GameVersion IDs.
func (gvq *GameVersionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if gvq.ctx.Unique == nil && gvq.path != nil {
		gvq.Unique(true)
	}
	ctx = setContextOp(ctx, gvq.ctx, ent.OpQueryIDs)
	if err = gvq.Select(gameversion.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gvq *GameVersionQuery) IDsX(ctx context.Context) []int {
	ids, err := gvq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gvq *GameVersionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gvq.ctx, ent.OpQueryCount)
	if err := gvq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gvq, querierCount[*GameVersionQuery](), gvq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gvq *GameVersionQuery) CountX(ctx context.Context) int {
	count, err := gvq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gvq *GameVersionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gvq.ctx, ent.OpQueryExist)
	switch _, err := gvq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gvq *GameVersionQuery) ExistX(ctx context.Context) bool {
	exist, err := gvq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GameVersionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gvq *GameVersionQuery) Clone() *GameVersionQuery {
	if gvq == nil {
		return nil
	}
	return &GameVersionQuery{
		config:          gvq.config,
		ctx:             gvq.ctx.Clone(),
		order:           append([]gameversion.OrderOption{}, gvq.order...),
		inters:          append([]Interceptor{}, gvq.inters...),
		predicates:      append([]predicate.GameVersion{}, gvq.predicates...),
		withGames:       gvq.withGames.Clone(),
		withGameType:    gvq.withGameType.Clone(),
		withSessions:    gvq.withSessions.Clone(),
		withGameConfigs: gvq.withGameConfigs.Clone(),
		// clone intermediate query.
		sql:  gvq.sql.Clone(),
		path: gvq.path,
	}
}

// WithGames tells the query-builder to eager-load the nodes that are connected to
// the "games" edge. The optional arguments are used to configure the query builder of the edge.
func (gvq *GameVersionQuery) WithGames(opts ...func(*GameQuery)) *GameVersionQuery {
	query := (&GameClient{config: gvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gvq.withGames = query
	return gvq
}

// WithGameType tells the query-builder to eager-load the nodes that are connected to
// the "game_type" edge. The optional arguments are used to configure the query builder of the edge.
func (gvq *GameVersionQuery) WithGameType(opts ...func(*GameTypeQuery)) *GameVersionQuery {
	query := (&GameTypeClient{config: gvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gvq.withGameType = query
	return gvq
}

// WithSessions tells the query-builder to eager-load the nodes that are connected to
// the "sessions" edge. The optional arguments are used to configure the query builder of the edge.
func (gvq *GameVersionQuery) WithSessions(opts ...func(*SessionQuery)) *GameVersionQuery {
	query := (&SessionClient{config: gvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gvq.withSessions = query
	return gvq
}

// WithGameConfigs tells the query-builder to eager-load the nodes that are connected to
// the "game_configs" edge. The optional arguments are used to configure the query builder of the edge.
func (gvq *GameVersionQuery) WithGameConfigs(opts ...func(*GameConfigQuery)) *GameVersionQuery {
	query := (&GameConfigClient{config: gvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gvq.withGameConfigs = query
	return gvq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Version string `json:"version,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GameVersion.Query().
//		GroupBy(gameversion.FieldVersion).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gvq *GameVersionQuery) GroupBy(field string, fields ...string) *GameVersionGroupBy {
	gvq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GameVersionGroupBy{build: gvq}
	grbuild.flds = &gvq.ctx.Fields
	grbuild.label = gameversion.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Version string `json:"version,omitempty"`
//	}
//
//	client.GameVersion.Query().
//		Select(gameversion.FieldVersion).
//		Scan(ctx, &v)
func (gvq *GameVersionQuery) Select(fields ...string) *GameVersionSelect {
	gvq.ctx.Fields = append(gvq.ctx.Fields, fields...)
	sbuild := &GameVersionSelect{GameVersionQuery: gvq}
	sbuild.label = gameversion.Label
	sbuild.flds, sbuild.scan = &gvq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GameVersionSelect configured with the given aggregations.
func (gvq *GameVersionQuery) Aggregate(fns ...AggregateFunc) *GameVersionSelect {
	return gvq.Select().Aggregate(fns...)
}

func (gvq *GameVersionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gvq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gvq); err != nil {
				return err
			}
		}
	}
	for _, f := range gvq.ctx.Fields {
		if !gameversion.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gvq.path != nil {
		prev, err := gvq.path(ctx)
		if err != nil {
			return err
		}
		gvq.sql = prev
	}
	return nil
}

func (gvq *GameVersionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GameVersion, error) {
	var (
		nodes       = []*GameVersion{}
		withFKs     = gvq.withFKs
		_spec       = gvq.querySpec()
		loadedTypes = [4]bool{
			gvq.withGames != nil,
			gvq.withGameType != nil,
			gvq.withSessions != nil,
			gvq.withGameConfigs != nil,
		}
	)
	if gvq.withGames != nil || gvq.withGameType != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, gameversion.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GameVersion).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GameVersion{config: gvq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gvq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gvq.withGames; query != nil {
		if err := gvq.loadGames(ctx, query, nodes, nil,
			func(n *GameVersion, e *Game) { n.Edges.Games = e }); err != nil {
			return nil, err
		}
	}
	if query := gvq.withGameType; query != nil {
		if err := gvq.loadGameType(ctx, query, nodes, nil,
			func(n *GameVersion, e *GameType) { n.Edges.GameType = e }); err != nil {
			return nil, err
		}
	}
	if query := gvq.withSessions; query != nil {
		if err := gvq.loadSessions(ctx, query, nodes,
			func(n *GameVersion) { n.Edges.Sessions = []*Session{} },
			func(n *GameVersion, e *Session) { n.Edges.Sessions = append(n.Edges.Sessions, e) }); err != nil {
			return nil, err
		}
	}
	if query := gvq.withGameConfigs; query != nil {
		if err := gvq.loadGameConfigs(ctx, query, nodes,
			func(n *GameVersion) { n.Edges.GameConfigs = []*GameConfig{} },
			func(n *GameVersion, e *GameConfig) { n.Edges.GameConfigs = append(n.Edges.GameConfigs, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gvq *GameVersionQuery) loadGames(ctx context.Context, query *GameQuery, nodes []*GameVersion, init func(*GameVersion), assign func(*GameVersion, *Game)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*GameVersion)
	for i := range nodes {
		if nodes[i].game_game_versions == nil {
			continue
		}
		fk := *nodes[i].game_game_versions
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(game.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "game_game_versions" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gvq *GameVersionQuery) loadGameType(ctx context.Context, query *GameTypeQuery, nodes []*GameVersion, init func(*GameVersion), assign func(*GameVersion, *GameType)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*GameVersion)
	for i := range nodes {
		if nodes[i].game_type_game_versions == nil {
			continue
		}
		fk := *nodes[i].game_type_game_versions
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(gametype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "game_type_game_versions" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gvq *GameVersionQuery) loadSessions(ctx context.Context, query *SessionQuery, nodes []*GameVersion, init func(*GameVersion), assign func(*GameVersion, *Session)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*GameVersion)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Session(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(gameversion.SessionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.game_version_sessions
		if fk == nil {
			return fmt.Errorf(`foreign-key "game_version_sessions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "game_version_sessions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (gvq *GameVersionQuery) loadGameConfigs(ctx context.Context, query *GameConfigQuery, nodes []*GameVersion, init func(*GameVersion), assign func(*GameVersion, *GameConfig)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*GameVersion)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.GameConfig(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(gameversion.GameConfigsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.game_version_game_configs
		if fk == nil {
			return fmt.Errorf(`foreign-key "game_version_game_configs" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "game_version_game_configs" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (gvq *GameVersionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gvq.querySpec()
	_spec.Node.Columns = gvq.ctx.Fields
	if len(gvq.ctx.Fields) > 0 {
		_spec.Unique = gvq.ctx.Unique != nil && *gvq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, gvq.driver, _spec)
}

func (gvq *GameVersionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(gameversion.Table, gameversion.Columns, sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt))
	_spec.From = gvq.sql
	if unique := gvq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if gvq.path != nil {
		_spec.Unique = true
	}
	if fields := gvq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gameversion.FieldID)
		for i := range fields {
			if fields[i] != gameversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gvq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gvq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gvq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gvq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gvq *GameVersionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gvq.driver.Dialect())
	t1 := builder.Table(gameversion.Table)
	columns := gvq.ctx.Fields
	if len(columns) == 0 {
		columns = gameversion.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gvq.sql != nil {
		selector = gvq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gvq.ctx.Unique != nil && *gvq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range gvq.predicates {
		p(selector)
	}
	for _, p := range gvq.order {
		p(selector)
	}
	if offset := gvq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gvq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GameVersionGroupBy is the group-by builder for GameVersion entities.
type GameVersionGroupBy struct {
	selector
	build *GameVersionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gvgb *GameVersionGroupBy) Aggregate(fns ...AggregateFunc) *GameVersionGroupBy {
	gvgb.fns = append(gvgb.fns, fns...)
	return gvgb
}

// Scan applies the selector query and scans the result into the given value.
func (gvgb *GameVersionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gvgb.build.ctx, ent.OpQueryGroupBy)
	if err := gvgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GameVersionQuery, *GameVersionGroupBy](ctx, gvgb.build, gvgb, gvgb.build.inters, v)
}

func (gvgb *GameVersionGroupBy) sqlScan(ctx context.Context, root *GameVersionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gvgb.fns))
	for _, fn := range gvgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gvgb.flds)+len(gvgb.fns))
		for _, f := range *gvgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*gvgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gvgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GameVersionSelect is the builder for selecting fields of GameVersion entities.
type GameVersionSelect struct {
	*GameVersionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gvs *GameVersionSelect) Aggregate(fns ...AggregateFunc) *GameVersionSelect {
	gvs.fns = append(gvs.fns, fns...)
	return gvs
}

// Scan applies the selector query and scans the result into the given value.
func (gvs *GameVersionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gvs.ctx, ent.OpQuerySelect)
	if err := gvs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GameVersionQuery, *GameVersionSelect](ctx, gvs.GameVersionQuery, gvs, gvs.inters, v)
}

func (gvs *GameVersionSelect) sqlScan(ctx context.Context, root *GameVersionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gvs.fns))
	for _, fn := range gvs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gvs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gvs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
