// Code generated by ent, DO NOT EDIT.

package session

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the session type in the database.
	Label = "session"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCanDemo holds the string denoting the can_demo field in the database.
	FieldCanDemo = "can_demo"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldClientID holds the string denoting the client_id field in the database.
	FieldClientID = "client_id"
	// FieldDemo holds the string denoting the demo field in the database.
	FieldDemo = "demo"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeGames holds the string denoting the games edge name in mutations.
	EdgeGames = "games"
	// EdgeGameVersions holds the string denoting the game_versions edge name in mutations.
	EdgeGameVersions = "game_versions"
	// EdgeOperator holds the string denoting the operator edge name in mutations.
	EdgeOperator = "Operator"
	// EdgeCurrencyVersions holds the string denoting the currency_versions edge name in mutations.
	EdgeCurrencyVersions = "currency_versions"
	// EdgeMathVersions holds the string denoting the math_versions edge name in mutations.
	EdgeMathVersions = "math_versions"
	// Table holds the table name of the session in the database.
	Table = "sessions"
	// GamesTable is the table that holds the games relation/edge.
	GamesTable = "sessions"
	// GamesInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	GamesInverseTable = "games"
	// GamesColumn is the table column denoting the games relation/edge.
	GamesColumn = "game_sessions"
	// GameVersionsTable is the table that holds the game_versions relation/edge.
	GameVersionsTable = "sessions"
	// GameVersionsInverseTable is the table name for the GameVersion entity.
	// It exists in this package in order to avoid circular dependency with the "gameversion" package.
	GameVersionsInverseTable = "game_versions"
	// GameVersionsColumn is the table column denoting the game_versions relation/edge.
	GameVersionsColumn = "game_version_sessions"
	// OperatorTable is the table that holds the Operator relation/edge.
	OperatorTable = "sessions"
	// OperatorInverseTable is the table name for the Operator entity.
	// It exists in this package in order to avoid circular dependency with the "operator" package.
	OperatorInverseTable = "operators"
	// OperatorColumn is the table column denoting the Operator relation/edge.
	OperatorColumn = "operator_sessions"
	// CurrencyVersionsTable is the table that holds the currency_versions relation/edge.
	CurrencyVersionsTable = "sessions"
	// CurrencyVersionsInverseTable is the table name for the CurrencyVersion entity.
	// It exists in this package in order to avoid circular dependency with the "currencyversion" package.
	CurrencyVersionsInverseTable = "currency_versions"
	// CurrencyVersionsColumn is the table column denoting the currency_versions relation/edge.
	CurrencyVersionsColumn = "currency_version_sessions"
	// MathVersionsTable is the table that holds the math_versions relation/edge.
	MathVersionsTable = "sessions"
	// MathVersionsInverseTable is the table name for the MathVersion entity.
	// It exists in this package in order to avoid circular dependency with the "mathversion" package.
	MathVersionsInverseTable = "math_versions"
	// MathVersionsColumn is the table column denoting the math_versions relation/edge.
	MathVersionsColumn = "math_version_sessions"
)

// Columns holds all SQL columns for session fields.
var Columns = []string{
	FieldID,
	FieldCanDemo,
	FieldToken,
	FieldClientID,
	FieldDemo,
	FieldCreatedAt,
	FieldDeletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "sessions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"currency_version_sessions",
	"game_sessions",
	"game_version_sessions",
	"math_version_sessions",
	"operator_sessions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Session queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCanDemo orders the results by the can_demo field.
func ByCanDemo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanDemo, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// ByClientID orders the results by the client_id field.
func ByClientID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientID, opts...).ToFunc()
}

// ByDemo orders the results by the demo field.
func ByDemo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDemo, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByGamesField orders the results by games field.
func ByGamesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGamesStep(), sql.OrderByField(field, opts...))
	}
}

// ByGameVersionsField orders the results by game_versions field.
func ByGameVersionsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameVersionsStep(), sql.OrderByField(field, opts...))
	}
}

// ByOperatorField orders the results by Operator field.
func ByOperatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOperatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByCurrencyVersionsField orders the results by currency_versions field.
func ByCurrencyVersionsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCurrencyVersionsStep(), sql.OrderByField(field, opts...))
	}
}

// ByMathVersionsField orders the results by math_versions field.
func ByMathVersionsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMathVersionsStep(), sql.OrderByField(field, opts...))
	}
}
func newGamesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GamesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GamesTable, GamesColumn),
	)
}
func newGameVersionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameVersionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GameVersionsTable, GameVersionsColumn),
	)
}
func newOperatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OperatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OperatorTable, OperatorColumn),
	)
}
func newCurrencyVersionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CurrencyVersionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CurrencyVersionsTable, CurrencyVersionsColumn),
	)
}
func newMathVersionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MathVersionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MathVersionsTable, MathVersionsColumn),
	)
}
