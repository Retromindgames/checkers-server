// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gametype"
	"github.com/Lavizord/checkers-server/postgrescli/ent/serie"
	"github.com/Lavizord/checkers-server/postgrescli/ent/studio"
)

// Game is the model entity for the Game schema.
type Game struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID string `json:"external_id,omitempty"`
	// TrademarkName holds the value of the "trademark_name" field.
	TrademarkName string `json:"trademark_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameQuery when eager-loading is set.
	Edges           GameEdges `json:"edges"`
	game_type_games *int
	serie_games     *int
	studio_games    *int
	selectValues    sql.SelectValues
}

// GameEdges holds the relations/edges for other nodes in the graph.
type GameEdges struct {
	// Studio holds the value of the studio edge.
	Studio *Studio `json:"studio,omitempty"`
	// GameType holds the value of the game_type edge.
	GameType *GameType `json:"game_type,omitempty"`
	// Serie holds the value of the serie edge.
	Serie *Serie `json:"serie,omitempty"`
	// GameFeatures holds the value of the game_features edge.
	GameFeatures []*GameFeature `json:"game_features,omitempty"`
	// GameVersions holds the value of the game_versions edge.
	GameVersions []*GameVersion `json:"game_versions,omitempty"`
	// GameConfigs holds the value of the game_configs edge.
	GameConfigs []*GameConfig `json:"game_configs,omitempty"`
	// Sessions holds the value of the sessions edge.
	Sessions []*Session `json:"sessions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// StudioOrErr returns the Studio value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameEdges) StudioOrErr() (*Studio, error) {
	if e.Studio != nil {
		return e.Studio, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: studio.Label}
	}
	return nil, &NotLoadedError{edge: "studio"}
}

// GameTypeOrErr returns the GameType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameEdges) GameTypeOrErr() (*GameType, error) {
	if e.GameType != nil {
		return e.GameType, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: gametype.Label}
	}
	return nil, &NotLoadedError{edge: "game_type"}
}

// SerieOrErr returns the Serie value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameEdges) SerieOrErr() (*Serie, error) {
	if e.Serie != nil {
		return e.Serie, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: serie.Label}
	}
	return nil, &NotLoadedError{edge: "serie"}
}

// GameFeaturesOrErr returns the GameFeatures value or an error if the edge
// was not loaded in eager-loading.
func (e GameEdges) GameFeaturesOrErr() ([]*GameFeature, error) {
	if e.loadedTypes[3] {
		return e.GameFeatures, nil
	}
	return nil, &NotLoadedError{edge: "game_features"}
}

// GameVersionsOrErr returns the GameVersions value or an error if the edge
// was not loaded in eager-loading.
func (e GameEdges) GameVersionsOrErr() ([]*GameVersion, error) {
	if e.loadedTypes[4] {
		return e.GameVersions, nil
	}
	return nil, &NotLoadedError{edge: "game_versions"}
}

// GameConfigsOrErr returns the GameConfigs value or an error if the edge
// was not loaded in eager-loading.
func (e GameEdges) GameConfigsOrErr() ([]*GameConfig, error) {
	if e.loadedTypes[5] {
		return e.GameConfigs, nil
	}
	return nil, &NotLoadedError{edge: "game_configs"}
}

// SessionsOrErr returns the Sessions value or an error if the edge
// was not loaded in eager-loading.
func (e GameEdges) SessionsOrErr() ([]*Session, error) {
	if e.loadedTypes[6] {
		return e.Sessions, nil
	}
	return nil, &NotLoadedError{edge: "sessions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Game) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case game.FieldID:
			values[i] = new(sql.NullInt64)
		case game.FieldName, game.FieldExternalID, game.FieldTrademarkName:
			values[i] = new(sql.NullString)
		case game.ForeignKeys[0]: // game_type_games
			values[i] = new(sql.NullInt64)
		case game.ForeignKeys[1]: // serie_games
			values[i] = new(sql.NullInt64)
		case game.ForeignKeys[2]: // studio_games
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Game fields.
func (ga *Game) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case game.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ga.ID = int(value.Int64)
		case game.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ga.Name = value.String
			}
		case game.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				ga.ExternalID = value.String
			}
		case game.FieldTrademarkName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trademark_name", values[i])
			} else if value.Valid {
				ga.TrademarkName = value.String
			}
		case game.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field game_type_games", value)
			} else if value.Valid {
				ga.game_type_games = new(int)
				*ga.game_type_games = int(value.Int64)
			}
		case game.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field serie_games", value)
			} else if value.Valid {
				ga.serie_games = new(int)
				*ga.serie_games = int(value.Int64)
			}
		case game.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field studio_games", value)
			} else if value.Valid {
				ga.studio_games = new(int)
				*ga.studio_games = int(value.Int64)
			}
		default:
			ga.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Game.
// This includes values selected through modifiers, order, etc.
func (ga *Game) Value(name string) (ent.Value, error) {
	return ga.selectValues.Get(name)
}

// QueryStudio queries the "studio" edge of the Game entity.
func (ga *Game) QueryStudio() *StudioQuery {
	return NewGameClient(ga.config).QueryStudio(ga)
}

// QueryGameType queries the "game_type" edge of the Game entity.
func (ga *Game) QueryGameType() *GameTypeQuery {
	return NewGameClient(ga.config).QueryGameType(ga)
}

// QuerySerie queries the "serie" edge of the Game entity.
func (ga *Game) QuerySerie() *SerieQuery {
	return NewGameClient(ga.config).QuerySerie(ga)
}

// QueryGameFeatures queries the "game_features" edge of the Game entity.
func (ga *Game) QueryGameFeatures() *GameFeatureQuery {
	return NewGameClient(ga.config).QueryGameFeatures(ga)
}

// QueryGameVersions queries the "game_versions" edge of the Game entity.
func (ga *Game) QueryGameVersions() *GameVersionQuery {
	return NewGameClient(ga.config).QueryGameVersions(ga)
}

// QueryGameConfigs queries the "game_configs" edge of the Game entity.
func (ga *Game) QueryGameConfigs() *GameConfigQuery {
	return NewGameClient(ga.config).QueryGameConfigs(ga)
}

// QuerySessions queries the "sessions" edge of the Game entity.
func (ga *Game) QuerySessions() *SessionQuery {
	return NewGameClient(ga.config).QuerySessions(ga)
}

// Update returns a builder for updating this Game.
// Note that you need to call Game.Unwrap() before calling this method if this Game
// was returned from a transaction, and the transaction was committed or rolled back.
func (ga *Game) Update() *GameUpdateOne {
	return NewGameClient(ga.config).UpdateOne(ga)
}

// Unwrap unwraps the Game entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ga *Game) Unwrap() *Game {
	_tx, ok := ga.config.driver.(*txDriver)
	if !ok {
		panic("ent: Game is not a transactional entity")
	}
	ga.config.driver = _tx.drv
	return ga
}

// String implements the fmt.Stringer.
func (ga *Game) String() string {
	var builder strings.Builder
	builder.WriteString("Game(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ga.ID))
	builder.WriteString("name=")
	builder.WriteString(ga.Name)
	builder.WriteString(", ")
	builder.WriteString("external_id=")
	builder.WriteString(ga.ExternalID)
	builder.WriteString(", ")
	builder.WriteString("trademark_name=")
	builder.WriteString(ga.TrademarkName)
	builder.WriteByte(')')
	return builder.String()
}

// Games is a parsable slice of Game.
type Games []*Game
