// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/feature"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gamefeature"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
)

// GameFeatureQuery is the builder for querying GameFeature entities.
type GameFeatureQuery struct {
	config
	ctx          *QueryContext
	order        []gamefeature.OrderOption
	inters       []Interceptor
	predicates   []predicate.GameFeature
	withFeatures *FeatureQuery
	withGames    *GameQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GameFeatureQuery builder.
func (gfq *GameFeatureQuery) Where(ps ...predicate.GameFeature) *GameFeatureQuery {
	gfq.predicates = append(gfq.predicates, ps...)
	return gfq
}

// Limit the number of records to be returned by this query.
func (gfq *GameFeatureQuery) Limit(limit int) *GameFeatureQuery {
	gfq.ctx.Limit = &limit
	return gfq
}

// Offset to start from.
func (gfq *GameFeatureQuery) Offset(offset int) *GameFeatureQuery {
	gfq.ctx.Offset = &offset
	return gfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gfq *GameFeatureQuery) Unique(unique bool) *GameFeatureQuery {
	gfq.ctx.Unique = &unique
	return gfq
}

// Order specifies how the records should be ordered.
func (gfq *GameFeatureQuery) Order(o ...gamefeature.OrderOption) *GameFeatureQuery {
	gfq.order = append(gfq.order, o...)
	return gfq
}

// QueryFeatures chains the current query on the "features" edge.
func (gfq *GameFeatureQuery) QueryFeatures() *FeatureQuery {
	query := (&FeatureClient{config: gfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gamefeature.Table, gamefeature.FieldID, selector),
			sqlgraph.To(feature.Table, feature.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gamefeature.FeaturesTable, gamefeature.FeaturesColumn),
		)
		fromU = sqlgraph.SetNeighbors(gfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGames chains the current query on the "games" edge.
func (gfq *GameFeatureQuery) QueryGames() *GameQuery {
	query := (&GameClient{config: gfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gamefeature.Table, gamefeature.FieldID, selector),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gamefeature.GamesTable, gamefeature.GamesColumn),
		)
		fromU = sqlgraph.SetNeighbors(gfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GameFeature entity from the query.
// Returns a *NotFoundError when no GameFeature was found.
func (gfq *GameFeatureQuery) First(ctx context.Context) (*GameFeature, error) {
	nodes, err := gfq.Limit(1).All(setContextOp(ctx, gfq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{gamefeature.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gfq *GameFeatureQuery) FirstX(ctx context.Context) *GameFeature {
	node, err := gfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GameFeature ID from the query.
// Returns a *NotFoundError when no GameFeature ID was found.
func (gfq *GameFeatureQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gfq.Limit(1).IDs(setContextOp(ctx, gfq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{gamefeature.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gfq *GameFeatureQuery) FirstIDX(ctx context.Context) int {
	id, err := gfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GameFeature entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GameFeature entity is found.
// Returns a *NotFoundError when no GameFeature entities are found.
func (gfq *GameFeatureQuery) Only(ctx context.Context) (*GameFeature, error) {
	nodes, err := gfq.Limit(2).All(setContextOp(ctx, gfq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{gamefeature.Label}
	default:
		return nil, &NotSingularError{gamefeature.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gfq *GameFeatureQuery) OnlyX(ctx context.Context) *GameFeature {
	node, err := gfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GameFeature ID in the query.
// Returns a *NotSingularError when more than one GameFeature ID is found.
// Returns a *NotFoundError when no entities are found.
func (gfq *GameFeatureQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gfq.Limit(2).IDs(setContextOp(ctx, gfq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{gamefeature.Label}
	default:
		err = &NotSingularError{gamefeature.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gfq *GameFeatureQuery) OnlyIDX(ctx context.Context) int {
	id, err := gfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GameFeatures.
func (gfq *GameFeatureQuery) All(ctx context.Context) ([]*GameFeature, error) {
	ctx = setContextOp(ctx, gfq.ctx, ent.OpQueryAll)
	if err := gfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GameFeature, *GameFeatureQuery]()
	return withInterceptors[[]*GameFeature](ctx, gfq, qr, gfq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gfq *GameFeatureQuery) AllX(ctx context.Context) []*GameFeature {
	nodes, err := gfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GameFeature IDs.
func (gfq *GameFeatureQuery) IDs(ctx context.Context) (ids []int, err error) {
	if gfq.ctx.Unique == nil && gfq.path != nil {
		gfq.Unique(true)
	}
	ctx = setContextOp(ctx, gfq.ctx, ent.OpQueryIDs)
	if err = gfq.Select(gamefeature.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gfq *GameFeatureQuery) IDsX(ctx context.Context) []int {
	ids, err := gfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gfq *GameFeatureQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gfq.ctx, ent.OpQueryCount)
	if err := gfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gfq, querierCount[*GameFeatureQuery](), gfq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gfq *GameFeatureQuery) CountX(ctx context.Context) int {
	count, err := gfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gfq *GameFeatureQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gfq.ctx, ent.OpQueryExist)
	switch _, err := gfq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gfq *GameFeatureQuery) ExistX(ctx context.Context) bool {
	exist, err := gfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GameFeatureQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gfq *GameFeatureQuery) Clone() *GameFeatureQuery {
	if gfq == nil {
		return nil
	}
	return &GameFeatureQuery{
		config:       gfq.config,
		ctx:          gfq.ctx.Clone(),
		order:        append([]gamefeature.OrderOption{}, gfq.order...),
		inters:       append([]Interceptor{}, gfq.inters...),
		predicates:   append([]predicate.GameFeature{}, gfq.predicates...),
		withFeatures: gfq.withFeatures.Clone(),
		withGames:    gfq.withGames.Clone(),
		// clone intermediate query.
		sql:  gfq.sql.Clone(),
		path: gfq.path,
	}
}

// WithFeatures tells the query-builder to eager-load the nodes that are connected to
// the "features" edge. The optional arguments are used to configure the query builder of the edge.
func (gfq *GameFeatureQuery) WithFeatures(opts ...func(*FeatureQuery)) *GameFeatureQuery {
	query := (&FeatureClient{config: gfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gfq.withFeatures = query
	return gfq
}

// WithGames tells the query-builder to eager-load the nodes that are connected to
// the "games" edge. The optional arguments are used to configure the query builder of the edge.
func (gfq *GameFeatureQuery) WithGames(opts ...func(*GameQuery)) *GameFeatureQuery {
	query := (&GameClient{config: gfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gfq.withGames = query
	return gfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (gfq *GameFeatureQuery) GroupBy(field string, fields ...string) *GameFeatureGroupBy {
	gfq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GameFeatureGroupBy{build: gfq}
	grbuild.flds = &gfq.ctx.Fields
	grbuild.label = gamefeature.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (gfq *GameFeatureQuery) Select(fields ...string) *GameFeatureSelect {
	gfq.ctx.Fields = append(gfq.ctx.Fields, fields...)
	sbuild := &GameFeatureSelect{GameFeatureQuery: gfq}
	sbuild.label = gamefeature.Label
	sbuild.flds, sbuild.scan = &gfq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GameFeatureSelect configured with the given aggregations.
func (gfq *GameFeatureQuery) Aggregate(fns ...AggregateFunc) *GameFeatureSelect {
	return gfq.Select().Aggregate(fns...)
}

func (gfq *GameFeatureQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gfq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gfq); err != nil {
				return err
			}
		}
	}
	for _, f := range gfq.ctx.Fields {
		if !gamefeature.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gfq.path != nil {
		prev, err := gfq.path(ctx)
		if err != nil {
			return err
		}
		gfq.sql = prev
	}
	return nil
}

func (gfq *GameFeatureQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GameFeature, error) {
	var (
		nodes       = []*GameFeature{}
		withFKs     = gfq.withFKs
		_spec       = gfq.querySpec()
		loadedTypes = [2]bool{
			gfq.withFeatures != nil,
			gfq.withGames != nil,
		}
	)
	if gfq.withFeatures != nil || gfq.withGames != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, gamefeature.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GameFeature).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GameFeature{config: gfq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gfq.withFeatures; query != nil {
		if err := gfq.loadFeatures(ctx, query, nodes, nil,
			func(n *GameFeature, e *Feature) { n.Edges.Features = e }); err != nil {
			return nil, err
		}
	}
	if query := gfq.withGames; query != nil {
		if err := gfq.loadGames(ctx, query, nodes, nil,
			func(n *GameFeature, e *Game) { n.Edges.Games = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gfq *GameFeatureQuery) loadFeatures(ctx context.Context, query *FeatureQuery, nodes []*GameFeature, init func(*GameFeature), assign func(*GameFeature, *Feature)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*GameFeature)
	for i := range nodes {
		if nodes[i].feature_game_features == nil {
			continue
		}
		fk := *nodes[i].feature_game_features
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(feature.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "feature_game_features" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gfq *GameFeatureQuery) loadGames(ctx context.Context, query *GameQuery, nodes []*GameFeature, init func(*GameFeature), assign func(*GameFeature, *Game)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*GameFeature)
	for i := range nodes {
		if nodes[i].game_game_features == nil {
			continue
		}
		fk := *nodes[i].game_game_features
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(game.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "game_game_features" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (gfq *GameFeatureQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gfq.querySpec()
	_spec.Node.Columns = gfq.ctx.Fields
	if len(gfq.ctx.Fields) > 0 {
		_spec.Unique = gfq.ctx.Unique != nil && *gfq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, gfq.driver, _spec)
}

func (gfq *GameFeatureQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(gamefeature.Table, gamefeature.Columns, sqlgraph.NewFieldSpec(gamefeature.FieldID, field.TypeInt))
	_spec.From = gfq.sql
	if unique := gfq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if gfq.path != nil {
		_spec.Unique = true
	}
	if fields := gfq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gamefeature.FieldID)
		for i := range fields {
			if fields[i] != gamefeature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gfq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gfq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gfq *GameFeatureQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gfq.driver.Dialect())
	t1 := builder.Table(gamefeature.Table)
	columns := gfq.ctx.Fields
	if len(columns) == 0 {
		columns = gamefeature.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gfq.sql != nil {
		selector = gfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gfq.ctx.Unique != nil && *gfq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range gfq.predicates {
		p(selector)
	}
	for _, p := range gfq.order {
		p(selector)
	}
	if offset := gfq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gfq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GameFeatureGroupBy is the group-by builder for GameFeature entities.
type GameFeatureGroupBy struct {
	selector
	build *GameFeatureQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gfgb *GameFeatureGroupBy) Aggregate(fns ...AggregateFunc) *GameFeatureGroupBy {
	gfgb.fns = append(gfgb.fns, fns...)
	return gfgb
}

// Scan applies the selector query and scans the result into the given value.
func (gfgb *GameFeatureGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gfgb.build.ctx, ent.OpQueryGroupBy)
	if err := gfgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GameFeatureQuery, *GameFeatureGroupBy](ctx, gfgb.build, gfgb, gfgb.build.inters, v)
}

func (gfgb *GameFeatureGroupBy) sqlScan(ctx context.Context, root *GameFeatureQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gfgb.fns))
	for _, fn := range gfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gfgb.flds)+len(gfgb.fns))
		for _, f := range *gfgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*gfgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gfgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GameFeatureSelect is the builder for selecting fields of GameFeature entities.
type GameFeatureSelect struct {
	*GameFeatureQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gfs *GameFeatureSelect) Aggregate(fns ...AggregateFunc) *GameFeatureSelect {
	gfs.fns = append(gfs.fns, fns...)
	return gfs
}

// Scan applies the selector query and scans the result into the given value.
func (gfs *GameFeatureSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gfs.ctx, ent.OpQuerySelect)
	if err := gfs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GameFeatureQuery, *GameFeatureSelect](ctx, gfs.GameFeatureQuery, gfs, gfs.inters, v)
}

func (gfs *GameFeatureSelect) sqlScan(ctx context.Context, root *GameFeatureQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gfs.fns))
	for _, fn := range gfs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gfs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
