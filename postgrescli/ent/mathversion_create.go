// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameconfig"
	"github.com/Lavizord/checkers-server/postgrescli/ent/mathversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/session"
)

// MathVersionCreate is the builder for creating a MathVersion entity.
type MathVersionCreate struct {
	config
	mutation *MathVersionMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mvc *MathVersionCreate) SetName(s string) *MathVersionCreate {
	mvc.mutation.SetName(s)
	return mvc
}

// SetVersion sets the "version" field.
func (mvc *MathVersionCreate) SetVersion(s string) *MathVersionCreate {
	mvc.mutation.SetVersion(s)
	return mvc
}

// SetVolatility sets the "volatility" field.
func (mvc *MathVersionCreate) SetVolatility(i int) *MathVersionCreate {
	mvc.mutation.SetVolatility(i)
	return mvc
}

// SetRtp sets the "rtp" field.
func (mvc *MathVersionCreate) SetRtp(i int) *MathVersionCreate {
	mvc.mutation.SetRtp(i)
	return mvc
}

// SetMaxWin sets the "max_win" field.
func (mvc *MathVersionCreate) SetMaxWin(i int) *MathVersionCreate {
	mvc.mutation.SetMaxWin(i)
	return mvc
}

// SetCanBuyBonus sets the "can_buy_bonus" field.
func (mvc *MathVersionCreate) SetCanBuyBonus(b bool) *MathVersionCreate {
	mvc.mutation.SetCanBuyBonus(b)
	return mvc
}

// SetURLReleaseNote sets the "url_release_note" field.
func (mvc *MathVersionCreate) SetURLReleaseNote(s string) *MathVersionCreate {
	mvc.mutation.SetURLReleaseNote(s)
	return mvc
}

// SetDeprecated sets the "deprecated" field.
func (mvc *MathVersionCreate) SetDeprecated(b bool) *MathVersionCreate {
	mvc.mutation.SetDeprecated(b)
	return mvc
}

// SetCanAnteBet sets the "can_ante_bet" field.
func (mvc *MathVersionCreate) SetCanAnteBet(b bool) *MathVersionCreate {
	mvc.mutation.SetCanAnteBet(b)
	return mvc
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (mvc *MathVersionCreate) AddSessionIDs(ids ...int) *MathVersionCreate {
	mvc.mutation.AddSessionIDs(ids...)
	return mvc
}

// AddSessions adds the "sessions" edges to the Session entity.
func (mvc *MathVersionCreate) AddSessions(s ...*Session) *MathVersionCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mvc.AddSessionIDs(ids...)
}

// AddGameConfigIDs adds the "game_configs" edge to the GameConfig entity by IDs.
func (mvc *MathVersionCreate) AddGameConfigIDs(ids ...int) *MathVersionCreate {
	mvc.mutation.AddGameConfigIDs(ids...)
	return mvc
}

// AddGameConfigs adds the "game_configs" edges to the GameConfig entity.
func (mvc *MathVersionCreate) AddGameConfigs(g ...*GameConfig) *MathVersionCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return mvc.AddGameConfigIDs(ids...)
}

// Mutation returns the MathVersionMutation object of the builder.
func (mvc *MathVersionCreate) Mutation() *MathVersionMutation {
	return mvc.mutation
}

// Save creates the MathVersion in the database.
func (mvc *MathVersionCreate) Save(ctx context.Context) (*MathVersion, error) {
	return withHooks(ctx, mvc.sqlSave, mvc.mutation, mvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mvc *MathVersionCreate) SaveX(ctx context.Context) *MathVersion {
	v, err := mvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mvc *MathVersionCreate) Exec(ctx context.Context) error {
	_, err := mvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvc *MathVersionCreate) ExecX(ctx context.Context) {
	if err := mvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mvc *MathVersionCreate) check() error {
	if _, ok := mvc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MathVersion.name"`)}
	}
	if _, ok := mvc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "MathVersion.version"`)}
	}
	if _, ok := mvc.mutation.Volatility(); !ok {
		return &ValidationError{Name: "volatility", err: errors.New(`ent: missing required field "MathVersion.volatility"`)}
	}
	if _, ok := mvc.mutation.Rtp(); !ok {
		return &ValidationError{Name: "rtp", err: errors.New(`ent: missing required field "MathVersion.rtp"`)}
	}
	if _, ok := mvc.mutation.MaxWin(); !ok {
		return &ValidationError{Name: "max_win", err: errors.New(`ent: missing required field "MathVersion.max_win"`)}
	}
	if _, ok := mvc.mutation.CanBuyBonus(); !ok {
		return &ValidationError{Name: "can_buy_bonus", err: errors.New(`ent: missing required field "MathVersion.can_buy_bonus"`)}
	}
	if _, ok := mvc.mutation.URLReleaseNote(); !ok {
		return &ValidationError{Name: "url_release_note", err: errors.New(`ent: missing required field "MathVersion.url_release_note"`)}
	}
	if _, ok := mvc.mutation.Deprecated(); !ok {
		return &ValidationError{Name: "deprecated", err: errors.New(`ent: missing required field "MathVersion.deprecated"`)}
	}
	if _, ok := mvc.mutation.CanAnteBet(); !ok {
		return &ValidationError{Name: "can_ante_bet", err: errors.New(`ent: missing required field "MathVersion.can_ante_bet"`)}
	}
	return nil
}

func (mvc *MathVersionCreate) sqlSave(ctx context.Context) (*MathVersion, error) {
	if err := mvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mvc.mutation.id = &_node.ID
	mvc.mutation.done = true
	return _node, nil
}

func (mvc *MathVersionCreate) createSpec() (*MathVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &MathVersion{config: mvc.config}
		_spec = sqlgraph.NewCreateSpec(mathversion.Table, sqlgraph.NewFieldSpec(mathversion.FieldID, field.TypeInt))
	)
	if value, ok := mvc.mutation.Name(); ok {
		_spec.SetField(mathversion.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mvc.mutation.Version(); ok {
		_spec.SetField(mathversion.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := mvc.mutation.Volatility(); ok {
		_spec.SetField(mathversion.FieldVolatility, field.TypeInt, value)
		_node.Volatility = value
	}
	if value, ok := mvc.mutation.Rtp(); ok {
		_spec.SetField(mathversion.FieldRtp, field.TypeInt, value)
		_node.Rtp = value
	}
	if value, ok := mvc.mutation.MaxWin(); ok {
		_spec.SetField(mathversion.FieldMaxWin, field.TypeInt, value)
		_node.MaxWin = value
	}
	if value, ok := mvc.mutation.CanBuyBonus(); ok {
		_spec.SetField(mathversion.FieldCanBuyBonus, field.TypeBool, value)
		_node.CanBuyBonus = value
	}
	if value, ok := mvc.mutation.URLReleaseNote(); ok {
		_spec.SetField(mathversion.FieldURLReleaseNote, field.TypeString, value)
		_node.URLReleaseNote = value
	}
	if value, ok := mvc.mutation.Deprecated(); ok {
		_spec.SetField(mathversion.FieldDeprecated, field.TypeBool, value)
		_node.Deprecated = value
	}
	if value, ok := mvc.mutation.CanAnteBet(); ok {
		_spec.SetField(mathversion.FieldCanAnteBet, field.TypeBool, value)
		_node.CanAnteBet = value
	}
	if nodes := mvc.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mathversion.SessionsTable,
			Columns: []string{mathversion.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mvc.mutation.GameConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mathversion.GameConfigsTable,
			Columns: []string{mathversion.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MathVersionCreateBulk is the builder for creating many MathVersion entities in bulk.
type MathVersionCreateBulk struct {
	config
	err      error
	builders []*MathVersionCreate
}

// Save creates the MathVersion entities in the database.
func (mvcb *MathVersionCreateBulk) Save(ctx context.Context) ([]*MathVersion, error) {
	if mvcb.err != nil {
		return nil, mvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mvcb.builders))
	nodes := make([]*MathVersion, len(mvcb.builders))
	mutators := make([]Mutator, len(mvcb.builders))
	for i := range mvcb.builders {
		func(i int, root context.Context) {
			builder := mvcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MathVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mvcb *MathVersionCreateBulk) SaveX(ctx context.Context) []*MathVersion {
	v, err := mvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mvcb *MathVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := mvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvcb *MathVersionCreateBulk) ExecX(ctx context.Context) {
	if err := mvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
