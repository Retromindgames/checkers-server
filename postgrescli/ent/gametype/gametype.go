// Code generated by ent, DO NOT EDIT.

package gametype

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the gametype type in the database.
	Label = "game_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldExternalTypeID holds the string denoting the external_type_id field in the database.
	FieldExternalTypeID = "external_type_id"
	// EdgeGames holds the string denoting the games edge name in mutations.
	EdgeGames = "games"
	// EdgeGameVersions holds the string denoting the game_versions edge name in mutations.
	EdgeGameVersions = "game_versions"
	// EdgeCurrencyVersions holds the string denoting the currency_versions edge name in mutations.
	EdgeCurrencyVersions = "currency_versions"
	// Table holds the table name of the gametype in the database.
	Table = "game_types"
	// GamesTable is the table that holds the games relation/edge.
	GamesTable = "games"
	// GamesInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	GamesInverseTable = "games"
	// GamesColumn is the table column denoting the games relation/edge.
	GamesColumn = "game_type_games"
	// GameVersionsTable is the table that holds the game_versions relation/edge.
	GameVersionsTable = "game_versions"
	// GameVersionsInverseTable is the table name for the GameVersion entity.
	// It exists in this package in order to avoid circular dependency with the "gameversion" package.
	GameVersionsInverseTable = "game_versions"
	// GameVersionsColumn is the table column denoting the game_versions relation/edge.
	GameVersionsColumn = "game_type_game_versions"
	// CurrencyVersionsTable is the table that holds the currency_versions relation/edge.
	CurrencyVersionsTable = "currency_versions"
	// CurrencyVersionsInverseTable is the table name for the CurrencyVersion entity.
	// It exists in this package in order to avoid circular dependency with the "currencyversion" package.
	CurrencyVersionsInverseTable = "currency_versions"
	// CurrencyVersionsColumn is the table column denoting the currency_versions relation/edge.
	CurrencyVersionsColumn = "game_type_currency_versions"
)

// Columns holds all SQL columns for gametype fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldExternalTypeID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the GameType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByExternalTypeID orders the results by the external_type_id field.
func ByExternalTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalTypeID, opts...).ToFunc()
}

// ByGamesCount orders the results by games count.
func ByGamesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGamesStep(), opts...)
	}
}

// ByGames orders the results by games terms.
func ByGames(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGamesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGameVersionsCount orders the results by game_versions count.
func ByGameVersionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGameVersionsStep(), opts...)
	}
}

// ByGameVersions orders the results by game_versions terms.
func ByGameVersions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameVersionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCurrencyVersionsCount orders the results by currency_versions count.
func ByCurrencyVersionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCurrencyVersionsStep(), opts...)
	}
}

// ByCurrencyVersions orders the results by currency_versions terms.
func ByCurrencyVersions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCurrencyVersionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newGamesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GamesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GamesTable, GamesColumn),
	)
}
func newGameVersionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameVersionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GameVersionsTable, GameVersionsColumn),
	)
}
func newCurrencyVersionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CurrencyVersionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CurrencyVersionsTable, CurrencyVersionsColumn),
	)
}
