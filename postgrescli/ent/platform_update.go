// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/operator"
	"github.com/Lavizord/checkers-server/postgrescli/ent/platform"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
)

// PlatformUpdate is the builder for updating Platform entities.
type PlatformUpdate struct {
	config
	hooks    []Hook
	mutation *PlatformMutation
}

// Where appends a list predicates to the PlatformUpdate builder.
func (pu *PlatformUpdate) Where(ps ...predicate.Platform) *PlatformUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PlatformUpdate) SetName(s string) *PlatformUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PlatformUpdate) SetNillableName(s *string) *PlatformUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetHash sets the "hash" field.
func (pu *PlatformUpdate) SetHash(s string) *PlatformUpdate {
	pu.mutation.SetHash(s)
	return pu
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (pu *PlatformUpdate) SetNillableHash(s *string) *PlatformUpdate {
	if s != nil {
		pu.SetHash(*s)
	}
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PlatformUpdate) SetCreatedAt(t time.Time) *PlatformUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PlatformUpdate) SetNillableCreatedAt(t *time.Time) *PlatformUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PlatformUpdate) SetDeletedAt(t time.Time) *PlatformUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PlatformUpdate) SetNillableDeletedAt(t *time.Time) *PlatformUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PlatformUpdate) ClearDeletedAt() *PlatformUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetHomeButtonPayload sets the "home_button_payload" field.
func (pu *PlatformUpdate) SetHomeButtonPayload(s string) *PlatformUpdate {
	pu.mutation.SetHomeButtonPayload(s)
	return pu
}

// SetNillableHomeButtonPayload sets the "home_button_payload" field if the given value is not nil.
func (pu *PlatformUpdate) SetNillableHomeButtonPayload(s *string) *PlatformUpdate {
	if s != nil {
		pu.SetHomeButtonPayload(*s)
	}
	return pu
}

// AddOperatorIDs adds the "Operator" edge to the Operator entity by IDs.
func (pu *PlatformUpdate) AddOperatorIDs(ids ...int) *PlatformUpdate {
	pu.mutation.AddOperatorIDs(ids...)
	return pu
}

// AddOperator adds the "Operator" edges to the Operator entity.
func (pu *PlatformUpdate) AddOperator(o ...*Operator) *PlatformUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddOperatorIDs(ids...)
}

// Mutation returns the PlatformMutation object of the builder.
func (pu *PlatformUpdate) Mutation() *PlatformMutation {
	return pu.mutation
}

// ClearOperator clears all "Operator" edges to the Operator entity.
func (pu *PlatformUpdate) ClearOperator() *PlatformUpdate {
	pu.mutation.ClearOperator()
	return pu
}

// RemoveOperatorIDs removes the "Operator" edge to Operator entities by IDs.
func (pu *PlatformUpdate) RemoveOperatorIDs(ids ...int) *PlatformUpdate {
	pu.mutation.RemoveOperatorIDs(ids...)
	return pu
}

// RemoveOperator removes "Operator" edges to Operator entities.
func (pu *PlatformUpdate) RemoveOperator(o ...*Operator) *PlatformUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemoveOperatorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlatformUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlatformUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlatformUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlatformUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PlatformUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(platform.Table, platform.Columns, sqlgraph.NewFieldSpec(platform.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(platform.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Hash(); ok {
		_spec.SetField(platform.FieldHash, field.TypeString, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(platform.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(platform.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(platform.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.HomeButtonPayload(); ok {
		_spec.SetField(platform.FieldHomeButtonPayload, field.TypeString, value)
	}
	if pu.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platform.OperatorTable,
			Columns: []string{platform.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOperatorIDs(); len(nodes) > 0 && !pu.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platform.OperatorTable,
			Columns: []string{platform.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platform.OperatorTable,
			Columns: []string{platform.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platform.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlatformUpdateOne is the builder for updating a single Platform entity.
type PlatformUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlatformMutation
}

// SetName sets the "name" field.
func (puo *PlatformUpdateOne) SetName(s string) *PlatformUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PlatformUpdateOne) SetNillableName(s *string) *PlatformUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetHash sets the "hash" field.
func (puo *PlatformUpdateOne) SetHash(s string) *PlatformUpdateOne {
	puo.mutation.SetHash(s)
	return puo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (puo *PlatformUpdateOne) SetNillableHash(s *string) *PlatformUpdateOne {
	if s != nil {
		puo.SetHash(*s)
	}
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PlatformUpdateOne) SetCreatedAt(t time.Time) *PlatformUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PlatformUpdateOne) SetNillableCreatedAt(t *time.Time) *PlatformUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PlatformUpdateOne) SetDeletedAt(t time.Time) *PlatformUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PlatformUpdateOne) SetNillableDeletedAt(t *time.Time) *PlatformUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PlatformUpdateOne) ClearDeletedAt() *PlatformUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetHomeButtonPayload sets the "home_button_payload" field.
func (puo *PlatformUpdateOne) SetHomeButtonPayload(s string) *PlatformUpdateOne {
	puo.mutation.SetHomeButtonPayload(s)
	return puo
}

// SetNillableHomeButtonPayload sets the "home_button_payload" field if the given value is not nil.
func (puo *PlatformUpdateOne) SetNillableHomeButtonPayload(s *string) *PlatformUpdateOne {
	if s != nil {
		puo.SetHomeButtonPayload(*s)
	}
	return puo
}

// AddOperatorIDs adds the "Operator" edge to the Operator entity by IDs.
func (puo *PlatformUpdateOne) AddOperatorIDs(ids ...int) *PlatformUpdateOne {
	puo.mutation.AddOperatorIDs(ids...)
	return puo
}

// AddOperator adds the "Operator" edges to the Operator entity.
func (puo *PlatformUpdateOne) AddOperator(o ...*Operator) *PlatformUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddOperatorIDs(ids...)
}

// Mutation returns the PlatformMutation object of the builder.
func (puo *PlatformUpdateOne) Mutation() *PlatformMutation {
	return puo.mutation
}

// ClearOperator clears all "Operator" edges to the Operator entity.
func (puo *PlatformUpdateOne) ClearOperator() *PlatformUpdateOne {
	puo.mutation.ClearOperator()
	return puo
}

// RemoveOperatorIDs removes the "Operator" edge to Operator entities by IDs.
func (puo *PlatformUpdateOne) RemoveOperatorIDs(ids ...int) *PlatformUpdateOne {
	puo.mutation.RemoveOperatorIDs(ids...)
	return puo
}

// RemoveOperator removes "Operator" edges to Operator entities.
func (puo *PlatformUpdateOne) RemoveOperator(o ...*Operator) *PlatformUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemoveOperatorIDs(ids...)
}

// Where appends a list predicates to the PlatformUpdate builder.
func (puo *PlatformUpdateOne) Where(ps ...predicate.Platform) *PlatformUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlatformUpdateOne) Select(field string, fields ...string) *PlatformUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Platform entity.
func (puo *PlatformUpdateOne) Save(ctx context.Context) (*Platform, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlatformUpdateOne) SaveX(ctx context.Context) *Platform {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlatformUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlatformUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PlatformUpdateOne) sqlSave(ctx context.Context) (_node *Platform, err error) {
	_spec := sqlgraph.NewUpdateSpec(platform.Table, platform.Columns, sqlgraph.NewFieldSpec(platform.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Platform.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, platform.FieldID)
		for _, f := range fields {
			if !platform.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != platform.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(platform.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Hash(); ok {
		_spec.SetField(platform.FieldHash, field.TypeString, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(platform.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(platform.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(platform.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.HomeButtonPayload(); ok {
		_spec.SetField(platform.FieldHomeButtonPayload, field.TypeString, value)
	}
	if puo.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platform.OperatorTable,
			Columns: []string{platform.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOperatorIDs(); len(nodes) > 0 && !puo.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platform.OperatorTable,
			Columns: []string{platform.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   platform.OperatorTable,
			Columns: []string{platform.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Platform{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platform.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
