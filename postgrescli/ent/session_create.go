// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencyversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/mathversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/operator"
	"github.com/Lavizord/checkers-server/postgrescli/ent/session"
)

// SessionCreate is the builder for creating a Session entity.
type SessionCreate struct {
	config
	mutation *SessionMutation
	hooks    []Hook
}

// SetCanDemo sets the "can_demo" field.
func (sc *SessionCreate) SetCanDemo(b bool) *SessionCreate {
	sc.mutation.SetCanDemo(b)
	return sc
}

// SetToken sets the "token" field.
func (sc *SessionCreate) SetToken(s string) *SessionCreate {
	sc.mutation.SetToken(s)
	return sc
}

// SetClientID sets the "client_id" field.
func (sc *SessionCreate) SetClientID(s string) *SessionCreate {
	sc.mutation.SetClientID(s)
	return sc
}

// SetDemo sets the "demo" field.
func (sc *SessionCreate) SetDemo(b bool) *SessionCreate {
	sc.mutation.SetDemo(b)
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SessionCreate) SetCreatedAt(t time.Time) *SessionCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SessionCreate) SetNillableCreatedAt(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SessionCreate) SetDeletedAt(t time.Time) *SessionCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SessionCreate) SetNillableDeletedAt(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetGamesID sets the "games" edge to the Game entity by ID.
func (sc *SessionCreate) SetGamesID(id int) *SessionCreate {
	sc.mutation.SetGamesID(id)
	return sc
}

// SetNillableGamesID sets the "games" edge to the Game entity by ID if the given value is not nil.
func (sc *SessionCreate) SetNillableGamesID(id *int) *SessionCreate {
	if id != nil {
		sc = sc.SetGamesID(*id)
	}
	return sc
}

// SetGames sets the "games" edge to the Game entity.
func (sc *SessionCreate) SetGames(g *Game) *SessionCreate {
	return sc.SetGamesID(g.ID)
}

// SetGameVersionsID sets the "game_versions" edge to the GameVersion entity by ID.
func (sc *SessionCreate) SetGameVersionsID(id int) *SessionCreate {
	sc.mutation.SetGameVersionsID(id)
	return sc
}

// SetNillableGameVersionsID sets the "game_versions" edge to the GameVersion entity by ID if the given value is not nil.
func (sc *SessionCreate) SetNillableGameVersionsID(id *int) *SessionCreate {
	if id != nil {
		sc = sc.SetGameVersionsID(*id)
	}
	return sc
}

// SetGameVersions sets the "game_versions" edge to the GameVersion entity.
func (sc *SessionCreate) SetGameVersions(g *GameVersion) *SessionCreate {
	return sc.SetGameVersionsID(g.ID)
}

// SetOperatorID sets the "Operator" edge to the Operator entity by ID.
func (sc *SessionCreate) SetOperatorID(id int) *SessionCreate {
	sc.mutation.SetOperatorID(id)
	return sc
}

// SetNillableOperatorID sets the "Operator" edge to the Operator entity by ID if the given value is not nil.
func (sc *SessionCreate) SetNillableOperatorID(id *int) *SessionCreate {
	if id != nil {
		sc = sc.SetOperatorID(*id)
	}
	return sc
}

// SetOperator sets the "Operator" edge to the Operator entity.
func (sc *SessionCreate) SetOperator(o *Operator) *SessionCreate {
	return sc.SetOperatorID(o.ID)
}

// SetCurrencyVersionsID sets the "currency_versions" edge to the CurrencyVersion entity by ID.
func (sc *SessionCreate) SetCurrencyVersionsID(id int) *SessionCreate {
	sc.mutation.SetCurrencyVersionsID(id)
	return sc
}

// SetNillableCurrencyVersionsID sets the "currency_versions" edge to the CurrencyVersion entity by ID if the given value is not nil.
func (sc *SessionCreate) SetNillableCurrencyVersionsID(id *int) *SessionCreate {
	if id != nil {
		sc = sc.SetCurrencyVersionsID(*id)
	}
	return sc
}

// SetCurrencyVersions sets the "currency_versions" edge to the CurrencyVersion entity.
func (sc *SessionCreate) SetCurrencyVersions(c *CurrencyVersion) *SessionCreate {
	return sc.SetCurrencyVersionsID(c.ID)
}

// SetMathVersionsID sets the "math_versions" edge to the MathVersion entity by ID.
func (sc *SessionCreate) SetMathVersionsID(id int) *SessionCreate {
	sc.mutation.SetMathVersionsID(id)
	return sc
}

// SetNillableMathVersionsID sets the "math_versions" edge to the MathVersion entity by ID if the given value is not nil.
func (sc *SessionCreate) SetNillableMathVersionsID(id *int) *SessionCreate {
	if id != nil {
		sc = sc.SetMathVersionsID(*id)
	}
	return sc
}

// SetMathVersions sets the "math_versions" edge to the MathVersion entity.
func (sc *SessionCreate) SetMathVersions(m *MathVersion) *SessionCreate {
	return sc.SetMathVersionsID(m.ID)
}

// Mutation returns the SessionMutation object of the builder.
func (sc *SessionCreate) Mutation() *SessionMutation {
	return sc.mutation
}

// Save creates the Session in the database.
func (sc *SessionCreate) Save(ctx context.Context) (*Session, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SessionCreate) SaveX(ctx context.Context) *Session {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SessionCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SessionCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SessionCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := session.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SessionCreate) check() error {
	if _, ok := sc.mutation.CanDemo(); !ok {
		return &ValidationError{Name: "can_demo", err: errors.New(`ent: missing required field "Session.can_demo"`)}
	}
	if _, ok := sc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "Session.token"`)}
	}
	if _, ok := sc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "Session.client_id"`)}
	}
	if _, ok := sc.mutation.Demo(); !ok {
		return &ValidationError{Name: "demo", err: errors.New(`ent: missing required field "Session.demo"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Session.created_at"`)}
	}
	return nil
}

func (sc *SessionCreate) sqlSave(ctx context.Context) (*Session, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SessionCreate) createSpec() (*Session, *sqlgraph.CreateSpec) {
	var (
		_node = &Session{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(session.Table, sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.CanDemo(); ok {
		_spec.SetField(session.FieldCanDemo, field.TypeBool, value)
		_node.CanDemo = value
	}
	if value, ok := sc.mutation.Token(); ok {
		_spec.SetField(session.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := sc.mutation.ClientID(); ok {
		_spec.SetField(session.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := sc.mutation.Demo(); ok {
		_spec.SetField(session.FieldDemo, field.TypeBool, value)
		_node.Demo = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(session.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(session.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := sc.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.GamesTable,
			Columns: []string{session.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_sessions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.GameVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.GameVersionsTable,
			Columns: []string{session.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_version_sessions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.OperatorTable,
			Columns: []string{session.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.operator_sessions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CurrencyVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.CurrencyVersionsTable,
			Columns: []string{session.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.currency_version_sessions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.MathVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.MathVersionsTable,
			Columns: []string{session.MathVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mathversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.math_version_sessions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SessionCreateBulk is the builder for creating many Session entities in bulk.
type SessionCreateBulk struct {
	config
	err      error
	builders []*SessionCreate
}

// Save creates the Session entities in the database.
func (scb *SessionCreateBulk) Save(ctx context.Context) ([]*Session, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Session, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SessionCreateBulk) SaveX(ctx context.Context) []*Session {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SessionCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SessionCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
