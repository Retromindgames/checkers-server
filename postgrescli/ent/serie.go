// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Lavizord/checkers-server/postgrescli/ent/serie"
)

// Serie is the model entity for the Serie schema.
type Serie struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID string `json:"external_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SerieQuery when eager-loading is set.
	Edges        SerieEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SerieEdges holds the relations/edges for other nodes in the graph.
type SerieEdges struct {
	// Games holds the value of the games edge.
	Games []*Game `json:"games,omitempty"`
	// SerieFeatures holds the value of the serie_features edge.
	SerieFeatures []*SerieFeature `json:"serie_features,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GamesOrErr returns the Games value or an error if the edge
// was not loaded in eager-loading.
func (e SerieEdges) GamesOrErr() ([]*Game, error) {
	if e.loadedTypes[0] {
		return e.Games, nil
	}
	return nil, &NotLoadedError{edge: "games"}
}

// SerieFeaturesOrErr returns the SerieFeatures value or an error if the edge
// was not loaded in eager-loading.
func (e SerieEdges) SerieFeaturesOrErr() ([]*SerieFeature, error) {
	if e.loadedTypes[1] {
		return e.SerieFeatures, nil
	}
	return nil, &NotLoadedError{edge: "serie_features"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Serie) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case serie.FieldID:
			values[i] = new(sql.NullInt64)
		case serie.FieldName, serie.FieldExternalID:
			values[i] = new(sql.NullString)
		case serie.FieldCreatedAt, serie.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Serie fields.
func (s *Serie) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case serie.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case serie.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case serie.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case serie.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = new(time.Time)
				*s.DeletedAt = value.Time
			}
		case serie.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				s.ExternalID = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Serie.
// This includes values selected through modifiers, order, etc.
func (s *Serie) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryGames queries the "games" edge of the Serie entity.
func (s *Serie) QueryGames() *GameQuery {
	return NewSerieClient(s.config).QueryGames(s)
}

// QuerySerieFeatures queries the "serie_features" edge of the Serie entity.
func (s *Serie) QuerySerieFeatures() *SerieFeatureQuery {
	return NewSerieClient(s.config).QuerySerieFeatures(s)
}

// Update returns a builder for updating this Serie.
// Note that you need to call Serie.Unwrap() before calling this method if this Serie
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Serie) Update() *SerieUpdateOne {
	return NewSerieClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Serie entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Serie) Unwrap() *Serie {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Serie is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Serie) String() string {
	var builder strings.Builder
	builder.WriteString("Serie(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := s.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("external_id=")
	builder.WriteString(s.ExternalID)
	builder.WriteByte(')')
	return builder.String()
}

// Series is a parsable slice of Serie.
type Series []*Serie
