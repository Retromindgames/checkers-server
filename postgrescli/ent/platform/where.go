// Code generated by ent, DO NOT EDIT.

package platform

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Platform {
	return predicate.Platform(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Platform {
	return predicate.Platform(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Platform {
	return predicate.Platform(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Platform {
	return predicate.Platform(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Platform {
	return predicate.Platform(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Platform {
	return predicate.Platform(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Platform {
	return predicate.Platform(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldName, v))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldHash, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldCreatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldDeletedAt, v))
}

// HomeButtonPayload applies equality check predicate on the "home_button_payload" field. It's identical to HomeButtonPayloadEQ.
func HomeButtonPayload(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldHomeButtonPayload, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Platform {
	return predicate.Platform(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Platform {
	return predicate.Platform(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Platform {
	return predicate.Platform(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Platform {
	return predicate.Platform(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Platform {
	return predicate.Platform(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Platform {
	return predicate.Platform(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Platform {
	return predicate.Platform(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Platform {
	return predicate.Platform(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Platform {
	return predicate.Platform(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Platform {
	return predicate.Platform(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Platform {
	return predicate.Platform(sql.FieldContainsFold(FieldName, v))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.Platform {
	return predicate.Platform(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.Platform {
	return predicate.Platform(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.Platform {
	return predicate.Platform(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.Platform {
	return predicate.Platform(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.Platform {
	return predicate.Platform(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.Platform {
	return predicate.Platform(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.Platform {
	return predicate.Platform(sql.FieldLTE(FieldHash, v))
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.Platform {
	return predicate.Platform(sql.FieldContains(FieldHash, v))
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.Platform {
	return predicate.Platform(sql.FieldHasPrefix(FieldHash, v))
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.Platform {
	return predicate.Platform(sql.FieldHasSuffix(FieldHash, v))
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEqualFold(FieldHash, v))
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.Platform {
	return predicate.Platform(sql.FieldContainsFold(FieldHash, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldLTE(FieldCreatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Platform {
	return predicate.Platform(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Platform {
	return predicate.Platform(sql.FieldNotNull(FieldDeletedAt))
}

// HomeButtonPayloadEQ applies the EQ predicate on the "home_button_payload" field.
func HomeButtonPayloadEQ(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldHomeButtonPayload, v))
}

// HomeButtonPayloadNEQ applies the NEQ predicate on the "home_button_payload" field.
func HomeButtonPayloadNEQ(v string) predicate.Platform {
	return predicate.Platform(sql.FieldNEQ(FieldHomeButtonPayload, v))
}

// HomeButtonPayloadIn applies the In predicate on the "home_button_payload" field.
func HomeButtonPayloadIn(vs ...string) predicate.Platform {
	return predicate.Platform(sql.FieldIn(FieldHomeButtonPayload, vs...))
}

// HomeButtonPayloadNotIn applies the NotIn predicate on the "home_button_payload" field.
func HomeButtonPayloadNotIn(vs ...string) predicate.Platform {
	return predicate.Platform(sql.FieldNotIn(FieldHomeButtonPayload, vs...))
}

// HomeButtonPayloadGT applies the GT predicate on the "home_button_payload" field.
func HomeButtonPayloadGT(v string) predicate.Platform {
	return predicate.Platform(sql.FieldGT(FieldHomeButtonPayload, v))
}

// HomeButtonPayloadGTE applies the GTE predicate on the "home_button_payload" field.
func HomeButtonPayloadGTE(v string) predicate.Platform {
	return predicate.Platform(sql.FieldGTE(FieldHomeButtonPayload, v))
}

// HomeButtonPayloadLT applies the LT predicate on the "home_button_payload" field.
func HomeButtonPayloadLT(v string) predicate.Platform {
	return predicate.Platform(sql.FieldLT(FieldHomeButtonPayload, v))
}

// HomeButtonPayloadLTE applies the LTE predicate on the "home_button_payload" field.
func HomeButtonPayloadLTE(v string) predicate.Platform {
	return predicate.Platform(sql.FieldLTE(FieldHomeButtonPayload, v))
}

// HomeButtonPayloadContains applies the Contains predicate on the "home_button_payload" field.
func HomeButtonPayloadContains(v string) predicate.Platform {
	return predicate.Platform(sql.FieldContains(FieldHomeButtonPayload, v))
}

// HomeButtonPayloadHasPrefix applies the HasPrefix predicate on the "home_button_payload" field.
func HomeButtonPayloadHasPrefix(v string) predicate.Platform {
	return predicate.Platform(sql.FieldHasPrefix(FieldHomeButtonPayload, v))
}

// HomeButtonPayloadHasSuffix applies the HasSuffix predicate on the "home_button_payload" field.
func HomeButtonPayloadHasSuffix(v string) predicate.Platform {
	return predicate.Platform(sql.FieldHasSuffix(FieldHomeButtonPayload, v))
}

// HomeButtonPayloadEqualFold applies the EqualFold predicate on the "home_button_payload" field.
func HomeButtonPayloadEqualFold(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEqualFold(FieldHomeButtonPayload, v))
}

// HomeButtonPayloadContainsFold applies the ContainsFold predicate on the "home_button_payload" field.
func HomeButtonPayloadContainsFold(v string) predicate.Platform {
	return predicate.Platform(sql.FieldContainsFold(FieldHomeButtonPayload, v))
}

// HasOperator applies the HasEdge predicate on the "Operator" edge.
func HasOperator() predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OperatorTable, OperatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOperatorWith applies the HasEdge predicate on the "Operator" edge with a given conditions (other predicates).
func HasOperatorWith(preds ...predicate.Operator) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		step := newOperatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Platform) predicate.Platform {
	return predicate.Platform(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Platform) predicate.Platform {
	return predicate.Platform(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Platform) predicate.Platform {
	return predicate.Platform(sql.NotPredicates(p))
}
