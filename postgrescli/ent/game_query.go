// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameconfig"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gamefeature"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gametype"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
	"github.com/Lavizord/checkers-server/postgrescli/ent/serie"
	"github.com/Lavizord/checkers-server/postgrescli/ent/session"
	"github.com/Lavizord/checkers-server/postgrescli/ent/studio"
)

// GameQuery is the builder for querying Game entities.
type GameQuery struct {
	config
	ctx              *QueryContext
	order            []game.OrderOption
	inters           []Interceptor
	predicates       []predicate.Game
	withStudio       *StudioQuery
	withGameType     *GameTypeQuery
	withSerie        *SerieQuery
	withGameFeatures *GameFeatureQuery
	withGameVersions *GameVersionQuery
	withGameConfigs  *GameConfigQuery
	withSessions     *SessionQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GameQuery builder.
func (gq *GameQuery) Where(ps ...predicate.Game) *GameQuery {
	gq.predicates = append(gq.predicates, ps...)
	return gq
}

// Limit the number of records to be returned by this query.
func (gq *GameQuery) Limit(limit int) *GameQuery {
	gq.ctx.Limit = &limit
	return gq
}

// Offset to start from.
func (gq *GameQuery) Offset(offset int) *GameQuery {
	gq.ctx.Offset = &offset
	return gq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gq *GameQuery) Unique(unique bool) *GameQuery {
	gq.ctx.Unique = &unique
	return gq
}

// Order specifies how the records should be ordered.
func (gq *GameQuery) Order(o ...game.OrderOption) *GameQuery {
	gq.order = append(gq.order, o...)
	return gq
}

// QueryStudio chains the current query on the "studio" edge.
func (gq *GameQuery) QueryStudio() *StudioQuery {
	query := (&StudioClient{config: gq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, selector),
			sqlgraph.To(studio.Table, studio.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, game.StudioTable, game.StudioColumn),
		)
		fromU = sqlgraph.SetNeighbors(gq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGameType chains the current query on the "game_type" edge.
func (gq *GameQuery) QueryGameType() *GameTypeQuery {
	query := (&GameTypeClient{config: gq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, selector),
			sqlgraph.To(gametype.Table, gametype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, game.GameTypeTable, game.GameTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(gq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySerie chains the current query on the "serie" edge.
func (gq *GameQuery) QuerySerie() *SerieQuery {
	query := (&SerieClient{config: gq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, selector),
			sqlgraph.To(serie.Table, serie.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, game.SerieTable, game.SerieColumn),
		)
		fromU = sqlgraph.SetNeighbors(gq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGameFeatures chains the current query on the "game_features" edge.
func (gq *GameQuery) QueryGameFeatures() *GameFeatureQuery {
	query := (&GameFeatureClient{config: gq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, selector),
			sqlgraph.To(gamefeature.Table, gamefeature.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, game.GameFeaturesTable, game.GameFeaturesColumn),
		)
		fromU = sqlgraph.SetNeighbors(gq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGameVersions chains the current query on the "game_versions" edge.
func (gq *GameQuery) QueryGameVersions() *GameVersionQuery {
	query := (&GameVersionClient{config: gq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, selector),
			sqlgraph.To(gameversion.Table, gameversion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, game.GameVersionsTable, game.GameVersionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(gq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGameConfigs chains the current query on the "game_configs" edge.
func (gq *GameQuery) QueryGameConfigs() *GameConfigQuery {
	query := (&GameConfigClient{config: gq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, selector),
			sqlgraph.To(gameconfig.Table, gameconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, game.GameConfigsTable, game.GameConfigsColumn),
		)
		fromU = sqlgraph.SetNeighbors(gq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySessions chains the current query on the "sessions" edge.
func (gq *GameQuery) QuerySessions() *SessionQuery {
	query := (&SessionClient{config: gq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, selector),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, game.SessionsTable, game.SessionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(gq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Game entity from the query.
// Returns a *NotFoundError when no Game was found.
func (gq *GameQuery) First(ctx context.Context) (*Game, error) {
	nodes, err := gq.Limit(1).All(setContextOp(ctx, gq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{game.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gq *GameQuery) FirstX(ctx context.Context) *Game {
	node, err := gq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Game ID from the query.
// Returns a *NotFoundError when no Game ID was found.
func (gq *GameQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gq.Limit(1).IDs(setContextOp(ctx, gq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{game.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gq *GameQuery) FirstIDX(ctx context.Context) int {
	id, err := gq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Game entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Game entity is found.
// Returns a *NotFoundError when no Game entities are found.
func (gq *GameQuery) Only(ctx context.Context) (*Game, error) {
	nodes, err := gq.Limit(2).All(setContextOp(ctx, gq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{game.Label}
	default:
		return nil, &NotSingularError{game.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gq *GameQuery) OnlyX(ctx context.Context) *Game {
	node, err := gq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Game ID in the query.
// Returns a *NotSingularError when more than one Game ID is found.
// Returns a *NotFoundError when no entities are found.
func (gq *GameQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gq.Limit(2).IDs(setContextOp(ctx, gq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{game.Label}
	default:
		err = &NotSingularError{game.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gq *GameQuery) OnlyIDX(ctx context.Context) int {
	id, err := gq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Games.
func (gq *GameQuery) All(ctx context.Context) ([]*Game, error) {
	ctx = setContextOp(ctx, gq.ctx, ent.OpQueryAll)
	if err := gq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Game, *GameQuery]()
	return withInterceptors[[]*Game](ctx, gq, qr, gq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gq *GameQuery) AllX(ctx context.Context) []*Game {
	nodes, err := gq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Game IDs.
func (gq *GameQuery) IDs(ctx context.Context) (ids []int, err error) {
	if gq.ctx.Unique == nil && gq.path != nil {
		gq.Unique(true)
	}
	ctx = setContextOp(ctx, gq.ctx, ent.OpQueryIDs)
	if err = gq.Select(game.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gq *GameQuery) IDsX(ctx context.Context) []int {
	ids, err := gq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gq *GameQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gq.ctx, ent.OpQueryCount)
	if err := gq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gq, querierCount[*GameQuery](), gq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gq *GameQuery) CountX(ctx context.Context) int {
	count, err := gq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gq *GameQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gq.ctx, ent.OpQueryExist)
	switch _, err := gq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gq *GameQuery) ExistX(ctx context.Context) bool {
	exist, err := gq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GameQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gq *GameQuery) Clone() *GameQuery {
	if gq == nil {
		return nil
	}
	return &GameQuery{
		config:           gq.config,
		ctx:              gq.ctx.Clone(),
		order:            append([]game.OrderOption{}, gq.order...),
		inters:           append([]Interceptor{}, gq.inters...),
		predicates:       append([]predicate.Game{}, gq.predicates...),
		withStudio:       gq.withStudio.Clone(),
		withGameType:     gq.withGameType.Clone(),
		withSerie:        gq.withSerie.Clone(),
		withGameFeatures: gq.withGameFeatures.Clone(),
		withGameVersions: gq.withGameVersions.Clone(),
		withGameConfigs:  gq.withGameConfigs.Clone(),
		withSessions:     gq.withSessions.Clone(),
		// clone intermediate query.
		sql:  gq.sql.Clone(),
		path: gq.path,
	}
}

// WithStudio tells the query-builder to eager-load the nodes that are connected to
// the "studio" edge. The optional arguments are used to configure the query builder of the edge.
func (gq *GameQuery) WithStudio(opts ...func(*StudioQuery)) *GameQuery {
	query := (&StudioClient{config: gq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gq.withStudio = query
	return gq
}

// WithGameType tells the query-builder to eager-load the nodes that are connected to
// the "game_type" edge. The optional arguments are used to configure the query builder of the edge.
func (gq *GameQuery) WithGameType(opts ...func(*GameTypeQuery)) *GameQuery {
	query := (&GameTypeClient{config: gq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gq.withGameType = query
	return gq
}

// WithSerie tells the query-builder to eager-load the nodes that are connected to
// the "serie" edge. The optional arguments are used to configure the query builder of the edge.
func (gq *GameQuery) WithSerie(opts ...func(*SerieQuery)) *GameQuery {
	query := (&SerieClient{config: gq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gq.withSerie = query
	return gq
}

// WithGameFeatures tells the query-builder to eager-load the nodes that are connected to
// the "game_features" edge. The optional arguments are used to configure the query builder of the edge.
func (gq *GameQuery) WithGameFeatures(opts ...func(*GameFeatureQuery)) *GameQuery {
	query := (&GameFeatureClient{config: gq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gq.withGameFeatures = query
	return gq
}

// WithGameVersions tells the query-builder to eager-load the nodes that are connected to
// the "game_versions" edge. The optional arguments are used to configure the query builder of the edge.
func (gq *GameQuery) WithGameVersions(opts ...func(*GameVersionQuery)) *GameQuery {
	query := (&GameVersionClient{config: gq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gq.withGameVersions = query
	return gq
}

// WithGameConfigs tells the query-builder to eager-load the nodes that are connected to
// the "game_configs" edge. The optional arguments are used to configure the query builder of the edge.
func (gq *GameQuery) WithGameConfigs(opts ...func(*GameConfigQuery)) *GameQuery {
	query := (&GameConfigClient{config: gq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gq.withGameConfigs = query
	return gq
}

// WithSessions tells the query-builder to eager-load the nodes that are connected to
// the "sessions" edge. The optional arguments are used to configure the query builder of the edge.
func (gq *GameQuery) WithSessions(opts ...func(*SessionQuery)) *GameQuery {
	query := (&SessionClient{config: gq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gq.withSessions = query
	return gq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Game.Query().
//		GroupBy(game.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gq *GameQuery) GroupBy(field string, fields ...string) *GameGroupBy {
	gq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GameGroupBy{build: gq}
	grbuild.flds = &gq.ctx.Fields
	grbuild.label = game.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Game.Query().
//		Select(game.FieldName).
//		Scan(ctx, &v)
func (gq *GameQuery) Select(fields ...string) *GameSelect {
	gq.ctx.Fields = append(gq.ctx.Fields, fields...)
	sbuild := &GameSelect{GameQuery: gq}
	sbuild.label = game.Label
	sbuild.flds, sbuild.scan = &gq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GameSelect configured with the given aggregations.
func (gq *GameQuery) Aggregate(fns ...AggregateFunc) *GameSelect {
	return gq.Select().Aggregate(fns...)
}

func (gq *GameQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gq); err != nil {
				return err
			}
		}
	}
	for _, f := range gq.ctx.Fields {
		if !game.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gq.path != nil {
		prev, err := gq.path(ctx)
		if err != nil {
			return err
		}
		gq.sql = prev
	}
	return nil
}

func (gq *GameQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Game, error) {
	var (
		nodes       = []*Game{}
		withFKs     = gq.withFKs
		_spec       = gq.querySpec()
		loadedTypes = [7]bool{
			gq.withStudio != nil,
			gq.withGameType != nil,
			gq.withSerie != nil,
			gq.withGameFeatures != nil,
			gq.withGameVersions != nil,
			gq.withGameConfigs != nil,
			gq.withSessions != nil,
		}
	)
	if gq.withStudio != nil || gq.withGameType != nil || gq.withSerie != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, game.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Game).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Game{config: gq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gq.withStudio; query != nil {
		if err := gq.loadStudio(ctx, query, nodes, nil,
			func(n *Game, e *Studio) { n.Edges.Studio = e }); err != nil {
			return nil, err
		}
	}
	if query := gq.withGameType; query != nil {
		if err := gq.loadGameType(ctx, query, nodes, nil,
			func(n *Game, e *GameType) { n.Edges.GameType = e }); err != nil {
			return nil, err
		}
	}
	if query := gq.withSerie; query != nil {
		if err := gq.loadSerie(ctx, query, nodes, nil,
			func(n *Game, e *Serie) { n.Edges.Serie = e }); err != nil {
			return nil, err
		}
	}
	if query := gq.withGameFeatures; query != nil {
		if err := gq.loadGameFeatures(ctx, query, nodes,
			func(n *Game) { n.Edges.GameFeatures = []*GameFeature{} },
			func(n *Game, e *GameFeature) { n.Edges.GameFeatures = append(n.Edges.GameFeatures, e) }); err != nil {
			return nil, err
		}
	}
	if query := gq.withGameVersions; query != nil {
		if err := gq.loadGameVersions(ctx, query, nodes,
			func(n *Game) { n.Edges.GameVersions = []*GameVersion{} },
			func(n *Game, e *GameVersion) { n.Edges.GameVersions = append(n.Edges.GameVersions, e) }); err != nil {
			return nil, err
		}
	}
	if query := gq.withGameConfigs; query != nil {
		if err := gq.loadGameConfigs(ctx, query, nodes,
			func(n *Game) { n.Edges.GameConfigs = []*GameConfig{} },
			func(n *Game, e *GameConfig) { n.Edges.GameConfigs = append(n.Edges.GameConfigs, e) }); err != nil {
			return nil, err
		}
	}
	if query := gq.withSessions; query != nil {
		if err := gq.loadSessions(ctx, query, nodes,
			func(n *Game) { n.Edges.Sessions = []*Session{} },
			func(n *Game, e *Session) { n.Edges.Sessions = append(n.Edges.Sessions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gq *GameQuery) loadStudio(ctx context.Context, query *StudioQuery, nodes []*Game, init func(*Game), assign func(*Game, *Studio)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Game)
	for i := range nodes {
		if nodes[i].studio_games == nil {
			continue
		}
		fk := *nodes[i].studio_games
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(studio.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "studio_games" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gq *GameQuery) loadGameType(ctx context.Context, query *GameTypeQuery, nodes []*Game, init func(*Game), assign func(*Game, *GameType)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Game)
	for i := range nodes {
		if nodes[i].game_type_games == nil {
			continue
		}
		fk := *nodes[i].game_type_games
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(gametype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "game_type_games" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gq *GameQuery) loadSerie(ctx context.Context, query *SerieQuery, nodes []*Game, init func(*Game), assign func(*Game, *Serie)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Game)
	for i := range nodes {
		if nodes[i].serie_games == nil {
			continue
		}
		fk := *nodes[i].serie_games
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(serie.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "serie_games" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gq *GameQuery) loadGameFeatures(ctx context.Context, query *GameFeatureQuery, nodes []*Game, init func(*Game), assign func(*Game, *GameFeature)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Game)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.GameFeature(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(game.GameFeaturesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.game_game_features
		if fk == nil {
			return fmt.Errorf(`foreign-key "game_game_features" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "game_game_features" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (gq *GameQuery) loadGameVersions(ctx context.Context, query *GameVersionQuery, nodes []*Game, init func(*Game), assign func(*Game, *GameVersion)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Game)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.GameVersion(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(game.GameVersionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.game_game_versions
		if fk == nil {
			return fmt.Errorf(`foreign-key "game_game_versions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "game_game_versions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (gq *GameQuery) loadGameConfigs(ctx context.Context, query *GameConfigQuery, nodes []*Game, init func(*Game), assign func(*Game, *GameConfig)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Game)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.GameConfig(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(game.GameConfigsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.game_game_configs
		if fk == nil {
			return fmt.Errorf(`foreign-key "game_game_configs" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "game_game_configs" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (gq *GameQuery) loadSessions(ctx context.Context, query *SessionQuery, nodes []*Game, init func(*Game), assign func(*Game, *Session)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Game)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Session(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(game.SessionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.game_sessions
		if fk == nil {
			return fmt.Errorf(`foreign-key "game_sessions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "game_sessions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (gq *GameQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gq.querySpec()
	_spec.Node.Columns = gq.ctx.Fields
	if len(gq.ctx.Fields) > 0 {
		_spec.Unique = gq.ctx.Unique != nil && *gq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, gq.driver, _spec)
}

func (gq *GameQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(game.Table, game.Columns, sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt))
	_spec.From = gq.sql
	if unique := gq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if gq.path != nil {
		_spec.Unique = true
	}
	if fields := gq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, game.FieldID)
		for i := range fields {
			if fields[i] != game.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gq *GameQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gq.driver.Dialect())
	t1 := builder.Table(game.Table)
	columns := gq.ctx.Fields
	if len(columns) == 0 {
		columns = game.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gq.sql != nil {
		selector = gq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gq.ctx.Unique != nil && *gq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range gq.predicates {
		p(selector)
	}
	for _, p := range gq.order {
		p(selector)
	}
	if offset := gq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GameGroupBy is the group-by builder for Game entities.
type GameGroupBy struct {
	selector
	build *GameQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ggb *GameGroupBy) Aggregate(fns ...AggregateFunc) *GameGroupBy {
	ggb.fns = append(ggb.fns, fns...)
	return ggb
}

// Scan applies the selector query and scans the result into the given value.
func (ggb *GameGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ggb.build.ctx, ent.OpQueryGroupBy)
	if err := ggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GameQuery, *GameGroupBy](ctx, ggb.build, ggb, ggb.build.inters, v)
}

func (ggb *GameGroupBy) sqlScan(ctx context.Context, root *GameQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ggb.fns))
	for _, fn := range ggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ggb.flds)+len(ggb.fns))
		for _, f := range *ggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GameSelect is the builder for selecting fields of Game entities.
type GameSelect struct {
	*GameQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gs *GameSelect) Aggregate(fns ...AggregateFunc) *GameSelect {
	gs.fns = append(gs.fns, fns...)
	return gs
}

// Scan applies the selector query and scans the result into the given value.
func (gs *GameSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gs.ctx, ent.OpQuerySelect)
	if err := gs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GameQuery, *GameSelect](ctx, gs.GameQuery, gs, gs.inters, v)
}

func (gs *GameSelect) sqlScan(ctx context.Context, root *GameQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gs.fns))
	for _, fn := range gs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
