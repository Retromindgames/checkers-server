// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/feature"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gamefeature"
)

// GameFeatureCreate is the builder for creating a GameFeature entity.
type GameFeatureCreate struct {
	config
	mutation *GameFeatureMutation
	hooks    []Hook
}

// SetFeaturesID sets the "features" edge to the Feature entity by ID.
func (gfc *GameFeatureCreate) SetFeaturesID(id int) *GameFeatureCreate {
	gfc.mutation.SetFeaturesID(id)
	return gfc
}

// SetNillableFeaturesID sets the "features" edge to the Feature entity by ID if the given value is not nil.
func (gfc *GameFeatureCreate) SetNillableFeaturesID(id *int) *GameFeatureCreate {
	if id != nil {
		gfc = gfc.SetFeaturesID(*id)
	}
	return gfc
}

// SetFeatures sets the "features" edge to the Feature entity.
func (gfc *GameFeatureCreate) SetFeatures(f *Feature) *GameFeatureCreate {
	return gfc.SetFeaturesID(f.ID)
}

// SetGamesID sets the "games" edge to the Game entity by ID.
func (gfc *GameFeatureCreate) SetGamesID(id int) *GameFeatureCreate {
	gfc.mutation.SetGamesID(id)
	return gfc
}

// SetNillableGamesID sets the "games" edge to the Game entity by ID if the given value is not nil.
func (gfc *GameFeatureCreate) SetNillableGamesID(id *int) *GameFeatureCreate {
	if id != nil {
		gfc = gfc.SetGamesID(*id)
	}
	return gfc
}

// SetGames sets the "games" edge to the Game entity.
func (gfc *GameFeatureCreate) SetGames(g *Game) *GameFeatureCreate {
	return gfc.SetGamesID(g.ID)
}

// Mutation returns the GameFeatureMutation object of the builder.
func (gfc *GameFeatureCreate) Mutation() *GameFeatureMutation {
	return gfc.mutation
}

// Save creates the GameFeature in the database.
func (gfc *GameFeatureCreate) Save(ctx context.Context) (*GameFeature, error) {
	return withHooks(ctx, gfc.sqlSave, gfc.mutation, gfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gfc *GameFeatureCreate) SaveX(ctx context.Context) *GameFeature {
	v, err := gfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gfc *GameFeatureCreate) Exec(ctx context.Context) error {
	_, err := gfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gfc *GameFeatureCreate) ExecX(ctx context.Context) {
	if err := gfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gfc *GameFeatureCreate) check() error {
	return nil
}

func (gfc *GameFeatureCreate) sqlSave(ctx context.Context) (*GameFeature, error) {
	if err := gfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gfc.mutation.id = &_node.ID
	gfc.mutation.done = true
	return _node, nil
}

func (gfc *GameFeatureCreate) createSpec() (*GameFeature, *sqlgraph.CreateSpec) {
	var (
		_node = &GameFeature{config: gfc.config}
		_spec = sqlgraph.NewCreateSpec(gamefeature.Table, sqlgraph.NewFieldSpec(gamefeature.FieldID, field.TypeInt))
	)
	if nodes := gfc.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamefeature.FeaturesTable,
			Columns: []string{gamefeature.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.feature_game_features = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gfc.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamefeature.GamesTable,
			Columns: []string{gamefeature.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_game_features = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GameFeatureCreateBulk is the builder for creating many GameFeature entities in bulk.
type GameFeatureCreateBulk struct {
	config
	err      error
	builders []*GameFeatureCreate
}

// Save creates the GameFeature entities in the database.
func (gfcb *GameFeatureCreateBulk) Save(ctx context.Context) ([]*GameFeature, error) {
	if gfcb.err != nil {
		return nil, gfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gfcb.builders))
	nodes := make([]*GameFeature, len(gfcb.builders))
	mutators := make([]Mutator, len(gfcb.builders))
	for i := range gfcb.builders {
		func(i int, root context.Context) {
			builder := gfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameFeatureMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gfcb *GameFeatureCreateBulk) SaveX(ctx context.Context) []*GameFeature {
	v, err := gfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gfcb *GameFeatureCreateBulk) Exec(ctx context.Context) error {
	_, err := gfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gfcb *GameFeatureCreateBulk) ExecX(ctx context.Context) {
	if err := gfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
