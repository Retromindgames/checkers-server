// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
	"github.com/Lavizord/checkers-server/postgrescli/ent/studio"
)

// StudioUpdate is the builder for updating Studio entities.
type StudioUpdate struct {
	config
	hooks    []Hook
	mutation *StudioMutation
}

// Where appends a list predicates to the StudioUpdate builder.
func (su *StudioUpdate) Where(ps ...predicate.Studio) *StudioUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *StudioUpdate) SetName(s string) *StudioUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *StudioUpdate) SetNillableName(s *string) *StudioUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *StudioUpdate) SetCreatedAt(t time.Time) *StudioUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *StudioUpdate) SetNillableCreatedAt(t *time.Time) *StudioUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *StudioUpdate) SetDeletedAt(t time.Time) *StudioUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *StudioUpdate) SetNillableDeletedAt(t *time.Time) *StudioUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *StudioUpdate) ClearDeletedAt() *StudioUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// AddGameIDs adds the "games" edge to the Game entity by IDs.
func (su *StudioUpdate) AddGameIDs(ids ...int) *StudioUpdate {
	su.mutation.AddGameIDs(ids...)
	return su
}

// AddGames adds the "games" edges to the Game entity.
func (su *StudioUpdate) AddGames(g ...*Game) *StudioUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return su.AddGameIDs(ids...)
}

// Mutation returns the StudioMutation object of the builder.
func (su *StudioUpdate) Mutation() *StudioMutation {
	return su.mutation
}

// ClearGames clears all "games" edges to the Game entity.
func (su *StudioUpdate) ClearGames() *StudioUpdate {
	su.mutation.ClearGames()
	return su
}

// RemoveGameIDs removes the "games" edge to Game entities by IDs.
func (su *StudioUpdate) RemoveGameIDs(ids ...int) *StudioUpdate {
	su.mutation.RemoveGameIDs(ids...)
	return su
}

// RemoveGames removes "games" edges to Game entities.
func (su *StudioUpdate) RemoveGames(g ...*Game) *StudioUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return su.RemoveGameIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StudioUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StudioUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StudioUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StudioUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *StudioUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(studio.Table, studio.Columns, sqlgraph.NewFieldSpec(studio.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(studio.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(studio.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(studio.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(studio.FieldDeletedAt, field.TypeTime)
	}
	if su.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studio.GamesTable,
			Columns: []string{studio.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedGamesIDs(); len(nodes) > 0 && !su.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studio.GamesTable,
			Columns: []string{studio.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studio.GamesTable,
			Columns: []string{studio.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{studio.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StudioUpdateOne is the builder for updating a single Studio entity.
type StudioUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StudioMutation
}

// SetName sets the "name" field.
func (suo *StudioUpdateOne) SetName(s string) *StudioUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *StudioUpdateOne) SetNillableName(s *string) *StudioUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *StudioUpdateOne) SetCreatedAt(t time.Time) *StudioUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *StudioUpdateOne) SetNillableCreatedAt(t *time.Time) *StudioUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *StudioUpdateOne) SetDeletedAt(t time.Time) *StudioUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *StudioUpdateOne) SetNillableDeletedAt(t *time.Time) *StudioUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *StudioUpdateOne) ClearDeletedAt() *StudioUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// AddGameIDs adds the "games" edge to the Game entity by IDs.
func (suo *StudioUpdateOne) AddGameIDs(ids ...int) *StudioUpdateOne {
	suo.mutation.AddGameIDs(ids...)
	return suo
}

// AddGames adds the "games" edges to the Game entity.
func (suo *StudioUpdateOne) AddGames(g ...*Game) *StudioUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return suo.AddGameIDs(ids...)
}

// Mutation returns the StudioMutation object of the builder.
func (suo *StudioUpdateOne) Mutation() *StudioMutation {
	return suo.mutation
}

// ClearGames clears all "games" edges to the Game entity.
func (suo *StudioUpdateOne) ClearGames() *StudioUpdateOne {
	suo.mutation.ClearGames()
	return suo
}

// RemoveGameIDs removes the "games" edge to Game entities by IDs.
func (suo *StudioUpdateOne) RemoveGameIDs(ids ...int) *StudioUpdateOne {
	suo.mutation.RemoveGameIDs(ids...)
	return suo
}

// RemoveGames removes "games" edges to Game entities.
func (suo *StudioUpdateOne) RemoveGames(g ...*Game) *StudioUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return suo.RemoveGameIDs(ids...)
}

// Where appends a list predicates to the StudioUpdate builder.
func (suo *StudioUpdateOne) Where(ps ...predicate.Studio) *StudioUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StudioUpdateOne) Select(field string, fields ...string) *StudioUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Studio entity.
func (suo *StudioUpdateOne) Save(ctx context.Context) (*Studio, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StudioUpdateOne) SaveX(ctx context.Context) *Studio {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StudioUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StudioUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *StudioUpdateOne) sqlSave(ctx context.Context) (_node *Studio, err error) {
	_spec := sqlgraph.NewUpdateSpec(studio.Table, studio.Columns, sqlgraph.NewFieldSpec(studio.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Studio.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, studio.FieldID)
		for _, f := range fields {
			if !studio.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != studio.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(studio.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(studio.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(studio.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(studio.FieldDeletedAt, field.TypeTime)
	}
	if suo.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studio.GamesTable,
			Columns: []string{studio.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedGamesIDs(); len(nodes) > 0 && !suo.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studio.GamesTable,
			Columns: []string{studio.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studio.GamesTable,
			Columns: []string{studio.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Studio{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{studio.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
