// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencyversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gametype"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
)

// GameTypeQuery is the builder for querying GameType entities.
type GameTypeQuery struct {
	config
	ctx                  *QueryContext
	order                []gametype.OrderOption
	inters               []Interceptor
	predicates           []predicate.GameType
	withGames            *GameQuery
	withGameVersions     *GameVersionQuery
	withCurrencyVersions *CurrencyVersionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GameTypeQuery builder.
func (gtq *GameTypeQuery) Where(ps ...predicate.GameType) *GameTypeQuery {
	gtq.predicates = append(gtq.predicates, ps...)
	return gtq
}

// Limit the number of records to be returned by this query.
func (gtq *GameTypeQuery) Limit(limit int) *GameTypeQuery {
	gtq.ctx.Limit = &limit
	return gtq
}

// Offset to start from.
func (gtq *GameTypeQuery) Offset(offset int) *GameTypeQuery {
	gtq.ctx.Offset = &offset
	return gtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gtq *GameTypeQuery) Unique(unique bool) *GameTypeQuery {
	gtq.ctx.Unique = &unique
	return gtq
}

// Order specifies how the records should be ordered.
func (gtq *GameTypeQuery) Order(o ...gametype.OrderOption) *GameTypeQuery {
	gtq.order = append(gtq.order, o...)
	return gtq
}

// QueryGames chains the current query on the "games" edge.
func (gtq *GameTypeQuery) QueryGames() *GameQuery {
	query := (&GameClient{config: gtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gametype.Table, gametype.FieldID, selector),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gametype.GamesTable, gametype.GamesColumn),
		)
		fromU = sqlgraph.SetNeighbors(gtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGameVersions chains the current query on the "game_versions" edge.
func (gtq *GameTypeQuery) QueryGameVersions() *GameVersionQuery {
	query := (&GameVersionClient{config: gtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gametype.Table, gametype.FieldID, selector),
			sqlgraph.To(gameversion.Table, gameversion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gametype.GameVersionsTable, gametype.GameVersionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(gtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCurrencyVersions chains the current query on the "currency_versions" edge.
func (gtq *GameTypeQuery) QueryCurrencyVersions() *CurrencyVersionQuery {
	query := (&CurrencyVersionClient{config: gtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gametype.Table, gametype.FieldID, selector),
			sqlgraph.To(currencyversion.Table, currencyversion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gametype.CurrencyVersionsTable, gametype.CurrencyVersionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(gtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GameType entity from the query.
// Returns a *NotFoundError when no GameType was found.
func (gtq *GameTypeQuery) First(ctx context.Context) (*GameType, error) {
	nodes, err := gtq.Limit(1).All(setContextOp(ctx, gtq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{gametype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gtq *GameTypeQuery) FirstX(ctx context.Context) *GameType {
	node, err := gtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GameType ID from the query.
// Returns a *NotFoundError when no GameType ID was found.
func (gtq *GameTypeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gtq.Limit(1).IDs(setContextOp(ctx, gtq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{gametype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gtq *GameTypeQuery) FirstIDX(ctx context.Context) int {
	id, err := gtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GameType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GameType entity is found.
// Returns a *NotFoundError when no GameType entities are found.
func (gtq *GameTypeQuery) Only(ctx context.Context) (*GameType, error) {
	nodes, err := gtq.Limit(2).All(setContextOp(ctx, gtq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{gametype.Label}
	default:
		return nil, &NotSingularError{gametype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gtq *GameTypeQuery) OnlyX(ctx context.Context) *GameType {
	node, err := gtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GameType ID in the query.
// Returns a *NotSingularError when more than one GameType ID is found.
// Returns a *NotFoundError when no entities are found.
func (gtq *GameTypeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gtq.Limit(2).IDs(setContextOp(ctx, gtq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{gametype.Label}
	default:
		err = &NotSingularError{gametype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gtq *GameTypeQuery) OnlyIDX(ctx context.Context) int {
	id, err := gtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GameTypes.
func (gtq *GameTypeQuery) All(ctx context.Context) ([]*GameType, error) {
	ctx = setContextOp(ctx, gtq.ctx, ent.OpQueryAll)
	if err := gtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GameType, *GameTypeQuery]()
	return withInterceptors[[]*GameType](ctx, gtq, qr, gtq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gtq *GameTypeQuery) AllX(ctx context.Context) []*GameType {
	nodes, err := gtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GameType IDs.
func (gtq *GameTypeQuery) IDs(ctx context.Context) (ids []int, err error) {
	if gtq.ctx.Unique == nil && gtq.path != nil {
		gtq.Unique(true)
	}
	ctx = setContextOp(ctx, gtq.ctx, ent.OpQueryIDs)
	if err = gtq.Select(gametype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gtq *GameTypeQuery) IDsX(ctx context.Context) []int {
	ids, err := gtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gtq *GameTypeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gtq.ctx, ent.OpQueryCount)
	if err := gtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gtq, querierCount[*GameTypeQuery](), gtq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gtq *GameTypeQuery) CountX(ctx context.Context) int {
	count, err := gtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gtq *GameTypeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gtq.ctx, ent.OpQueryExist)
	switch _, err := gtq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gtq *GameTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := gtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GameTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gtq *GameTypeQuery) Clone() *GameTypeQuery {
	if gtq == nil {
		return nil
	}
	return &GameTypeQuery{
		config:               gtq.config,
		ctx:                  gtq.ctx.Clone(),
		order:                append([]gametype.OrderOption{}, gtq.order...),
		inters:               append([]Interceptor{}, gtq.inters...),
		predicates:           append([]predicate.GameType{}, gtq.predicates...),
		withGames:            gtq.withGames.Clone(),
		withGameVersions:     gtq.withGameVersions.Clone(),
		withCurrencyVersions: gtq.withCurrencyVersions.Clone(),
		// clone intermediate query.
		sql:  gtq.sql.Clone(),
		path: gtq.path,
	}
}

// WithGames tells the query-builder to eager-load the nodes that are connected to
// the "games" edge. The optional arguments are used to configure the query builder of the edge.
func (gtq *GameTypeQuery) WithGames(opts ...func(*GameQuery)) *GameTypeQuery {
	query := (&GameClient{config: gtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gtq.withGames = query
	return gtq
}

// WithGameVersions tells the query-builder to eager-load the nodes that are connected to
// the "game_versions" edge. The optional arguments are used to configure the query builder of the edge.
func (gtq *GameTypeQuery) WithGameVersions(opts ...func(*GameVersionQuery)) *GameTypeQuery {
	query := (&GameVersionClient{config: gtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gtq.withGameVersions = query
	return gtq
}

// WithCurrencyVersions tells the query-builder to eager-load the nodes that are connected to
// the "currency_versions" edge. The optional arguments are used to configure the query builder of the edge.
func (gtq *GameTypeQuery) WithCurrencyVersions(opts ...func(*CurrencyVersionQuery)) *GameTypeQuery {
	query := (&CurrencyVersionClient{config: gtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gtq.withCurrencyVersions = query
	return gtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type string `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GameType.Query().
//		GroupBy(gametype.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gtq *GameTypeQuery) GroupBy(field string, fields ...string) *GameTypeGroupBy {
	gtq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GameTypeGroupBy{build: gtq}
	grbuild.flds = &gtq.ctx.Fields
	grbuild.label = gametype.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type string `json:"type,omitempty"`
//	}
//
//	client.GameType.Query().
//		Select(gametype.FieldType).
//		Scan(ctx, &v)
func (gtq *GameTypeQuery) Select(fields ...string) *GameTypeSelect {
	gtq.ctx.Fields = append(gtq.ctx.Fields, fields...)
	sbuild := &GameTypeSelect{GameTypeQuery: gtq}
	sbuild.label = gametype.Label
	sbuild.flds, sbuild.scan = &gtq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GameTypeSelect configured with the given aggregations.
func (gtq *GameTypeQuery) Aggregate(fns ...AggregateFunc) *GameTypeSelect {
	return gtq.Select().Aggregate(fns...)
}

func (gtq *GameTypeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gtq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gtq); err != nil {
				return err
			}
		}
	}
	for _, f := range gtq.ctx.Fields {
		if !gametype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gtq.path != nil {
		prev, err := gtq.path(ctx)
		if err != nil {
			return err
		}
		gtq.sql = prev
	}
	return nil
}

func (gtq *GameTypeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GameType, error) {
	var (
		nodes       = []*GameType{}
		_spec       = gtq.querySpec()
		loadedTypes = [3]bool{
			gtq.withGames != nil,
			gtq.withGameVersions != nil,
			gtq.withCurrencyVersions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GameType).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GameType{config: gtq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gtq.withGames; query != nil {
		if err := gtq.loadGames(ctx, query, nodes,
			func(n *GameType) { n.Edges.Games = []*Game{} },
			func(n *GameType, e *Game) { n.Edges.Games = append(n.Edges.Games, e) }); err != nil {
			return nil, err
		}
	}
	if query := gtq.withGameVersions; query != nil {
		if err := gtq.loadGameVersions(ctx, query, nodes,
			func(n *GameType) { n.Edges.GameVersions = []*GameVersion{} },
			func(n *GameType, e *GameVersion) { n.Edges.GameVersions = append(n.Edges.GameVersions, e) }); err != nil {
			return nil, err
		}
	}
	if query := gtq.withCurrencyVersions; query != nil {
		if err := gtq.loadCurrencyVersions(ctx, query, nodes,
			func(n *GameType) { n.Edges.CurrencyVersions = []*CurrencyVersion{} },
			func(n *GameType, e *CurrencyVersion) { n.Edges.CurrencyVersions = append(n.Edges.CurrencyVersions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gtq *GameTypeQuery) loadGames(ctx context.Context, query *GameQuery, nodes []*GameType, init func(*GameType), assign func(*GameType, *Game)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*GameType)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Game(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(gametype.GamesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.game_type_games
		if fk == nil {
			return fmt.Errorf(`foreign-key "game_type_games" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "game_type_games" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (gtq *GameTypeQuery) loadGameVersions(ctx context.Context, query *GameVersionQuery, nodes []*GameType, init func(*GameType), assign func(*GameType, *GameVersion)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*GameType)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.GameVersion(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(gametype.GameVersionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.game_type_game_versions
		if fk == nil {
			return fmt.Errorf(`foreign-key "game_type_game_versions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "game_type_game_versions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (gtq *GameTypeQuery) loadCurrencyVersions(ctx context.Context, query *CurrencyVersionQuery, nodes []*GameType, init func(*GameType), assign func(*GameType, *CurrencyVersion)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*GameType)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.CurrencyVersion(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(gametype.CurrencyVersionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.game_type_currency_versions
		if fk == nil {
			return fmt.Errorf(`foreign-key "game_type_currency_versions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "game_type_currency_versions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (gtq *GameTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gtq.querySpec()
	_spec.Node.Columns = gtq.ctx.Fields
	if len(gtq.ctx.Fields) > 0 {
		_spec.Unique = gtq.ctx.Unique != nil && *gtq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, gtq.driver, _spec)
}

func (gtq *GameTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(gametype.Table, gametype.Columns, sqlgraph.NewFieldSpec(gametype.FieldID, field.TypeInt))
	_spec.From = gtq.sql
	if unique := gtq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if gtq.path != nil {
		_spec.Unique = true
	}
	if fields := gtq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gametype.FieldID)
		for i := range fields {
			if fields[i] != gametype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gtq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gtq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gtq *GameTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gtq.driver.Dialect())
	t1 := builder.Table(gametype.Table)
	columns := gtq.ctx.Fields
	if len(columns) == 0 {
		columns = gametype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gtq.sql != nil {
		selector = gtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gtq.ctx.Unique != nil && *gtq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range gtq.predicates {
		p(selector)
	}
	for _, p := range gtq.order {
		p(selector)
	}
	if offset := gtq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gtq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GameTypeGroupBy is the group-by builder for GameType entities.
type GameTypeGroupBy struct {
	selector
	build *GameTypeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gtgb *GameTypeGroupBy) Aggregate(fns ...AggregateFunc) *GameTypeGroupBy {
	gtgb.fns = append(gtgb.fns, fns...)
	return gtgb
}

// Scan applies the selector query and scans the result into the given value.
func (gtgb *GameTypeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gtgb.build.ctx, ent.OpQueryGroupBy)
	if err := gtgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GameTypeQuery, *GameTypeGroupBy](ctx, gtgb.build, gtgb, gtgb.build.inters, v)
}

func (gtgb *GameTypeGroupBy) sqlScan(ctx context.Context, root *GameTypeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gtgb.fns))
	for _, fn := range gtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gtgb.flds)+len(gtgb.fns))
		for _, f := range *gtgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*gtgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gtgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GameTypeSelect is the builder for selecting fields of GameType entities.
type GameTypeSelect struct {
	*GameTypeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gts *GameTypeSelect) Aggregate(fns ...AggregateFunc) *GameTypeSelect {
	gts.fns = append(gts.fns, fns...)
	return gts
}

// Scan applies the selector query and scans the result into the given value.
func (gts *GameTypeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gts.ctx, ent.OpQuerySelect)
	if err := gts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GameTypeQuery, *GameTypeSelect](ctx, gts.GameTypeQuery, gts, gts.inters, v)
}

func (gts *GameTypeSelect) sqlScan(ctx context.Context, root *GameTypeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gts.fns))
	for _, fn := range gts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
