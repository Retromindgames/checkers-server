// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/feature"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gamefeature"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
)

// GameFeatureUpdate is the builder for updating GameFeature entities.
type GameFeatureUpdate struct {
	config
	hooks    []Hook
	mutation *GameFeatureMutation
}

// Where appends a list predicates to the GameFeatureUpdate builder.
func (gfu *GameFeatureUpdate) Where(ps ...predicate.GameFeature) *GameFeatureUpdate {
	gfu.mutation.Where(ps...)
	return gfu
}

// SetFeaturesID sets the "features" edge to the Feature entity by ID.
func (gfu *GameFeatureUpdate) SetFeaturesID(id int) *GameFeatureUpdate {
	gfu.mutation.SetFeaturesID(id)
	return gfu
}

// SetNillableFeaturesID sets the "features" edge to the Feature entity by ID if the given value is not nil.
func (gfu *GameFeatureUpdate) SetNillableFeaturesID(id *int) *GameFeatureUpdate {
	if id != nil {
		gfu = gfu.SetFeaturesID(*id)
	}
	return gfu
}

// SetFeatures sets the "features" edge to the Feature entity.
func (gfu *GameFeatureUpdate) SetFeatures(f *Feature) *GameFeatureUpdate {
	return gfu.SetFeaturesID(f.ID)
}

// SetGamesID sets the "games" edge to the Game entity by ID.
func (gfu *GameFeatureUpdate) SetGamesID(id int) *GameFeatureUpdate {
	gfu.mutation.SetGamesID(id)
	return gfu
}

// SetNillableGamesID sets the "games" edge to the Game entity by ID if the given value is not nil.
func (gfu *GameFeatureUpdate) SetNillableGamesID(id *int) *GameFeatureUpdate {
	if id != nil {
		gfu = gfu.SetGamesID(*id)
	}
	return gfu
}

// SetGames sets the "games" edge to the Game entity.
func (gfu *GameFeatureUpdate) SetGames(g *Game) *GameFeatureUpdate {
	return gfu.SetGamesID(g.ID)
}

// Mutation returns the GameFeatureMutation object of the builder.
func (gfu *GameFeatureUpdate) Mutation() *GameFeatureMutation {
	return gfu.mutation
}

// ClearFeatures clears the "features" edge to the Feature entity.
func (gfu *GameFeatureUpdate) ClearFeatures() *GameFeatureUpdate {
	gfu.mutation.ClearFeatures()
	return gfu
}

// ClearGames clears the "games" edge to the Game entity.
func (gfu *GameFeatureUpdate) ClearGames() *GameFeatureUpdate {
	gfu.mutation.ClearGames()
	return gfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gfu *GameFeatureUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gfu.sqlSave, gfu.mutation, gfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gfu *GameFeatureUpdate) SaveX(ctx context.Context) int {
	affected, err := gfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gfu *GameFeatureUpdate) Exec(ctx context.Context) error {
	_, err := gfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gfu *GameFeatureUpdate) ExecX(ctx context.Context) {
	if err := gfu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gfu *GameFeatureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(gamefeature.Table, gamefeature.Columns, sqlgraph.NewFieldSpec(gamefeature.FieldID, field.TypeInt))
	if ps := gfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gfu.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamefeature.FeaturesTable,
			Columns: []string{gamefeature.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gfu.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamefeature.FeaturesTable,
			Columns: []string{gamefeature.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gfu.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamefeature.GamesTable,
			Columns: []string{gamefeature.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gfu.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamefeature.GamesTable,
			Columns: []string{gamefeature.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gamefeature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gfu.mutation.done = true
	return n, nil
}

// GameFeatureUpdateOne is the builder for updating a single GameFeature entity.
type GameFeatureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameFeatureMutation
}

// SetFeaturesID sets the "features" edge to the Feature entity by ID.
func (gfuo *GameFeatureUpdateOne) SetFeaturesID(id int) *GameFeatureUpdateOne {
	gfuo.mutation.SetFeaturesID(id)
	return gfuo
}

// SetNillableFeaturesID sets the "features" edge to the Feature entity by ID if the given value is not nil.
func (gfuo *GameFeatureUpdateOne) SetNillableFeaturesID(id *int) *GameFeatureUpdateOne {
	if id != nil {
		gfuo = gfuo.SetFeaturesID(*id)
	}
	return gfuo
}

// SetFeatures sets the "features" edge to the Feature entity.
func (gfuo *GameFeatureUpdateOne) SetFeatures(f *Feature) *GameFeatureUpdateOne {
	return gfuo.SetFeaturesID(f.ID)
}

// SetGamesID sets the "games" edge to the Game entity by ID.
func (gfuo *GameFeatureUpdateOne) SetGamesID(id int) *GameFeatureUpdateOne {
	gfuo.mutation.SetGamesID(id)
	return gfuo
}

// SetNillableGamesID sets the "games" edge to the Game entity by ID if the given value is not nil.
func (gfuo *GameFeatureUpdateOne) SetNillableGamesID(id *int) *GameFeatureUpdateOne {
	if id != nil {
		gfuo = gfuo.SetGamesID(*id)
	}
	return gfuo
}

// SetGames sets the "games" edge to the Game entity.
func (gfuo *GameFeatureUpdateOne) SetGames(g *Game) *GameFeatureUpdateOne {
	return gfuo.SetGamesID(g.ID)
}

// Mutation returns the GameFeatureMutation object of the builder.
func (gfuo *GameFeatureUpdateOne) Mutation() *GameFeatureMutation {
	return gfuo.mutation
}

// ClearFeatures clears the "features" edge to the Feature entity.
func (gfuo *GameFeatureUpdateOne) ClearFeatures() *GameFeatureUpdateOne {
	gfuo.mutation.ClearFeatures()
	return gfuo
}

// ClearGames clears the "games" edge to the Game entity.
func (gfuo *GameFeatureUpdateOne) ClearGames() *GameFeatureUpdateOne {
	gfuo.mutation.ClearGames()
	return gfuo
}

// Where appends a list predicates to the GameFeatureUpdate builder.
func (gfuo *GameFeatureUpdateOne) Where(ps ...predicate.GameFeature) *GameFeatureUpdateOne {
	gfuo.mutation.Where(ps...)
	return gfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gfuo *GameFeatureUpdateOne) Select(field string, fields ...string) *GameFeatureUpdateOne {
	gfuo.fields = append([]string{field}, fields...)
	return gfuo
}

// Save executes the query and returns the updated GameFeature entity.
func (gfuo *GameFeatureUpdateOne) Save(ctx context.Context) (*GameFeature, error) {
	return withHooks(ctx, gfuo.sqlSave, gfuo.mutation, gfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gfuo *GameFeatureUpdateOne) SaveX(ctx context.Context) *GameFeature {
	node, err := gfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gfuo *GameFeatureUpdateOne) Exec(ctx context.Context) error {
	_, err := gfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gfuo *GameFeatureUpdateOne) ExecX(ctx context.Context) {
	if err := gfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gfuo *GameFeatureUpdateOne) sqlSave(ctx context.Context) (_node *GameFeature, err error) {
	_spec := sqlgraph.NewUpdateSpec(gamefeature.Table, gamefeature.Columns, sqlgraph.NewFieldSpec(gamefeature.FieldID, field.TypeInt))
	id, ok := gfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GameFeature.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gamefeature.FieldID)
		for _, f := range fields {
			if !gamefeature.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gamefeature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gfuo.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamefeature.FeaturesTable,
			Columns: []string{gamefeature.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gfuo.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamefeature.FeaturesTable,
			Columns: []string{gamefeature.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gfuo.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamefeature.GamesTable,
			Columns: []string{gamefeature.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gfuo.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamefeature.GamesTable,
			Columns: []string{gamefeature.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GameFeature{config: gfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gamefeature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gfuo.mutation.done = true
	return _node, nil
}
