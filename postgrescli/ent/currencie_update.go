// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencie"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencyversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
)

// CurrencieUpdate is the builder for updating Currencie entities.
type CurrencieUpdate struct {
	config
	hooks    []Hook
	mutation *CurrencieMutation
}

// Where appends a list predicates to the CurrencieUpdate builder.
func (cu *CurrencieUpdate) Where(ps ...predicate.Currencie) *CurrencieUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CurrencieUpdate) SetName(s string) *CurrencieUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CurrencieUpdate) SetNillableName(s *string) *CurrencieUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetSymbol sets the "symbol" field.
func (cu *CurrencieUpdate) SetSymbol(s string) *CurrencieUpdate {
	cu.mutation.SetSymbol(s)
	return cu
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (cu *CurrencieUpdate) SetNillableSymbol(s *string) *CurrencieUpdate {
	if s != nil {
		cu.SetSymbol(*s)
	}
	return cu
}

// SetThousandsSeparator sets the "thousands_separator" field.
func (cu *CurrencieUpdate) SetThousandsSeparator(s string) *CurrencieUpdate {
	cu.mutation.SetThousandsSeparator(s)
	return cu
}

// SetNillableThousandsSeparator sets the "thousands_separator" field if the given value is not nil.
func (cu *CurrencieUpdate) SetNillableThousandsSeparator(s *string) *CurrencieUpdate {
	if s != nil {
		cu.SetThousandsSeparator(*s)
	}
	return cu
}

// SetUnitsSeparator sets the "units_separator" field.
func (cu *CurrencieUpdate) SetUnitsSeparator(s string) *CurrencieUpdate {
	cu.mutation.SetUnitsSeparator(s)
	return cu
}

// SetNillableUnitsSeparator sets the "units_separator" field if the given value is not nil.
func (cu *CurrencieUpdate) SetNillableUnitsSeparator(s *string) *CurrencieUpdate {
	if s != nil {
		cu.SetUnitsSeparator(*s)
	}
	return cu
}

// SetSymbolPosition sets the "symbol_position" field.
func (cu *CurrencieUpdate) SetSymbolPosition(s string) *CurrencieUpdate {
	cu.mutation.SetSymbolPosition(s)
	return cu
}

// SetNillableSymbolPosition sets the "symbol_position" field if the given value is not nil.
func (cu *CurrencieUpdate) SetNillableSymbolPosition(s *string) *CurrencieUpdate {
	if s != nil {
		cu.SetSymbolPosition(*s)
	}
	return cu
}

// SetDenominator sets the "denominator" field.
func (cu *CurrencieUpdate) SetDenominator(i int) *CurrencieUpdate {
	cu.mutation.ResetDenominator()
	cu.mutation.SetDenominator(i)
	return cu
}

// SetNillableDenominator sets the "denominator" field if the given value is not nil.
func (cu *CurrencieUpdate) SetNillableDenominator(i *int) *CurrencieUpdate {
	if i != nil {
		cu.SetDenominator(*i)
	}
	return cu
}

// AddDenominator adds i to the "denominator" field.
func (cu *CurrencieUpdate) AddDenominator(i int) *CurrencieUpdate {
	cu.mutation.AddDenominator(i)
	return cu
}

// AddCurrencyVersionIDs adds the "currency_versions" edge to the CurrencyVersion entity by IDs.
func (cu *CurrencieUpdate) AddCurrencyVersionIDs(ids ...int) *CurrencieUpdate {
	cu.mutation.AddCurrencyVersionIDs(ids...)
	return cu
}

// AddCurrencyVersions adds the "currency_versions" edges to the CurrencyVersion entity.
func (cu *CurrencieUpdate) AddCurrencyVersions(c ...*CurrencyVersion) *CurrencieUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCurrencyVersionIDs(ids...)
}

// Mutation returns the CurrencieMutation object of the builder.
func (cu *CurrencieUpdate) Mutation() *CurrencieMutation {
	return cu.mutation
}

// ClearCurrencyVersions clears all "currency_versions" edges to the CurrencyVersion entity.
func (cu *CurrencieUpdate) ClearCurrencyVersions() *CurrencieUpdate {
	cu.mutation.ClearCurrencyVersions()
	return cu
}

// RemoveCurrencyVersionIDs removes the "currency_versions" edge to CurrencyVersion entities by IDs.
func (cu *CurrencieUpdate) RemoveCurrencyVersionIDs(ids ...int) *CurrencieUpdate {
	cu.mutation.RemoveCurrencyVersionIDs(ids...)
	return cu
}

// RemoveCurrencyVersions removes "currency_versions" edges to CurrencyVersion entities.
func (cu *CurrencieUpdate) RemoveCurrencyVersions(c ...*CurrencyVersion) *CurrencieUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCurrencyVersionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CurrencieUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CurrencieUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CurrencieUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CurrencieUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CurrencieUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(currencie.Table, currencie.Columns, sqlgraph.NewFieldSpec(currencie.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(currencie.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Symbol(); ok {
		_spec.SetField(currencie.FieldSymbol, field.TypeString, value)
	}
	if value, ok := cu.mutation.ThousandsSeparator(); ok {
		_spec.SetField(currencie.FieldThousandsSeparator, field.TypeString, value)
	}
	if value, ok := cu.mutation.UnitsSeparator(); ok {
		_spec.SetField(currencie.FieldUnitsSeparator, field.TypeString, value)
	}
	if value, ok := cu.mutation.SymbolPosition(); ok {
		_spec.SetField(currencie.FieldSymbolPosition, field.TypeString, value)
	}
	if value, ok := cu.mutation.Denominator(); ok {
		_spec.SetField(currencie.FieldDenominator, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedDenominator(); ok {
		_spec.AddField(currencie.FieldDenominator, field.TypeInt, value)
	}
	if cu.mutation.CurrencyVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencie.CurrencyVersionsTable,
			Columns: []string{currencie.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCurrencyVersionsIDs(); len(nodes) > 0 && !cu.mutation.CurrencyVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencie.CurrencyVersionsTable,
			Columns: []string{currencie.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CurrencyVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencie.CurrencyVersionsTable,
			Columns: []string{currencie.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{currencie.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CurrencieUpdateOne is the builder for updating a single Currencie entity.
type CurrencieUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CurrencieMutation
}

// SetName sets the "name" field.
func (cuo *CurrencieUpdateOne) SetName(s string) *CurrencieUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CurrencieUpdateOne) SetNillableName(s *string) *CurrencieUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetSymbol sets the "symbol" field.
func (cuo *CurrencieUpdateOne) SetSymbol(s string) *CurrencieUpdateOne {
	cuo.mutation.SetSymbol(s)
	return cuo
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (cuo *CurrencieUpdateOne) SetNillableSymbol(s *string) *CurrencieUpdateOne {
	if s != nil {
		cuo.SetSymbol(*s)
	}
	return cuo
}

// SetThousandsSeparator sets the "thousands_separator" field.
func (cuo *CurrencieUpdateOne) SetThousandsSeparator(s string) *CurrencieUpdateOne {
	cuo.mutation.SetThousandsSeparator(s)
	return cuo
}

// SetNillableThousandsSeparator sets the "thousands_separator" field if the given value is not nil.
func (cuo *CurrencieUpdateOne) SetNillableThousandsSeparator(s *string) *CurrencieUpdateOne {
	if s != nil {
		cuo.SetThousandsSeparator(*s)
	}
	return cuo
}

// SetUnitsSeparator sets the "units_separator" field.
func (cuo *CurrencieUpdateOne) SetUnitsSeparator(s string) *CurrencieUpdateOne {
	cuo.mutation.SetUnitsSeparator(s)
	return cuo
}

// SetNillableUnitsSeparator sets the "units_separator" field if the given value is not nil.
func (cuo *CurrencieUpdateOne) SetNillableUnitsSeparator(s *string) *CurrencieUpdateOne {
	if s != nil {
		cuo.SetUnitsSeparator(*s)
	}
	return cuo
}

// SetSymbolPosition sets the "symbol_position" field.
func (cuo *CurrencieUpdateOne) SetSymbolPosition(s string) *CurrencieUpdateOne {
	cuo.mutation.SetSymbolPosition(s)
	return cuo
}

// SetNillableSymbolPosition sets the "symbol_position" field if the given value is not nil.
func (cuo *CurrencieUpdateOne) SetNillableSymbolPosition(s *string) *CurrencieUpdateOne {
	if s != nil {
		cuo.SetSymbolPosition(*s)
	}
	return cuo
}

// SetDenominator sets the "denominator" field.
func (cuo *CurrencieUpdateOne) SetDenominator(i int) *CurrencieUpdateOne {
	cuo.mutation.ResetDenominator()
	cuo.mutation.SetDenominator(i)
	return cuo
}

// SetNillableDenominator sets the "denominator" field if the given value is not nil.
func (cuo *CurrencieUpdateOne) SetNillableDenominator(i *int) *CurrencieUpdateOne {
	if i != nil {
		cuo.SetDenominator(*i)
	}
	return cuo
}

// AddDenominator adds i to the "denominator" field.
func (cuo *CurrencieUpdateOne) AddDenominator(i int) *CurrencieUpdateOne {
	cuo.mutation.AddDenominator(i)
	return cuo
}

// AddCurrencyVersionIDs adds the "currency_versions" edge to the CurrencyVersion entity by IDs.
func (cuo *CurrencieUpdateOne) AddCurrencyVersionIDs(ids ...int) *CurrencieUpdateOne {
	cuo.mutation.AddCurrencyVersionIDs(ids...)
	return cuo
}

// AddCurrencyVersions adds the "currency_versions" edges to the CurrencyVersion entity.
func (cuo *CurrencieUpdateOne) AddCurrencyVersions(c ...*CurrencyVersion) *CurrencieUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCurrencyVersionIDs(ids...)
}

// Mutation returns the CurrencieMutation object of the builder.
func (cuo *CurrencieUpdateOne) Mutation() *CurrencieMutation {
	return cuo.mutation
}

// ClearCurrencyVersions clears all "currency_versions" edges to the CurrencyVersion entity.
func (cuo *CurrencieUpdateOne) ClearCurrencyVersions() *CurrencieUpdateOne {
	cuo.mutation.ClearCurrencyVersions()
	return cuo
}

// RemoveCurrencyVersionIDs removes the "currency_versions" edge to CurrencyVersion entities by IDs.
func (cuo *CurrencieUpdateOne) RemoveCurrencyVersionIDs(ids ...int) *CurrencieUpdateOne {
	cuo.mutation.RemoveCurrencyVersionIDs(ids...)
	return cuo
}

// RemoveCurrencyVersions removes "currency_versions" edges to CurrencyVersion entities.
func (cuo *CurrencieUpdateOne) RemoveCurrencyVersions(c ...*CurrencyVersion) *CurrencieUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCurrencyVersionIDs(ids...)
}

// Where appends a list predicates to the CurrencieUpdate builder.
func (cuo *CurrencieUpdateOne) Where(ps ...predicate.Currencie) *CurrencieUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CurrencieUpdateOne) Select(field string, fields ...string) *CurrencieUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Currencie entity.
func (cuo *CurrencieUpdateOne) Save(ctx context.Context) (*Currencie, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CurrencieUpdateOne) SaveX(ctx context.Context) *Currencie {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CurrencieUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CurrencieUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CurrencieUpdateOne) sqlSave(ctx context.Context) (_node *Currencie, err error) {
	_spec := sqlgraph.NewUpdateSpec(currencie.Table, currencie.Columns, sqlgraph.NewFieldSpec(currencie.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Currencie.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, currencie.FieldID)
		for _, f := range fields {
			if !currencie.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != currencie.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(currencie.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Symbol(); ok {
		_spec.SetField(currencie.FieldSymbol, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ThousandsSeparator(); ok {
		_spec.SetField(currencie.FieldThousandsSeparator, field.TypeString, value)
	}
	if value, ok := cuo.mutation.UnitsSeparator(); ok {
		_spec.SetField(currencie.FieldUnitsSeparator, field.TypeString, value)
	}
	if value, ok := cuo.mutation.SymbolPosition(); ok {
		_spec.SetField(currencie.FieldSymbolPosition, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Denominator(); ok {
		_spec.SetField(currencie.FieldDenominator, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedDenominator(); ok {
		_spec.AddField(currencie.FieldDenominator, field.TypeInt, value)
	}
	if cuo.mutation.CurrencyVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencie.CurrencyVersionsTable,
			Columns: []string{currencie.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCurrencyVersionsIDs(); len(nodes) > 0 && !cuo.mutation.CurrencyVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencie.CurrencyVersionsTable,
			Columns: []string{currencie.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CurrencyVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencie.CurrencyVersionsTable,
			Columns: []string{currencie.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Currencie{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{currencie.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
