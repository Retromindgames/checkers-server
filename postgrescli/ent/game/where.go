// Code generated by ent, DO NOT EDIT.

package game

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldName, v))
}

// ExternalID applies equality check predicate on the "external_id" field. It's identical to ExternalIDEQ.
func ExternalID(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldExternalID, v))
}

// TrademarkName applies equality check predicate on the "trademark_name" field. It's identical to TrademarkNameEQ.
func TrademarkName(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldTrademarkName, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Game {
	return predicate.Game(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Game {
	return predicate.Game(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Game {
	return predicate.Game(sql.FieldContainsFold(FieldName, v))
}

// ExternalIDEQ applies the EQ predicate on the "external_id" field.
func ExternalIDEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldExternalID, v))
}

// ExternalIDNEQ applies the NEQ predicate on the "external_id" field.
func ExternalIDNEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldExternalID, v))
}

// ExternalIDIn applies the In predicate on the "external_id" field.
func ExternalIDIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldExternalID, vs...))
}

// ExternalIDNotIn applies the NotIn predicate on the "external_id" field.
func ExternalIDNotIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldExternalID, vs...))
}

// ExternalIDGT applies the GT predicate on the "external_id" field.
func ExternalIDGT(v string) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldExternalID, v))
}

// ExternalIDGTE applies the GTE predicate on the "external_id" field.
func ExternalIDGTE(v string) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldExternalID, v))
}

// ExternalIDLT applies the LT predicate on the "external_id" field.
func ExternalIDLT(v string) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldExternalID, v))
}

// ExternalIDLTE applies the LTE predicate on the "external_id" field.
func ExternalIDLTE(v string) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldExternalID, v))
}

// ExternalIDContains applies the Contains predicate on the "external_id" field.
func ExternalIDContains(v string) predicate.Game {
	return predicate.Game(sql.FieldContains(FieldExternalID, v))
}

// ExternalIDHasPrefix applies the HasPrefix predicate on the "external_id" field.
func ExternalIDHasPrefix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasPrefix(FieldExternalID, v))
}

// ExternalIDHasSuffix applies the HasSuffix predicate on the "external_id" field.
func ExternalIDHasSuffix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasSuffix(FieldExternalID, v))
}

// ExternalIDIsNil applies the IsNil predicate on the "external_id" field.
func ExternalIDIsNil() predicate.Game {
	return predicate.Game(sql.FieldIsNull(FieldExternalID))
}

// ExternalIDNotNil applies the NotNil predicate on the "external_id" field.
func ExternalIDNotNil() predicate.Game {
	return predicate.Game(sql.FieldNotNull(FieldExternalID))
}

// ExternalIDEqualFold applies the EqualFold predicate on the "external_id" field.
func ExternalIDEqualFold(v string) predicate.Game {
	return predicate.Game(sql.FieldEqualFold(FieldExternalID, v))
}

// ExternalIDContainsFold applies the ContainsFold predicate on the "external_id" field.
func ExternalIDContainsFold(v string) predicate.Game {
	return predicate.Game(sql.FieldContainsFold(FieldExternalID, v))
}

// TrademarkNameEQ applies the EQ predicate on the "trademark_name" field.
func TrademarkNameEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldTrademarkName, v))
}

// TrademarkNameNEQ applies the NEQ predicate on the "trademark_name" field.
func TrademarkNameNEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldTrademarkName, v))
}

// TrademarkNameIn applies the In predicate on the "trademark_name" field.
func TrademarkNameIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldTrademarkName, vs...))
}

// TrademarkNameNotIn applies the NotIn predicate on the "trademark_name" field.
func TrademarkNameNotIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldTrademarkName, vs...))
}

// TrademarkNameGT applies the GT predicate on the "trademark_name" field.
func TrademarkNameGT(v string) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldTrademarkName, v))
}

// TrademarkNameGTE applies the GTE predicate on the "trademark_name" field.
func TrademarkNameGTE(v string) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldTrademarkName, v))
}

// TrademarkNameLT applies the LT predicate on the "trademark_name" field.
func TrademarkNameLT(v string) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldTrademarkName, v))
}

// TrademarkNameLTE applies the LTE predicate on the "trademark_name" field.
func TrademarkNameLTE(v string) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldTrademarkName, v))
}

// TrademarkNameContains applies the Contains predicate on the "trademark_name" field.
func TrademarkNameContains(v string) predicate.Game {
	return predicate.Game(sql.FieldContains(FieldTrademarkName, v))
}

// TrademarkNameHasPrefix applies the HasPrefix predicate on the "trademark_name" field.
func TrademarkNameHasPrefix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasPrefix(FieldTrademarkName, v))
}

// TrademarkNameHasSuffix applies the HasSuffix predicate on the "trademark_name" field.
func TrademarkNameHasSuffix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasSuffix(FieldTrademarkName, v))
}

// TrademarkNameEqualFold applies the EqualFold predicate on the "trademark_name" field.
func TrademarkNameEqualFold(v string) predicate.Game {
	return predicate.Game(sql.FieldEqualFold(FieldTrademarkName, v))
}

// TrademarkNameContainsFold applies the ContainsFold predicate on the "trademark_name" field.
func TrademarkNameContainsFold(v string) predicate.Game {
	return predicate.Game(sql.FieldContainsFold(FieldTrademarkName, v))
}

// HasStudio applies the HasEdge predicate on the "studio" edge.
func HasStudio() predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StudioTable, StudioColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStudioWith applies the HasEdge predicate on the "studio" edge with a given conditions (other predicates).
func HasStudioWith(preds ...predicate.Studio) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := newStudioStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGameType applies the HasEdge predicate on the "game_type" edge.
func HasGameType() predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GameTypeTable, GameTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGameTypeWith applies the HasEdge predicate on the "game_type" edge with a given conditions (other predicates).
func HasGameTypeWith(preds ...predicate.GameType) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := newGameTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSerie applies the HasEdge predicate on the "serie" edge.
func HasSerie() predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SerieTable, SerieColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSerieWith applies the HasEdge predicate on the "serie" edge with a given conditions (other predicates).
func HasSerieWith(preds ...predicate.Serie) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := newSerieStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGameFeatures applies the HasEdge predicate on the "game_features" edge.
func HasGameFeatures() predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GameFeaturesTable, GameFeaturesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGameFeaturesWith applies the HasEdge predicate on the "game_features" edge with a given conditions (other predicates).
func HasGameFeaturesWith(preds ...predicate.GameFeature) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := newGameFeaturesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGameVersions applies the HasEdge predicate on the "game_versions" edge.
func HasGameVersions() predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GameVersionsTable, GameVersionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGameVersionsWith applies the HasEdge predicate on the "game_versions" edge with a given conditions (other predicates).
func HasGameVersionsWith(preds ...predicate.GameVersion) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := newGameVersionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGameConfigs applies the HasEdge predicate on the "game_configs" edge.
func HasGameConfigs() predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GameConfigsTable, GameConfigsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGameConfigsWith applies the HasEdge predicate on the "game_configs" edge with a given conditions (other predicates).
func HasGameConfigsWith(preds ...predicate.GameConfig) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := newGameConfigsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSessions applies the HasEdge predicate on the "sessions" edge.
func HasSessions() predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSessionsWith applies the HasEdge predicate on the "sessions" edge with a given conditions (other predicates).
func HasSessionsWith(preds ...predicate.Session) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := newSessionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Game) predicate.Game {
	return predicate.Game(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Game) predicate.Game {
	return predicate.Game(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Game) predicate.Game {
	return predicate.Game(sql.NotPredicates(p))
}
