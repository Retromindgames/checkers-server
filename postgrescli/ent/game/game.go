// Code generated by ent, DO NOT EDIT.

package game

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the game type in the database.
	Label = "game"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// FieldTrademarkName holds the string denoting the trademark_name field in the database.
	FieldTrademarkName = "trademark_name"
	// EdgeStudio holds the string denoting the studio edge name in mutations.
	EdgeStudio = "studio"
	// EdgeGameType holds the string denoting the game_type edge name in mutations.
	EdgeGameType = "game_type"
	// EdgeSerie holds the string denoting the serie edge name in mutations.
	EdgeSerie = "serie"
	// EdgeGameFeatures holds the string denoting the game_features edge name in mutations.
	EdgeGameFeatures = "game_features"
	// EdgeGameVersions holds the string denoting the game_versions edge name in mutations.
	EdgeGameVersions = "game_versions"
	// EdgeGameConfigs holds the string denoting the game_configs edge name in mutations.
	EdgeGameConfigs = "game_configs"
	// EdgeSessions holds the string denoting the sessions edge name in mutations.
	EdgeSessions = "sessions"
	// Table holds the table name of the game in the database.
	Table = "games"
	// StudioTable is the table that holds the studio relation/edge.
	StudioTable = "games"
	// StudioInverseTable is the table name for the Studio entity.
	// It exists in this package in order to avoid circular dependency with the "studio" package.
	StudioInverseTable = "studios"
	// StudioColumn is the table column denoting the studio relation/edge.
	StudioColumn = "studio_games"
	// GameTypeTable is the table that holds the game_type relation/edge.
	GameTypeTable = "games"
	// GameTypeInverseTable is the table name for the GameType entity.
	// It exists in this package in order to avoid circular dependency with the "gametype" package.
	GameTypeInverseTable = "game_types"
	// GameTypeColumn is the table column denoting the game_type relation/edge.
	GameTypeColumn = "game_type_games"
	// SerieTable is the table that holds the serie relation/edge.
	SerieTable = "games"
	// SerieInverseTable is the table name for the Serie entity.
	// It exists in this package in order to avoid circular dependency with the "serie" package.
	SerieInverseTable = "series"
	// SerieColumn is the table column denoting the serie relation/edge.
	SerieColumn = "serie_games"
	// GameFeaturesTable is the table that holds the game_features relation/edge.
	GameFeaturesTable = "game_features"
	// GameFeaturesInverseTable is the table name for the GameFeature entity.
	// It exists in this package in order to avoid circular dependency with the "gamefeature" package.
	GameFeaturesInverseTable = "game_features"
	// GameFeaturesColumn is the table column denoting the game_features relation/edge.
	GameFeaturesColumn = "game_game_features"
	// GameVersionsTable is the table that holds the game_versions relation/edge.
	GameVersionsTable = "game_versions"
	// GameVersionsInverseTable is the table name for the GameVersion entity.
	// It exists in this package in order to avoid circular dependency with the "gameversion" package.
	GameVersionsInverseTable = "game_versions"
	// GameVersionsColumn is the table column denoting the game_versions relation/edge.
	GameVersionsColumn = "game_game_versions"
	// GameConfigsTable is the table that holds the game_configs relation/edge.
	GameConfigsTable = "game_configs"
	// GameConfigsInverseTable is the table name for the GameConfig entity.
	// It exists in this package in order to avoid circular dependency with the "gameconfig" package.
	GameConfigsInverseTable = "game_configs"
	// GameConfigsColumn is the table column denoting the game_configs relation/edge.
	GameConfigsColumn = "game_game_configs"
	// SessionsTable is the table that holds the sessions relation/edge.
	SessionsTable = "sessions"
	// SessionsInverseTable is the table name for the Session entity.
	// It exists in this package in order to avoid circular dependency with the "session" package.
	SessionsInverseTable = "sessions"
	// SessionsColumn is the table column denoting the sessions relation/edge.
	SessionsColumn = "game_sessions"
)

// Columns holds all SQL columns for game fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldExternalID,
	FieldTrademarkName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "games"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"game_type_games",
	"serie_games",
	"studio_games",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Game queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByExternalID orders the results by the external_id field.
func ByExternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalID, opts...).ToFunc()
}

// ByTrademarkName orders the results by the trademark_name field.
func ByTrademarkName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrademarkName, opts...).ToFunc()
}

// ByStudioField orders the results by studio field.
func ByStudioField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStudioStep(), sql.OrderByField(field, opts...))
	}
}

// ByGameTypeField orders the results by game_type field.
func ByGameTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameTypeStep(), sql.OrderByField(field, opts...))
	}
}

// BySerieField orders the results by serie field.
func BySerieField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSerieStep(), sql.OrderByField(field, opts...))
	}
}

// ByGameFeaturesCount orders the results by game_features count.
func ByGameFeaturesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGameFeaturesStep(), opts...)
	}
}

// ByGameFeatures orders the results by game_features terms.
func ByGameFeatures(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameFeaturesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGameVersionsCount orders the results by game_versions count.
func ByGameVersionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGameVersionsStep(), opts...)
	}
}

// ByGameVersions orders the results by game_versions terms.
func ByGameVersions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameVersionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGameConfigsCount orders the results by game_configs count.
func ByGameConfigsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGameConfigsStep(), opts...)
	}
}

// ByGameConfigs orders the results by game_configs terms.
func ByGameConfigs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameConfigsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySessionsCount orders the results by sessions count.
func BySessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSessionsStep(), opts...)
	}
}

// BySessions orders the results by sessions terms.
func BySessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStudioStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StudioInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StudioTable, StudioColumn),
	)
}
func newGameTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GameTypeTable, GameTypeColumn),
	)
}
func newSerieStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SerieInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SerieTable, SerieColumn),
	)
}
func newGameFeaturesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameFeaturesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GameFeaturesTable, GameFeaturesColumn),
	)
}
func newGameVersionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameVersionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GameVersionsTable, GameVersionsColumn),
	)
}
func newGameConfigsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameConfigsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GameConfigsTable, GameConfigsColumn),
	)
}
func newSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
	)
}
