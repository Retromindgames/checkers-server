// Code generated by ent, DO NOT EDIT.

package round

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the round type in the database.
	Label = "round"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldOperator holds the string denoting the operator field in the database.
	FieldOperator = "operator"
	// FieldReels holds the string denoting the reels field in the database.
	FieldReels = "reels"
	// FieldMultipliers holds the string denoting the multipliers field in the database.
	FieldMultipliers = "multipliers"
	// FieldBonusType holds the string denoting the bonus_type field in the database.
	FieldBonusType = "bonus_type"
	// FieldBonusSymbol holds the string denoting the bonus_symbol field in the database.
	FieldBonusSymbol = "bonus_symbol"
	// FieldBonusMultiplier holds the string denoting the bonus_multiplier field in the database.
	FieldBonusMultiplier = "bonus_multiplier"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldRoundType holds the string denoting the round_type field in the database.
	FieldRoundType = "round_type"
	// FieldPlay holds the string denoting the play field in the database.
	FieldPlay = "play"
	// FieldFreeSpinsRemaining holds the string denoting the free_spins_remaining field in the database.
	FieldFreeSpinsRemaining = "free_spins_remaining"
	// FieldMathOutput holds the string denoting the math_output field in the database.
	FieldMathOutput = "math_output"
	// FieldGameService holds the string denoting the game_service field in the database.
	FieldGameService = "game_service"
	// FieldFreeSpinsCount holds the string denoting the free_spins_count field in the database.
	FieldFreeSpinsCount = "free_spins_count"
	// FieldAnteBet holds the string denoting the ante_bet field in the database.
	FieldAnteBet = "ante_bet"
	// FieldBuyBonus holds the string denoting the buy_bonus field in the database.
	FieldBuyBonus = "buy_bonus"
	// FieldCharacter holds the string denoting the character field in the database.
	FieldCharacter = "character"
	// EdgeTransactions holds the string denoting the transactions edge name in mutations.
	EdgeTransactions = "transactions"
	// Table holds the table name of the round in the database.
	Table = "rounds"
	// TransactionsTable is the table that holds the transactions relation/edge.
	TransactionsTable = "transactions"
	// TransactionsInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	TransactionsInverseTable = "transactions"
	// TransactionsColumn is the table column denoting the transactions relation/edge.
	TransactionsColumn = "round_transactions"
)

// Columns holds all SQL columns for round fields.
var Columns = []string{
	FieldID,
	FieldPlatform,
	FieldOperator,
	FieldReels,
	FieldMultipliers,
	FieldBonusType,
	FieldBonusSymbol,
	FieldBonusMultiplier,
	FieldTimestamp,
	FieldRoundType,
	FieldPlay,
	FieldFreeSpinsRemaining,
	FieldMathOutput,
	FieldGameService,
	FieldFreeSpinsCount,
	FieldAnteBet,
	FieldBuyBonus,
	FieldCharacter,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTimestamp holds the default value on creation for the "timestamp" field.
	DefaultTimestamp func() time.Time
)

// OrderOption defines the ordering options for the Round queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPlatform orders the results by the platform field.
func ByPlatform(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatform, opts...).ToFunc()
}

// ByOperator orders the results by the operator field.
func ByOperator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperator, opts...).ToFunc()
}

// ByBonusType orders the results by the bonus_type field.
func ByBonusType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBonusType, opts...).ToFunc()
}

// ByBonusSymbol orders the results by the bonus_symbol field.
func ByBonusSymbol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBonusSymbol, opts...).ToFunc()
}

// ByBonusMultiplier orders the results by the bonus_multiplier field.
func ByBonusMultiplier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBonusMultiplier, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByRoundType orders the results by the round_type field.
func ByRoundType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoundType, opts...).ToFunc()
}

// ByFreeSpinsRemaining orders the results by the free_spins_remaining field.
func ByFreeSpinsRemaining(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFreeSpinsRemaining, opts...).ToFunc()
}

// ByMathOutput orders the results by the math_output field.
func ByMathOutput(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMathOutput, opts...).ToFunc()
}

// ByFreeSpinsCount orders the results by the free_spins_count field.
func ByFreeSpinsCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFreeSpinsCount, opts...).ToFunc()
}

// ByAnteBet orders the results by the ante_bet field.
func ByAnteBet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnteBet, opts...).ToFunc()
}

// ByBuyBonus orders the results by the buy_bonus field.
func ByBuyBonus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuyBonus, opts...).ToFunc()
}

// ByCharacter orders the results by the character field.
func ByCharacter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCharacter, opts...).ToFunc()
}

// ByTransactionsCount orders the results by transactions count.
func ByTransactionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTransactionsStep(), opts...)
	}
}

// ByTransactions orders the results by transactions terms.
func ByTransactions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransactionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTransactionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransactionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TransactionsTable, TransactionsColumn),
	)
}
