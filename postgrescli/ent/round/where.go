// Code generated by ent, DO NOT EDIT.

package round

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldID, id))
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldPlatform, v))
}

// Operator applies equality check predicate on the "operator" field. It's identical to OperatorEQ.
func Operator(v string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldOperator, v))
}

// BonusType applies equality check predicate on the "bonus_type" field. It's identical to BonusTypeEQ.
func BonusType(v string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldBonusType, v))
}

// BonusSymbol applies equality check predicate on the "bonus_symbol" field. It's identical to BonusSymbolEQ.
func BonusSymbol(v int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldBonusSymbol, v))
}

// BonusMultiplier applies equality check predicate on the "bonus_multiplier" field. It's identical to BonusMultiplierEQ.
func BonusMultiplier(v int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldBonusMultiplier, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldTimestamp, v))
}

// RoundType applies equality check predicate on the "round_type" field. It's identical to RoundTypeEQ.
func RoundType(v string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldRoundType, v))
}

// FreeSpinsRemaining applies equality check predicate on the "free_spins_remaining" field. It's identical to FreeSpinsRemainingEQ.
func FreeSpinsRemaining(v int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldFreeSpinsRemaining, v))
}

// MathOutput applies equality check predicate on the "math_output" field. It's identical to MathOutputEQ.
func MathOutput(v string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldMathOutput, v))
}

// FreeSpinsCount applies equality check predicate on the "free_spins_count" field. It's identical to FreeSpinsCountEQ.
func FreeSpinsCount(v int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldFreeSpinsCount, v))
}

// AnteBet applies equality check predicate on the "ante_bet" field. It's identical to AnteBetEQ.
func AnteBet(v bool) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldAnteBet, v))
}

// BuyBonus applies equality check predicate on the "buy_bonus" field. It's identical to BuyBonusEQ.
func BuyBonus(v string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldBuyBonus, v))
}

// Character applies equality check predicate on the "character" field. It's identical to CharacterEQ.
func Character(v int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldCharacter, v))
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldPlatform, v))
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldPlatform, v))
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldPlatform, vs...))
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldPlatform, vs...))
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldPlatform, v))
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldPlatform, v))
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldPlatform, v))
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldPlatform, v))
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.Round {
	return predicate.Round(sql.FieldContains(FieldPlatform, v))
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.Round {
	return predicate.Round(sql.FieldHasPrefix(FieldPlatform, v))
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.Round {
	return predicate.Round(sql.FieldHasSuffix(FieldPlatform, v))
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.Round {
	return predicate.Round(sql.FieldEqualFold(FieldPlatform, v))
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.Round {
	return predicate.Round(sql.FieldContainsFold(FieldPlatform, v))
}

// OperatorEQ applies the EQ predicate on the "operator" field.
func OperatorEQ(v string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldOperator, v))
}

// OperatorNEQ applies the NEQ predicate on the "operator" field.
func OperatorNEQ(v string) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldOperator, v))
}

// OperatorIn applies the In predicate on the "operator" field.
func OperatorIn(vs ...string) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldOperator, vs...))
}

// OperatorNotIn applies the NotIn predicate on the "operator" field.
func OperatorNotIn(vs ...string) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldOperator, vs...))
}

// OperatorGT applies the GT predicate on the "operator" field.
func OperatorGT(v string) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldOperator, v))
}

// OperatorGTE applies the GTE predicate on the "operator" field.
func OperatorGTE(v string) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldOperator, v))
}

// OperatorLT applies the LT predicate on the "operator" field.
func OperatorLT(v string) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldOperator, v))
}

// OperatorLTE applies the LTE predicate on the "operator" field.
func OperatorLTE(v string) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldOperator, v))
}

// OperatorContains applies the Contains predicate on the "operator" field.
func OperatorContains(v string) predicate.Round {
	return predicate.Round(sql.FieldContains(FieldOperator, v))
}

// OperatorHasPrefix applies the HasPrefix predicate on the "operator" field.
func OperatorHasPrefix(v string) predicate.Round {
	return predicate.Round(sql.FieldHasPrefix(FieldOperator, v))
}

// OperatorHasSuffix applies the HasSuffix predicate on the "operator" field.
func OperatorHasSuffix(v string) predicate.Round {
	return predicate.Round(sql.FieldHasSuffix(FieldOperator, v))
}

// OperatorEqualFold applies the EqualFold predicate on the "operator" field.
func OperatorEqualFold(v string) predicate.Round {
	return predicate.Round(sql.FieldEqualFold(FieldOperator, v))
}

// OperatorContainsFold applies the ContainsFold predicate on the "operator" field.
func OperatorContainsFold(v string) predicate.Round {
	return predicate.Round(sql.FieldContainsFold(FieldOperator, v))
}

// ReelsIsNil applies the IsNil predicate on the "reels" field.
func ReelsIsNil() predicate.Round {
	return predicate.Round(sql.FieldIsNull(FieldReels))
}

// ReelsNotNil applies the NotNil predicate on the "reels" field.
func ReelsNotNil() predicate.Round {
	return predicate.Round(sql.FieldNotNull(FieldReels))
}

// MultipliersIsNil applies the IsNil predicate on the "multipliers" field.
func MultipliersIsNil() predicate.Round {
	return predicate.Round(sql.FieldIsNull(FieldMultipliers))
}

// MultipliersNotNil applies the NotNil predicate on the "multipliers" field.
func MultipliersNotNil() predicate.Round {
	return predicate.Round(sql.FieldNotNull(FieldMultipliers))
}

// BonusTypeEQ applies the EQ predicate on the "bonus_type" field.
func BonusTypeEQ(v string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldBonusType, v))
}

// BonusTypeNEQ applies the NEQ predicate on the "bonus_type" field.
func BonusTypeNEQ(v string) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldBonusType, v))
}

// BonusTypeIn applies the In predicate on the "bonus_type" field.
func BonusTypeIn(vs ...string) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldBonusType, vs...))
}

// BonusTypeNotIn applies the NotIn predicate on the "bonus_type" field.
func BonusTypeNotIn(vs ...string) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldBonusType, vs...))
}

// BonusTypeGT applies the GT predicate on the "bonus_type" field.
func BonusTypeGT(v string) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldBonusType, v))
}

// BonusTypeGTE applies the GTE predicate on the "bonus_type" field.
func BonusTypeGTE(v string) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldBonusType, v))
}

// BonusTypeLT applies the LT predicate on the "bonus_type" field.
func BonusTypeLT(v string) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldBonusType, v))
}

// BonusTypeLTE applies the LTE predicate on the "bonus_type" field.
func BonusTypeLTE(v string) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldBonusType, v))
}

// BonusTypeContains applies the Contains predicate on the "bonus_type" field.
func BonusTypeContains(v string) predicate.Round {
	return predicate.Round(sql.FieldContains(FieldBonusType, v))
}

// BonusTypeHasPrefix applies the HasPrefix predicate on the "bonus_type" field.
func BonusTypeHasPrefix(v string) predicate.Round {
	return predicate.Round(sql.FieldHasPrefix(FieldBonusType, v))
}

// BonusTypeHasSuffix applies the HasSuffix predicate on the "bonus_type" field.
func BonusTypeHasSuffix(v string) predicate.Round {
	return predicate.Round(sql.FieldHasSuffix(FieldBonusType, v))
}

// BonusTypeIsNil applies the IsNil predicate on the "bonus_type" field.
func BonusTypeIsNil() predicate.Round {
	return predicate.Round(sql.FieldIsNull(FieldBonusType))
}

// BonusTypeNotNil applies the NotNil predicate on the "bonus_type" field.
func BonusTypeNotNil() predicate.Round {
	return predicate.Round(sql.FieldNotNull(FieldBonusType))
}

// BonusTypeEqualFold applies the EqualFold predicate on the "bonus_type" field.
func BonusTypeEqualFold(v string) predicate.Round {
	return predicate.Round(sql.FieldEqualFold(FieldBonusType, v))
}

// BonusTypeContainsFold applies the ContainsFold predicate on the "bonus_type" field.
func BonusTypeContainsFold(v string) predicate.Round {
	return predicate.Round(sql.FieldContainsFold(FieldBonusType, v))
}

// BonusSymbolEQ applies the EQ predicate on the "bonus_symbol" field.
func BonusSymbolEQ(v int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldBonusSymbol, v))
}

// BonusSymbolNEQ applies the NEQ predicate on the "bonus_symbol" field.
func BonusSymbolNEQ(v int) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldBonusSymbol, v))
}

// BonusSymbolIn applies the In predicate on the "bonus_symbol" field.
func BonusSymbolIn(vs ...int) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldBonusSymbol, vs...))
}

// BonusSymbolNotIn applies the NotIn predicate on the "bonus_symbol" field.
func BonusSymbolNotIn(vs ...int) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldBonusSymbol, vs...))
}

// BonusSymbolGT applies the GT predicate on the "bonus_symbol" field.
func BonusSymbolGT(v int) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldBonusSymbol, v))
}

// BonusSymbolGTE applies the GTE predicate on the "bonus_symbol" field.
func BonusSymbolGTE(v int) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldBonusSymbol, v))
}

// BonusSymbolLT applies the LT predicate on the "bonus_symbol" field.
func BonusSymbolLT(v int) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldBonusSymbol, v))
}

// BonusSymbolLTE applies the LTE predicate on the "bonus_symbol" field.
func BonusSymbolLTE(v int) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldBonusSymbol, v))
}

// BonusSymbolIsNil applies the IsNil predicate on the "bonus_symbol" field.
func BonusSymbolIsNil() predicate.Round {
	return predicate.Round(sql.FieldIsNull(FieldBonusSymbol))
}

// BonusSymbolNotNil applies the NotNil predicate on the "bonus_symbol" field.
func BonusSymbolNotNil() predicate.Round {
	return predicate.Round(sql.FieldNotNull(FieldBonusSymbol))
}

// BonusMultiplierEQ applies the EQ predicate on the "bonus_multiplier" field.
func BonusMultiplierEQ(v int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldBonusMultiplier, v))
}

// BonusMultiplierNEQ applies the NEQ predicate on the "bonus_multiplier" field.
func BonusMultiplierNEQ(v int) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldBonusMultiplier, v))
}

// BonusMultiplierIn applies the In predicate on the "bonus_multiplier" field.
func BonusMultiplierIn(vs ...int) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldBonusMultiplier, vs...))
}

// BonusMultiplierNotIn applies the NotIn predicate on the "bonus_multiplier" field.
func BonusMultiplierNotIn(vs ...int) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldBonusMultiplier, vs...))
}

// BonusMultiplierGT applies the GT predicate on the "bonus_multiplier" field.
func BonusMultiplierGT(v int) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldBonusMultiplier, v))
}

// BonusMultiplierGTE applies the GTE predicate on the "bonus_multiplier" field.
func BonusMultiplierGTE(v int) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldBonusMultiplier, v))
}

// BonusMultiplierLT applies the LT predicate on the "bonus_multiplier" field.
func BonusMultiplierLT(v int) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldBonusMultiplier, v))
}

// BonusMultiplierLTE applies the LTE predicate on the "bonus_multiplier" field.
func BonusMultiplierLTE(v int) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldBonusMultiplier, v))
}

// BonusMultiplierIsNil applies the IsNil predicate on the "bonus_multiplier" field.
func BonusMultiplierIsNil() predicate.Round {
	return predicate.Round(sql.FieldIsNull(FieldBonusMultiplier))
}

// BonusMultiplierNotNil applies the NotNil predicate on the "bonus_multiplier" field.
func BonusMultiplierNotNil() predicate.Round {
	return predicate.Round(sql.FieldNotNull(FieldBonusMultiplier))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldTimestamp, v))
}

// RoundTypeEQ applies the EQ predicate on the "round_type" field.
func RoundTypeEQ(v string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldRoundType, v))
}

// RoundTypeNEQ applies the NEQ predicate on the "round_type" field.
func RoundTypeNEQ(v string) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldRoundType, v))
}

// RoundTypeIn applies the In predicate on the "round_type" field.
func RoundTypeIn(vs ...string) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldRoundType, vs...))
}

// RoundTypeNotIn applies the NotIn predicate on the "round_type" field.
func RoundTypeNotIn(vs ...string) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldRoundType, vs...))
}

// RoundTypeGT applies the GT predicate on the "round_type" field.
func RoundTypeGT(v string) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldRoundType, v))
}

// RoundTypeGTE applies the GTE predicate on the "round_type" field.
func RoundTypeGTE(v string) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldRoundType, v))
}

// RoundTypeLT applies the LT predicate on the "round_type" field.
func RoundTypeLT(v string) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldRoundType, v))
}

// RoundTypeLTE applies the LTE predicate on the "round_type" field.
func RoundTypeLTE(v string) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldRoundType, v))
}

// RoundTypeContains applies the Contains predicate on the "round_type" field.
func RoundTypeContains(v string) predicate.Round {
	return predicate.Round(sql.FieldContains(FieldRoundType, v))
}

// RoundTypeHasPrefix applies the HasPrefix predicate on the "round_type" field.
func RoundTypeHasPrefix(v string) predicate.Round {
	return predicate.Round(sql.FieldHasPrefix(FieldRoundType, v))
}

// RoundTypeHasSuffix applies the HasSuffix predicate on the "round_type" field.
func RoundTypeHasSuffix(v string) predicate.Round {
	return predicate.Round(sql.FieldHasSuffix(FieldRoundType, v))
}

// RoundTypeIsNil applies the IsNil predicate on the "round_type" field.
func RoundTypeIsNil() predicate.Round {
	return predicate.Round(sql.FieldIsNull(FieldRoundType))
}

// RoundTypeNotNil applies the NotNil predicate on the "round_type" field.
func RoundTypeNotNil() predicate.Round {
	return predicate.Round(sql.FieldNotNull(FieldRoundType))
}

// RoundTypeEqualFold applies the EqualFold predicate on the "round_type" field.
func RoundTypeEqualFold(v string) predicate.Round {
	return predicate.Round(sql.FieldEqualFold(FieldRoundType, v))
}

// RoundTypeContainsFold applies the ContainsFold predicate on the "round_type" field.
func RoundTypeContainsFold(v string) predicate.Round {
	return predicate.Round(sql.FieldContainsFold(FieldRoundType, v))
}

// FreeSpinsRemainingEQ applies the EQ predicate on the "free_spins_remaining" field.
func FreeSpinsRemainingEQ(v int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldFreeSpinsRemaining, v))
}

// FreeSpinsRemainingNEQ applies the NEQ predicate on the "free_spins_remaining" field.
func FreeSpinsRemainingNEQ(v int) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldFreeSpinsRemaining, v))
}

// FreeSpinsRemainingIn applies the In predicate on the "free_spins_remaining" field.
func FreeSpinsRemainingIn(vs ...int) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldFreeSpinsRemaining, vs...))
}

// FreeSpinsRemainingNotIn applies the NotIn predicate on the "free_spins_remaining" field.
func FreeSpinsRemainingNotIn(vs ...int) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldFreeSpinsRemaining, vs...))
}

// FreeSpinsRemainingGT applies the GT predicate on the "free_spins_remaining" field.
func FreeSpinsRemainingGT(v int) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldFreeSpinsRemaining, v))
}

// FreeSpinsRemainingGTE applies the GTE predicate on the "free_spins_remaining" field.
func FreeSpinsRemainingGTE(v int) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldFreeSpinsRemaining, v))
}

// FreeSpinsRemainingLT applies the LT predicate on the "free_spins_remaining" field.
func FreeSpinsRemainingLT(v int) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldFreeSpinsRemaining, v))
}

// FreeSpinsRemainingLTE applies the LTE predicate on the "free_spins_remaining" field.
func FreeSpinsRemainingLTE(v int) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldFreeSpinsRemaining, v))
}

// FreeSpinsRemainingIsNil applies the IsNil predicate on the "free_spins_remaining" field.
func FreeSpinsRemainingIsNil() predicate.Round {
	return predicate.Round(sql.FieldIsNull(FieldFreeSpinsRemaining))
}

// FreeSpinsRemainingNotNil applies the NotNil predicate on the "free_spins_remaining" field.
func FreeSpinsRemainingNotNil() predicate.Round {
	return predicate.Round(sql.FieldNotNull(FieldFreeSpinsRemaining))
}

// MathOutputEQ applies the EQ predicate on the "math_output" field.
func MathOutputEQ(v string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldMathOutput, v))
}

// MathOutputNEQ applies the NEQ predicate on the "math_output" field.
func MathOutputNEQ(v string) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldMathOutput, v))
}

// MathOutputIn applies the In predicate on the "math_output" field.
func MathOutputIn(vs ...string) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldMathOutput, vs...))
}

// MathOutputNotIn applies the NotIn predicate on the "math_output" field.
func MathOutputNotIn(vs ...string) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldMathOutput, vs...))
}

// MathOutputGT applies the GT predicate on the "math_output" field.
func MathOutputGT(v string) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldMathOutput, v))
}

// MathOutputGTE applies the GTE predicate on the "math_output" field.
func MathOutputGTE(v string) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldMathOutput, v))
}

// MathOutputLT applies the LT predicate on the "math_output" field.
func MathOutputLT(v string) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldMathOutput, v))
}

// MathOutputLTE applies the LTE predicate on the "math_output" field.
func MathOutputLTE(v string) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldMathOutput, v))
}

// MathOutputContains applies the Contains predicate on the "math_output" field.
func MathOutputContains(v string) predicate.Round {
	return predicate.Round(sql.FieldContains(FieldMathOutput, v))
}

// MathOutputHasPrefix applies the HasPrefix predicate on the "math_output" field.
func MathOutputHasPrefix(v string) predicate.Round {
	return predicate.Round(sql.FieldHasPrefix(FieldMathOutput, v))
}

// MathOutputHasSuffix applies the HasSuffix predicate on the "math_output" field.
func MathOutputHasSuffix(v string) predicate.Round {
	return predicate.Round(sql.FieldHasSuffix(FieldMathOutput, v))
}

// MathOutputIsNil applies the IsNil predicate on the "math_output" field.
func MathOutputIsNil() predicate.Round {
	return predicate.Round(sql.FieldIsNull(FieldMathOutput))
}

// MathOutputNotNil applies the NotNil predicate on the "math_output" field.
func MathOutputNotNil() predicate.Round {
	return predicate.Round(sql.FieldNotNull(FieldMathOutput))
}

// MathOutputEqualFold applies the EqualFold predicate on the "math_output" field.
func MathOutputEqualFold(v string) predicate.Round {
	return predicate.Round(sql.FieldEqualFold(FieldMathOutput, v))
}

// MathOutputContainsFold applies the ContainsFold predicate on the "math_output" field.
func MathOutputContainsFold(v string) predicate.Round {
	return predicate.Round(sql.FieldContainsFold(FieldMathOutput, v))
}

// GameServiceIsNil applies the IsNil predicate on the "game_service" field.
func GameServiceIsNil() predicate.Round {
	return predicate.Round(sql.FieldIsNull(FieldGameService))
}

// GameServiceNotNil applies the NotNil predicate on the "game_service" field.
func GameServiceNotNil() predicate.Round {
	return predicate.Round(sql.FieldNotNull(FieldGameService))
}

// FreeSpinsCountEQ applies the EQ predicate on the "free_spins_count" field.
func FreeSpinsCountEQ(v int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldFreeSpinsCount, v))
}

// FreeSpinsCountNEQ applies the NEQ predicate on the "free_spins_count" field.
func FreeSpinsCountNEQ(v int) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldFreeSpinsCount, v))
}

// FreeSpinsCountIn applies the In predicate on the "free_spins_count" field.
func FreeSpinsCountIn(vs ...int) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldFreeSpinsCount, vs...))
}

// FreeSpinsCountNotIn applies the NotIn predicate on the "free_spins_count" field.
func FreeSpinsCountNotIn(vs ...int) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldFreeSpinsCount, vs...))
}

// FreeSpinsCountGT applies the GT predicate on the "free_spins_count" field.
func FreeSpinsCountGT(v int) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldFreeSpinsCount, v))
}

// FreeSpinsCountGTE applies the GTE predicate on the "free_spins_count" field.
func FreeSpinsCountGTE(v int) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldFreeSpinsCount, v))
}

// FreeSpinsCountLT applies the LT predicate on the "free_spins_count" field.
func FreeSpinsCountLT(v int) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldFreeSpinsCount, v))
}

// FreeSpinsCountLTE applies the LTE predicate on the "free_spins_count" field.
func FreeSpinsCountLTE(v int) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldFreeSpinsCount, v))
}

// FreeSpinsCountIsNil applies the IsNil predicate on the "free_spins_count" field.
func FreeSpinsCountIsNil() predicate.Round {
	return predicate.Round(sql.FieldIsNull(FieldFreeSpinsCount))
}

// FreeSpinsCountNotNil applies the NotNil predicate on the "free_spins_count" field.
func FreeSpinsCountNotNil() predicate.Round {
	return predicate.Round(sql.FieldNotNull(FieldFreeSpinsCount))
}

// AnteBetEQ applies the EQ predicate on the "ante_bet" field.
func AnteBetEQ(v bool) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldAnteBet, v))
}

// AnteBetNEQ applies the NEQ predicate on the "ante_bet" field.
func AnteBetNEQ(v bool) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldAnteBet, v))
}

// AnteBetIsNil applies the IsNil predicate on the "ante_bet" field.
func AnteBetIsNil() predicate.Round {
	return predicate.Round(sql.FieldIsNull(FieldAnteBet))
}

// AnteBetNotNil applies the NotNil predicate on the "ante_bet" field.
func AnteBetNotNil() predicate.Round {
	return predicate.Round(sql.FieldNotNull(FieldAnteBet))
}

// BuyBonusEQ applies the EQ predicate on the "buy_bonus" field.
func BuyBonusEQ(v string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldBuyBonus, v))
}

// BuyBonusNEQ applies the NEQ predicate on the "buy_bonus" field.
func BuyBonusNEQ(v string) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldBuyBonus, v))
}

// BuyBonusIn applies the In predicate on the "buy_bonus" field.
func BuyBonusIn(vs ...string) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldBuyBonus, vs...))
}

// BuyBonusNotIn applies the NotIn predicate on the "buy_bonus" field.
func BuyBonusNotIn(vs ...string) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldBuyBonus, vs...))
}

// BuyBonusGT applies the GT predicate on the "buy_bonus" field.
func BuyBonusGT(v string) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldBuyBonus, v))
}

// BuyBonusGTE applies the GTE predicate on the "buy_bonus" field.
func BuyBonusGTE(v string) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldBuyBonus, v))
}

// BuyBonusLT applies the LT predicate on the "buy_bonus" field.
func BuyBonusLT(v string) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldBuyBonus, v))
}

// BuyBonusLTE applies the LTE predicate on the "buy_bonus" field.
func BuyBonusLTE(v string) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldBuyBonus, v))
}

// BuyBonusContains applies the Contains predicate on the "buy_bonus" field.
func BuyBonusContains(v string) predicate.Round {
	return predicate.Round(sql.FieldContains(FieldBuyBonus, v))
}

// BuyBonusHasPrefix applies the HasPrefix predicate on the "buy_bonus" field.
func BuyBonusHasPrefix(v string) predicate.Round {
	return predicate.Round(sql.FieldHasPrefix(FieldBuyBonus, v))
}

// BuyBonusHasSuffix applies the HasSuffix predicate on the "buy_bonus" field.
func BuyBonusHasSuffix(v string) predicate.Round {
	return predicate.Round(sql.FieldHasSuffix(FieldBuyBonus, v))
}

// BuyBonusIsNil applies the IsNil predicate on the "buy_bonus" field.
func BuyBonusIsNil() predicate.Round {
	return predicate.Round(sql.FieldIsNull(FieldBuyBonus))
}

// BuyBonusNotNil applies the NotNil predicate on the "buy_bonus" field.
func BuyBonusNotNil() predicate.Round {
	return predicate.Round(sql.FieldNotNull(FieldBuyBonus))
}

// BuyBonusEqualFold applies the EqualFold predicate on the "buy_bonus" field.
func BuyBonusEqualFold(v string) predicate.Round {
	return predicate.Round(sql.FieldEqualFold(FieldBuyBonus, v))
}

// BuyBonusContainsFold applies the ContainsFold predicate on the "buy_bonus" field.
func BuyBonusContainsFold(v string) predicate.Round {
	return predicate.Round(sql.FieldContainsFold(FieldBuyBonus, v))
}

// CharacterEQ applies the EQ predicate on the "character" field.
func CharacterEQ(v int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldCharacter, v))
}

// CharacterNEQ applies the NEQ predicate on the "character" field.
func CharacterNEQ(v int) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldCharacter, v))
}

// CharacterIn applies the In predicate on the "character" field.
func CharacterIn(vs ...int) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldCharacter, vs...))
}

// CharacterNotIn applies the NotIn predicate on the "character" field.
func CharacterNotIn(vs ...int) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldCharacter, vs...))
}

// CharacterGT applies the GT predicate on the "character" field.
func CharacterGT(v int) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldCharacter, v))
}

// CharacterGTE applies the GTE predicate on the "character" field.
func CharacterGTE(v int) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldCharacter, v))
}

// CharacterLT applies the LT predicate on the "character" field.
func CharacterLT(v int) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldCharacter, v))
}

// CharacterLTE applies the LTE predicate on the "character" field.
func CharacterLTE(v int) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldCharacter, v))
}

// CharacterIsNil applies the IsNil predicate on the "character" field.
func CharacterIsNil() predicate.Round {
	return predicate.Round(sql.FieldIsNull(FieldCharacter))
}

// CharacterNotNil applies the NotNil predicate on the "character" field.
func CharacterNotNil() predicate.Round {
	return predicate.Round(sql.FieldNotNull(FieldCharacter))
}

// HasTransactions applies the HasEdge predicate on the "transactions" edge.
func HasTransactions() predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TransactionsTable, TransactionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransactionsWith applies the HasEdge predicate on the "transactions" edge with a given conditions (other predicates).
func HasTransactionsWith(preds ...predicate.Transaction) predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		step := newTransactionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Round) predicate.Round {
	return predicate.Round(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Round) predicate.Round {
	return predicate.Round(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Round) predicate.Round {
	return predicate.Round(sql.NotPredicates(p))
}
