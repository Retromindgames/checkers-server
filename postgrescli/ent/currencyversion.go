// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencie"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencyversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gametype"
)

// CurrencyVersion is the model entity for the CurrencyVersion schema.
type CurrencyVersion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// MinBet holds the value of the "min_bet" field.
	MinBet int `json:"min_bet,omitempty"`
	// MaxExp holds the value of the "max_exp" field.
	MaxExp int `json:"max_exp,omitempty"`
	// Denominator holds the value of the "denominator" field.
	Denominator int `json:"denominator,omitempty"`
	// CurrencyID holds the value of the "currency_id" field.
	CurrencyID int `json:"currency_id,omitempty"`
	// DefaultMultiplier holds the value of the "default_multiplier" field.
	DefaultMultiplier int `json:"default_multiplier,omitempty"`
	// Deprecated holds the value of the "deprecated" field.
	Deprecated bool `json:"deprecated,omitempty"`
	// CrashBetIncrement holds the value of the "crash_bet_increment" field.
	CrashBetIncrement int `json:"crash_bet_increment,omitempty"`
	// SlotsBetMultipliers holds the value of the "slots_bet_multipliers" field.
	SlotsBetMultipliers []int `json:"slots_bet_multipliers,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CurrencyVersionQuery when eager-loading is set.
	Edges                       CurrencyVersionEdges `json:"edges"`
	currencie_currency_versions *int
	game_type_currency_versions *int
	selectValues                sql.SelectValues
}

// CurrencyVersionEdges holds the relations/edges for other nodes in the graph.
type CurrencyVersionEdges struct {
	// Currencie holds the value of the Currencie edge.
	Currencie *Currencie `json:"Currencie,omitempty"`
	// GameTypes holds the value of the game_types edge.
	GameTypes *GameType `json:"game_types,omitempty"`
	// Sessions holds the value of the sessions edge.
	Sessions []*Session `json:"sessions,omitempty"`
	// GameConfigs holds the value of the game_configs edge.
	GameConfigs []*GameConfig `json:"game_configs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CurrencieOrErr returns the Currencie value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CurrencyVersionEdges) CurrencieOrErr() (*Currencie, error) {
	if e.Currencie != nil {
		return e.Currencie, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: currencie.Label}
	}
	return nil, &NotLoadedError{edge: "Currencie"}
}

// GameTypesOrErr returns the GameTypes value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CurrencyVersionEdges) GameTypesOrErr() (*GameType, error) {
	if e.GameTypes != nil {
		return e.GameTypes, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: gametype.Label}
	}
	return nil, &NotLoadedError{edge: "game_types"}
}

// SessionsOrErr returns the Sessions value or an error if the edge
// was not loaded in eager-loading.
func (e CurrencyVersionEdges) SessionsOrErr() ([]*Session, error) {
	if e.loadedTypes[2] {
		return e.Sessions, nil
	}
	return nil, &NotLoadedError{edge: "sessions"}
}

// GameConfigsOrErr returns the GameConfigs value or an error if the edge
// was not loaded in eager-loading.
func (e CurrencyVersionEdges) GameConfigsOrErr() ([]*GameConfig, error) {
	if e.loadedTypes[3] {
		return e.GameConfigs, nil
	}
	return nil, &NotLoadedError{edge: "game_configs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CurrencyVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case currencyversion.FieldSlotsBetMultipliers:
			values[i] = new([]byte)
		case currencyversion.FieldDeprecated:
			values[i] = new(sql.NullBool)
		case currencyversion.FieldID, currencyversion.FieldMinBet, currencyversion.FieldMaxExp, currencyversion.FieldDenominator, currencyversion.FieldCurrencyID, currencyversion.FieldDefaultMultiplier, currencyversion.FieldCrashBetIncrement:
			values[i] = new(sql.NullInt64)
		case currencyversion.FieldName:
			values[i] = new(sql.NullString)
		case currencyversion.ForeignKeys[0]: // currencie_currency_versions
			values[i] = new(sql.NullInt64)
		case currencyversion.ForeignKeys[1]: // game_type_currency_versions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CurrencyVersion fields.
func (cv *CurrencyVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case currencyversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cv.ID = int(value.Int64)
		case currencyversion.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cv.Name = value.String
			}
		case currencyversion.FieldMinBet:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field min_bet", values[i])
			} else if value.Valid {
				cv.MinBet = int(value.Int64)
			}
		case currencyversion.FieldMaxExp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_exp", values[i])
			} else if value.Valid {
				cv.MaxExp = int(value.Int64)
			}
		case currencyversion.FieldDenominator:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field denominator", values[i])
			} else if value.Valid {
				cv.Denominator = int(value.Int64)
			}
		case currencyversion.FieldCurrencyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field currency_id", values[i])
			} else if value.Valid {
				cv.CurrencyID = int(value.Int64)
			}
		case currencyversion.FieldDefaultMultiplier:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field default_multiplier", values[i])
			} else if value.Valid {
				cv.DefaultMultiplier = int(value.Int64)
			}
		case currencyversion.FieldDeprecated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deprecated", values[i])
			} else if value.Valid {
				cv.Deprecated = value.Bool
			}
		case currencyversion.FieldCrashBetIncrement:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field crash_bet_increment", values[i])
			} else if value.Valid {
				cv.CrashBetIncrement = int(value.Int64)
			}
		case currencyversion.FieldSlotsBetMultipliers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field slots_bet_multipliers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cv.SlotsBetMultipliers); err != nil {
					return fmt.Errorf("unmarshal field slots_bet_multipliers: %w", err)
				}
			}
		case currencyversion.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field currencie_currency_versions", value)
			} else if value.Valid {
				cv.currencie_currency_versions = new(int)
				*cv.currencie_currency_versions = int(value.Int64)
			}
		case currencyversion.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field game_type_currency_versions", value)
			} else if value.Valid {
				cv.game_type_currency_versions = new(int)
				*cv.game_type_currency_versions = int(value.Int64)
			}
		default:
			cv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CurrencyVersion.
// This includes values selected through modifiers, order, etc.
func (cv *CurrencyVersion) Value(name string) (ent.Value, error) {
	return cv.selectValues.Get(name)
}

// QueryCurrencie queries the "Currencie" edge of the CurrencyVersion entity.
func (cv *CurrencyVersion) QueryCurrencie() *CurrencieQuery {
	return NewCurrencyVersionClient(cv.config).QueryCurrencie(cv)
}

// QueryGameTypes queries the "game_types" edge of the CurrencyVersion entity.
func (cv *CurrencyVersion) QueryGameTypes() *GameTypeQuery {
	return NewCurrencyVersionClient(cv.config).QueryGameTypes(cv)
}

// QuerySessions queries the "sessions" edge of the CurrencyVersion entity.
func (cv *CurrencyVersion) QuerySessions() *SessionQuery {
	return NewCurrencyVersionClient(cv.config).QuerySessions(cv)
}

// QueryGameConfigs queries the "game_configs" edge of the CurrencyVersion entity.
func (cv *CurrencyVersion) QueryGameConfigs() *GameConfigQuery {
	return NewCurrencyVersionClient(cv.config).QueryGameConfigs(cv)
}

// Update returns a builder for updating this CurrencyVersion.
// Note that you need to call CurrencyVersion.Unwrap() before calling this method if this CurrencyVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (cv *CurrencyVersion) Update() *CurrencyVersionUpdateOne {
	return NewCurrencyVersionClient(cv.config).UpdateOne(cv)
}

// Unwrap unwraps the CurrencyVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cv *CurrencyVersion) Unwrap() *CurrencyVersion {
	_tx, ok := cv.config.driver.(*txDriver)
	if !ok {
		panic("ent: CurrencyVersion is not a transactional entity")
	}
	cv.config.driver = _tx.drv
	return cv
}

// String implements the fmt.Stringer.
func (cv *CurrencyVersion) String() string {
	var builder strings.Builder
	builder.WriteString("CurrencyVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cv.ID))
	builder.WriteString("name=")
	builder.WriteString(cv.Name)
	builder.WriteString(", ")
	builder.WriteString("min_bet=")
	builder.WriteString(fmt.Sprintf("%v", cv.MinBet))
	builder.WriteString(", ")
	builder.WriteString("max_exp=")
	builder.WriteString(fmt.Sprintf("%v", cv.MaxExp))
	builder.WriteString(", ")
	builder.WriteString("denominator=")
	builder.WriteString(fmt.Sprintf("%v", cv.Denominator))
	builder.WriteString(", ")
	builder.WriteString("currency_id=")
	builder.WriteString(fmt.Sprintf("%v", cv.CurrencyID))
	builder.WriteString(", ")
	builder.WriteString("default_multiplier=")
	builder.WriteString(fmt.Sprintf("%v", cv.DefaultMultiplier))
	builder.WriteString(", ")
	builder.WriteString("deprecated=")
	builder.WriteString(fmt.Sprintf("%v", cv.Deprecated))
	builder.WriteString(", ")
	builder.WriteString("crash_bet_increment=")
	builder.WriteString(fmt.Sprintf("%v", cv.CrashBetIncrement))
	builder.WriteString(", ")
	builder.WriteString("slots_bet_multipliers=")
	builder.WriteString(fmt.Sprintf("%v", cv.SlotsBetMultipliers))
	builder.WriteByte(')')
	return builder.String()
}

// CurrencyVersions is a parsable slice of CurrencyVersion.
type CurrencyVersions []*CurrencyVersion
