// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameconfig"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gametype"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
	"github.com/Lavizord/checkers-server/postgrescli/ent/session"
)

// GameVersionUpdate is the builder for updating GameVersion entities.
type GameVersionUpdate struct {
	config
	hooks    []Hook
	mutation *GameVersionMutation
}

// Where appends a list predicates to the GameVersionUpdate builder.
func (gvu *GameVersionUpdate) Where(ps ...predicate.GameVersion) *GameVersionUpdate {
	gvu.mutation.Where(ps...)
	return gvu
}

// SetVersion sets the "version" field.
func (gvu *GameVersionUpdate) SetVersion(s string) *GameVersionUpdate {
	gvu.mutation.SetVersion(s)
	return gvu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (gvu *GameVersionUpdate) SetNillableVersion(s *string) *GameVersionUpdate {
	if s != nil {
		gvu.SetVersion(*s)
	}
	return gvu
}

// SetCanDemo sets the "can_demo" field.
func (gvu *GameVersionUpdate) SetCanDemo(b bool) *GameVersionUpdate {
	gvu.mutation.SetCanDemo(b)
	return gvu
}

// SetNillableCanDemo sets the "can_demo" field if the given value is not nil.
func (gvu *GameVersionUpdate) SetNillableCanDemo(b *bool) *GameVersionUpdate {
	if b != nil {
		gvu.SetCanDemo(*b)
	}
	return gvu
}

// SetCanTournament sets the "can_tournament" field.
func (gvu *GameVersionUpdate) SetCanTournament(b bool) *GameVersionUpdate {
	gvu.mutation.SetCanTournament(b)
	return gvu
}

// SetNillableCanTournament sets the "can_tournament" field if the given value is not nil.
func (gvu *GameVersionUpdate) SetNillableCanTournament(b *bool) *GameVersionUpdate {
	if b != nil {
		gvu.SetCanTournament(*b)
	}
	return gvu
}

// SetCanFreeBets sets the "can_free_bets" field.
func (gvu *GameVersionUpdate) SetCanFreeBets(b bool) *GameVersionUpdate {
	gvu.mutation.SetCanFreeBets(b)
	return gvu
}

// SetNillableCanFreeBets sets the "can_free_bets" field if the given value is not nil.
func (gvu *GameVersionUpdate) SetNillableCanFreeBets(b *bool) *GameVersionUpdate {
	if b != nil {
		gvu.SetCanFreeBets(*b)
	}
	return gvu
}

// SetCanDropAndWins sets the "can_drop_and_wins" field.
func (gvu *GameVersionUpdate) SetCanDropAndWins(b bool) *GameVersionUpdate {
	gvu.mutation.SetCanDropAndWins(b)
	return gvu
}

// SetNillableCanDropAndWins sets the "can_drop_and_wins" field if the given value is not nil.
func (gvu *GameVersionUpdate) SetNillableCanDropAndWins(b *bool) *GameVersionUpdate {
	if b != nil {
		gvu.SetCanDropAndWins(*b)
	}
	return gvu
}

// SetCanTurbo sets the "can_turbo" field.
func (gvu *GameVersionUpdate) SetCanTurbo(b bool) *GameVersionUpdate {
	gvu.mutation.SetCanTurbo(b)
	return gvu
}

// SetNillableCanTurbo sets the "can_turbo" field if the given value is not nil.
func (gvu *GameVersionUpdate) SetNillableCanTurbo(b *bool) *GameVersionUpdate {
	if b != nil {
		gvu.SetCanTurbo(*b)
	}
	return gvu
}

// SetURLMediaPack sets the "url_media_pack" field.
func (gvu *GameVersionUpdate) SetURLMediaPack(s string) *GameVersionUpdate {
	gvu.mutation.SetURLMediaPack(s)
	return gvu
}

// SetNillableURLMediaPack sets the "url_media_pack" field if the given value is not nil.
func (gvu *GameVersionUpdate) SetNillableURLMediaPack(s *string) *GameVersionUpdate {
	if s != nil {
		gvu.SetURLMediaPack(*s)
	}
	return gvu
}

// ClearURLMediaPack clears the value of the "url_media_pack" field.
func (gvu *GameVersionUpdate) ClearURLMediaPack() *GameVersionUpdate {
	gvu.mutation.ClearURLMediaPack()
	return gvu
}

// SetURLReleaseNote sets the "url_release_note" field.
func (gvu *GameVersionUpdate) SetURLReleaseNote(s string) *GameVersionUpdate {
	gvu.mutation.SetURLReleaseNote(s)
	return gvu
}

// SetNillableURLReleaseNote sets the "url_release_note" field if the given value is not nil.
func (gvu *GameVersionUpdate) SetNillableURLReleaseNote(s *string) *GameVersionUpdate {
	if s != nil {
		gvu.SetURLReleaseNote(*s)
	}
	return gvu
}

// ClearURLReleaseNote clears the value of the "url_release_note" field.
func (gvu *GameVersionUpdate) ClearURLReleaseNote() *GameVersionUpdate {
	gvu.mutation.ClearURLReleaseNote()
	return gvu
}

// SetDeprecated sets the "deprecated" field.
func (gvu *GameVersionUpdate) SetDeprecated(b bool) *GameVersionUpdate {
	gvu.mutation.SetDeprecated(b)
	return gvu
}

// SetNillableDeprecated sets the "deprecated" field if the given value is not nil.
func (gvu *GameVersionUpdate) SetNillableDeprecated(b *bool) *GameVersionUpdate {
	if b != nil {
		gvu.SetDeprecated(*b)
	}
	return gvu
}

// SetAvailableMathVersions sets the "available_math_versions" field.
func (gvu *GameVersionUpdate) SetAvailableMathVersions(i []int) *GameVersionUpdate {
	gvu.mutation.SetAvailableMathVersions(i)
	return gvu
}

// AppendAvailableMathVersions appends i to the "available_math_versions" field.
func (gvu *GameVersionUpdate) AppendAvailableMathVersions(i []int) *GameVersionUpdate {
	gvu.mutation.AppendAvailableMathVersions(i)
	return gvu
}

// ClearAvailableMathVersions clears the value of the "available_math_versions" field.
func (gvu *GameVersionUpdate) ClearAvailableMathVersions() *GameVersionUpdate {
	gvu.mutation.ClearAvailableMathVersions()
	return gvu
}

// SetCanAutoBet sets the "can_auto_bet" field.
func (gvu *GameVersionUpdate) SetCanAutoBet(b bool) *GameVersionUpdate {
	gvu.mutation.SetCanAutoBet(b)
	return gvu
}

// SetNillableCanAutoBet sets the "can_auto_bet" field if the given value is not nil.
func (gvu *GameVersionUpdate) SetNillableCanAutoBet(b *bool) *GameVersionUpdate {
	if b != nil {
		gvu.SetCanAutoBet(*b)
	}
	return gvu
}

// SetURLGameManual sets the "url_game_manual" field.
func (gvu *GameVersionUpdate) SetURLGameManual(s string) *GameVersionUpdate {
	gvu.mutation.SetURLGameManual(s)
	return gvu
}

// SetNillableURLGameManual sets the "url_game_manual" field if the given value is not nil.
func (gvu *GameVersionUpdate) SetNillableURLGameManual(s *string) *GameVersionUpdate {
	if s != nil {
		gvu.SetURLGameManual(*s)
	}
	return gvu
}

// ClearURLGameManual clears the value of the "url_game_manual" field.
func (gvu *GameVersionUpdate) ClearURLGameManual() *GameVersionUpdate {
	gvu.mutation.ClearURLGameManual()
	return gvu
}

// SetCanAutoCashout sets the "can_auto_cashout" field.
func (gvu *GameVersionUpdate) SetCanAutoCashout(b bool) *GameVersionUpdate {
	gvu.mutation.SetCanAutoCashout(b)
	return gvu
}

// SetNillableCanAutoCashout sets the "can_auto_cashout" field if the given value is not nil.
func (gvu *GameVersionUpdate) SetNillableCanAutoCashout(b *bool) *GameVersionUpdate {
	if b != nil {
		gvu.SetCanAutoCashout(*b)
	}
	return gvu
}

// SetCanBuyBonus sets the "can_buy_bonus" field.
func (gvu *GameVersionUpdate) SetCanBuyBonus(b bool) *GameVersionUpdate {
	gvu.mutation.SetCanBuyBonus(b)
	return gvu
}

// SetNillableCanBuyBonus sets the "can_buy_bonus" field if the given value is not nil.
func (gvu *GameVersionUpdate) SetNillableCanBuyBonus(b *bool) *GameVersionUpdate {
	if b != nil {
		gvu.SetCanBuyBonus(*b)
	}
	return gvu
}

// SetCanAnteBet sets the "can_ante_bet" field.
func (gvu *GameVersionUpdate) SetCanAnteBet(b bool) *GameVersionUpdate {
	gvu.mutation.SetCanAnteBet(b)
	return gvu
}

// SetNillableCanAnteBet sets the "can_ante_bet" field if the given value is not nil.
func (gvu *GameVersionUpdate) SetNillableCanAnteBet(b *bool) *GameVersionUpdate {
	if b != nil {
		gvu.SetCanAnteBet(*b)
	}
	return gvu
}

// SetGamesID sets the "games" edge to the Game entity by ID.
func (gvu *GameVersionUpdate) SetGamesID(id int) *GameVersionUpdate {
	gvu.mutation.SetGamesID(id)
	return gvu
}

// SetNillableGamesID sets the "games" edge to the Game entity by ID if the given value is not nil.
func (gvu *GameVersionUpdate) SetNillableGamesID(id *int) *GameVersionUpdate {
	if id != nil {
		gvu = gvu.SetGamesID(*id)
	}
	return gvu
}

// SetGames sets the "games" edge to the Game entity.
func (gvu *GameVersionUpdate) SetGames(g *Game) *GameVersionUpdate {
	return gvu.SetGamesID(g.ID)
}

// SetGameTypeID sets the "game_type" edge to the GameType entity by ID.
func (gvu *GameVersionUpdate) SetGameTypeID(id int) *GameVersionUpdate {
	gvu.mutation.SetGameTypeID(id)
	return gvu
}

// SetNillableGameTypeID sets the "game_type" edge to the GameType entity by ID if the given value is not nil.
func (gvu *GameVersionUpdate) SetNillableGameTypeID(id *int) *GameVersionUpdate {
	if id != nil {
		gvu = gvu.SetGameTypeID(*id)
	}
	return gvu
}

// SetGameType sets the "game_type" edge to the GameType entity.
func (gvu *GameVersionUpdate) SetGameType(g *GameType) *GameVersionUpdate {
	return gvu.SetGameTypeID(g.ID)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (gvu *GameVersionUpdate) AddSessionIDs(ids ...int) *GameVersionUpdate {
	gvu.mutation.AddSessionIDs(ids...)
	return gvu
}

// AddSessions adds the "sessions" edges to the Session entity.
func (gvu *GameVersionUpdate) AddSessions(s ...*Session) *GameVersionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return gvu.AddSessionIDs(ids...)
}

// AddGameConfigIDs adds the "game_configs" edge to the GameConfig entity by IDs.
func (gvu *GameVersionUpdate) AddGameConfigIDs(ids ...int) *GameVersionUpdate {
	gvu.mutation.AddGameConfigIDs(ids...)
	return gvu
}

// AddGameConfigs adds the "game_configs" edges to the GameConfig entity.
func (gvu *GameVersionUpdate) AddGameConfigs(g ...*GameConfig) *GameVersionUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gvu.AddGameConfigIDs(ids...)
}

// Mutation returns the GameVersionMutation object of the builder.
func (gvu *GameVersionUpdate) Mutation() *GameVersionMutation {
	return gvu.mutation
}

// ClearGames clears the "games" edge to the Game entity.
func (gvu *GameVersionUpdate) ClearGames() *GameVersionUpdate {
	gvu.mutation.ClearGames()
	return gvu
}

// ClearGameType clears the "game_type" edge to the GameType entity.
func (gvu *GameVersionUpdate) ClearGameType() *GameVersionUpdate {
	gvu.mutation.ClearGameType()
	return gvu
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (gvu *GameVersionUpdate) ClearSessions() *GameVersionUpdate {
	gvu.mutation.ClearSessions()
	return gvu
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (gvu *GameVersionUpdate) RemoveSessionIDs(ids ...int) *GameVersionUpdate {
	gvu.mutation.RemoveSessionIDs(ids...)
	return gvu
}

// RemoveSessions removes "sessions" edges to Session entities.
func (gvu *GameVersionUpdate) RemoveSessions(s ...*Session) *GameVersionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return gvu.RemoveSessionIDs(ids...)
}

// ClearGameConfigs clears all "game_configs" edges to the GameConfig entity.
func (gvu *GameVersionUpdate) ClearGameConfigs() *GameVersionUpdate {
	gvu.mutation.ClearGameConfigs()
	return gvu
}

// RemoveGameConfigIDs removes the "game_configs" edge to GameConfig entities by IDs.
func (gvu *GameVersionUpdate) RemoveGameConfigIDs(ids ...int) *GameVersionUpdate {
	gvu.mutation.RemoveGameConfigIDs(ids...)
	return gvu
}

// RemoveGameConfigs removes "game_configs" edges to GameConfig entities.
func (gvu *GameVersionUpdate) RemoveGameConfigs(g ...*GameConfig) *GameVersionUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gvu.RemoveGameConfigIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gvu *GameVersionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gvu.sqlSave, gvu.mutation, gvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gvu *GameVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := gvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gvu *GameVersionUpdate) Exec(ctx context.Context) error {
	_, err := gvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gvu *GameVersionUpdate) ExecX(ctx context.Context) {
	if err := gvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gvu *GameVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(gameversion.Table, gameversion.Columns, sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt))
	if ps := gvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gvu.mutation.Version(); ok {
		_spec.SetField(gameversion.FieldVersion, field.TypeString, value)
	}
	if value, ok := gvu.mutation.CanDemo(); ok {
		_spec.SetField(gameversion.FieldCanDemo, field.TypeBool, value)
	}
	if value, ok := gvu.mutation.CanTournament(); ok {
		_spec.SetField(gameversion.FieldCanTournament, field.TypeBool, value)
	}
	if value, ok := gvu.mutation.CanFreeBets(); ok {
		_spec.SetField(gameversion.FieldCanFreeBets, field.TypeBool, value)
	}
	if value, ok := gvu.mutation.CanDropAndWins(); ok {
		_spec.SetField(gameversion.FieldCanDropAndWins, field.TypeBool, value)
	}
	if value, ok := gvu.mutation.CanTurbo(); ok {
		_spec.SetField(gameversion.FieldCanTurbo, field.TypeBool, value)
	}
	if value, ok := gvu.mutation.URLMediaPack(); ok {
		_spec.SetField(gameversion.FieldURLMediaPack, field.TypeString, value)
	}
	if gvu.mutation.URLMediaPackCleared() {
		_spec.ClearField(gameversion.FieldURLMediaPack, field.TypeString)
	}
	if value, ok := gvu.mutation.URLReleaseNote(); ok {
		_spec.SetField(gameversion.FieldURLReleaseNote, field.TypeString, value)
	}
	if gvu.mutation.URLReleaseNoteCleared() {
		_spec.ClearField(gameversion.FieldURLReleaseNote, field.TypeString)
	}
	if value, ok := gvu.mutation.Deprecated(); ok {
		_spec.SetField(gameversion.FieldDeprecated, field.TypeBool, value)
	}
	if value, ok := gvu.mutation.AvailableMathVersions(); ok {
		_spec.SetField(gameversion.FieldAvailableMathVersions, field.TypeJSON, value)
	}
	if value, ok := gvu.mutation.AppendedAvailableMathVersions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, gameversion.FieldAvailableMathVersions, value)
		})
	}
	if gvu.mutation.AvailableMathVersionsCleared() {
		_spec.ClearField(gameversion.FieldAvailableMathVersions, field.TypeJSON)
	}
	if value, ok := gvu.mutation.CanAutoBet(); ok {
		_spec.SetField(gameversion.FieldCanAutoBet, field.TypeBool, value)
	}
	if value, ok := gvu.mutation.URLGameManual(); ok {
		_spec.SetField(gameversion.FieldURLGameManual, field.TypeString, value)
	}
	if gvu.mutation.URLGameManualCleared() {
		_spec.ClearField(gameversion.FieldURLGameManual, field.TypeString)
	}
	if value, ok := gvu.mutation.CanAutoCashout(); ok {
		_spec.SetField(gameversion.FieldCanAutoCashout, field.TypeBool, value)
	}
	if value, ok := gvu.mutation.CanBuyBonus(); ok {
		_spec.SetField(gameversion.FieldCanBuyBonus, field.TypeBool, value)
	}
	if value, ok := gvu.mutation.CanAnteBet(); ok {
		_spec.SetField(gameversion.FieldCanAnteBet, field.TypeBool, value)
	}
	if gvu.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameversion.GamesTable,
			Columns: []string{gameversion.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gvu.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameversion.GamesTable,
			Columns: []string{gameversion.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gvu.mutation.GameTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameversion.GameTypeTable,
			Columns: []string{gameversion.GameTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gametype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gvu.mutation.GameTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameversion.GameTypeTable,
			Columns: []string{gameversion.GameTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gametype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gvu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameversion.SessionsTable,
			Columns: []string{gameversion.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gvu.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !gvu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameversion.SessionsTable,
			Columns: []string{gameversion.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gvu.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameversion.SessionsTable,
			Columns: []string{gameversion.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gvu.mutation.GameConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameversion.GameConfigsTable,
			Columns: []string{gameversion.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gvu.mutation.RemovedGameConfigsIDs(); len(nodes) > 0 && !gvu.mutation.GameConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameversion.GameConfigsTable,
			Columns: []string{gameversion.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gvu.mutation.GameConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameversion.GameConfigsTable,
			Columns: []string{gameversion.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gvu.mutation.done = true
	return n, nil
}

// GameVersionUpdateOne is the builder for updating a single GameVersion entity.
type GameVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameVersionMutation
}

// SetVersion sets the "version" field.
func (gvuo *GameVersionUpdateOne) SetVersion(s string) *GameVersionUpdateOne {
	gvuo.mutation.SetVersion(s)
	return gvuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (gvuo *GameVersionUpdateOne) SetNillableVersion(s *string) *GameVersionUpdateOne {
	if s != nil {
		gvuo.SetVersion(*s)
	}
	return gvuo
}

// SetCanDemo sets the "can_demo" field.
func (gvuo *GameVersionUpdateOne) SetCanDemo(b bool) *GameVersionUpdateOne {
	gvuo.mutation.SetCanDemo(b)
	return gvuo
}

// SetNillableCanDemo sets the "can_demo" field if the given value is not nil.
func (gvuo *GameVersionUpdateOne) SetNillableCanDemo(b *bool) *GameVersionUpdateOne {
	if b != nil {
		gvuo.SetCanDemo(*b)
	}
	return gvuo
}

// SetCanTournament sets the "can_tournament" field.
func (gvuo *GameVersionUpdateOne) SetCanTournament(b bool) *GameVersionUpdateOne {
	gvuo.mutation.SetCanTournament(b)
	return gvuo
}

// SetNillableCanTournament sets the "can_tournament" field if the given value is not nil.
func (gvuo *GameVersionUpdateOne) SetNillableCanTournament(b *bool) *GameVersionUpdateOne {
	if b != nil {
		gvuo.SetCanTournament(*b)
	}
	return gvuo
}

// SetCanFreeBets sets the "can_free_bets" field.
func (gvuo *GameVersionUpdateOne) SetCanFreeBets(b bool) *GameVersionUpdateOne {
	gvuo.mutation.SetCanFreeBets(b)
	return gvuo
}

// SetNillableCanFreeBets sets the "can_free_bets" field if the given value is not nil.
func (gvuo *GameVersionUpdateOne) SetNillableCanFreeBets(b *bool) *GameVersionUpdateOne {
	if b != nil {
		gvuo.SetCanFreeBets(*b)
	}
	return gvuo
}

// SetCanDropAndWins sets the "can_drop_and_wins" field.
func (gvuo *GameVersionUpdateOne) SetCanDropAndWins(b bool) *GameVersionUpdateOne {
	gvuo.mutation.SetCanDropAndWins(b)
	return gvuo
}

// SetNillableCanDropAndWins sets the "can_drop_and_wins" field if the given value is not nil.
func (gvuo *GameVersionUpdateOne) SetNillableCanDropAndWins(b *bool) *GameVersionUpdateOne {
	if b != nil {
		gvuo.SetCanDropAndWins(*b)
	}
	return gvuo
}

// SetCanTurbo sets the "can_turbo" field.
func (gvuo *GameVersionUpdateOne) SetCanTurbo(b bool) *GameVersionUpdateOne {
	gvuo.mutation.SetCanTurbo(b)
	return gvuo
}

// SetNillableCanTurbo sets the "can_turbo" field if the given value is not nil.
func (gvuo *GameVersionUpdateOne) SetNillableCanTurbo(b *bool) *GameVersionUpdateOne {
	if b != nil {
		gvuo.SetCanTurbo(*b)
	}
	return gvuo
}

// SetURLMediaPack sets the "url_media_pack" field.
func (gvuo *GameVersionUpdateOne) SetURLMediaPack(s string) *GameVersionUpdateOne {
	gvuo.mutation.SetURLMediaPack(s)
	return gvuo
}

// SetNillableURLMediaPack sets the "url_media_pack" field if the given value is not nil.
func (gvuo *GameVersionUpdateOne) SetNillableURLMediaPack(s *string) *GameVersionUpdateOne {
	if s != nil {
		gvuo.SetURLMediaPack(*s)
	}
	return gvuo
}

// ClearURLMediaPack clears the value of the "url_media_pack" field.
func (gvuo *GameVersionUpdateOne) ClearURLMediaPack() *GameVersionUpdateOne {
	gvuo.mutation.ClearURLMediaPack()
	return gvuo
}

// SetURLReleaseNote sets the "url_release_note" field.
func (gvuo *GameVersionUpdateOne) SetURLReleaseNote(s string) *GameVersionUpdateOne {
	gvuo.mutation.SetURLReleaseNote(s)
	return gvuo
}

// SetNillableURLReleaseNote sets the "url_release_note" field if the given value is not nil.
func (gvuo *GameVersionUpdateOne) SetNillableURLReleaseNote(s *string) *GameVersionUpdateOne {
	if s != nil {
		gvuo.SetURLReleaseNote(*s)
	}
	return gvuo
}

// ClearURLReleaseNote clears the value of the "url_release_note" field.
func (gvuo *GameVersionUpdateOne) ClearURLReleaseNote() *GameVersionUpdateOne {
	gvuo.mutation.ClearURLReleaseNote()
	return gvuo
}

// SetDeprecated sets the "deprecated" field.
func (gvuo *GameVersionUpdateOne) SetDeprecated(b bool) *GameVersionUpdateOne {
	gvuo.mutation.SetDeprecated(b)
	return gvuo
}

// SetNillableDeprecated sets the "deprecated" field if the given value is not nil.
func (gvuo *GameVersionUpdateOne) SetNillableDeprecated(b *bool) *GameVersionUpdateOne {
	if b != nil {
		gvuo.SetDeprecated(*b)
	}
	return gvuo
}

// SetAvailableMathVersions sets the "available_math_versions" field.
func (gvuo *GameVersionUpdateOne) SetAvailableMathVersions(i []int) *GameVersionUpdateOne {
	gvuo.mutation.SetAvailableMathVersions(i)
	return gvuo
}

// AppendAvailableMathVersions appends i to the "available_math_versions" field.
func (gvuo *GameVersionUpdateOne) AppendAvailableMathVersions(i []int) *GameVersionUpdateOne {
	gvuo.mutation.AppendAvailableMathVersions(i)
	return gvuo
}

// ClearAvailableMathVersions clears the value of the "available_math_versions" field.
func (gvuo *GameVersionUpdateOne) ClearAvailableMathVersions() *GameVersionUpdateOne {
	gvuo.mutation.ClearAvailableMathVersions()
	return gvuo
}

// SetCanAutoBet sets the "can_auto_bet" field.
func (gvuo *GameVersionUpdateOne) SetCanAutoBet(b bool) *GameVersionUpdateOne {
	gvuo.mutation.SetCanAutoBet(b)
	return gvuo
}

// SetNillableCanAutoBet sets the "can_auto_bet" field if the given value is not nil.
func (gvuo *GameVersionUpdateOne) SetNillableCanAutoBet(b *bool) *GameVersionUpdateOne {
	if b != nil {
		gvuo.SetCanAutoBet(*b)
	}
	return gvuo
}

// SetURLGameManual sets the "url_game_manual" field.
func (gvuo *GameVersionUpdateOne) SetURLGameManual(s string) *GameVersionUpdateOne {
	gvuo.mutation.SetURLGameManual(s)
	return gvuo
}

// SetNillableURLGameManual sets the "url_game_manual" field if the given value is not nil.
func (gvuo *GameVersionUpdateOne) SetNillableURLGameManual(s *string) *GameVersionUpdateOne {
	if s != nil {
		gvuo.SetURLGameManual(*s)
	}
	return gvuo
}

// ClearURLGameManual clears the value of the "url_game_manual" field.
func (gvuo *GameVersionUpdateOne) ClearURLGameManual() *GameVersionUpdateOne {
	gvuo.mutation.ClearURLGameManual()
	return gvuo
}

// SetCanAutoCashout sets the "can_auto_cashout" field.
func (gvuo *GameVersionUpdateOne) SetCanAutoCashout(b bool) *GameVersionUpdateOne {
	gvuo.mutation.SetCanAutoCashout(b)
	return gvuo
}

// SetNillableCanAutoCashout sets the "can_auto_cashout" field if the given value is not nil.
func (gvuo *GameVersionUpdateOne) SetNillableCanAutoCashout(b *bool) *GameVersionUpdateOne {
	if b != nil {
		gvuo.SetCanAutoCashout(*b)
	}
	return gvuo
}

// SetCanBuyBonus sets the "can_buy_bonus" field.
func (gvuo *GameVersionUpdateOne) SetCanBuyBonus(b bool) *GameVersionUpdateOne {
	gvuo.mutation.SetCanBuyBonus(b)
	return gvuo
}

// SetNillableCanBuyBonus sets the "can_buy_bonus" field if the given value is not nil.
func (gvuo *GameVersionUpdateOne) SetNillableCanBuyBonus(b *bool) *GameVersionUpdateOne {
	if b != nil {
		gvuo.SetCanBuyBonus(*b)
	}
	return gvuo
}

// SetCanAnteBet sets the "can_ante_bet" field.
func (gvuo *GameVersionUpdateOne) SetCanAnteBet(b bool) *GameVersionUpdateOne {
	gvuo.mutation.SetCanAnteBet(b)
	return gvuo
}

// SetNillableCanAnteBet sets the "can_ante_bet" field if the given value is not nil.
func (gvuo *GameVersionUpdateOne) SetNillableCanAnteBet(b *bool) *GameVersionUpdateOne {
	if b != nil {
		gvuo.SetCanAnteBet(*b)
	}
	return gvuo
}

// SetGamesID sets the "games" edge to the Game entity by ID.
func (gvuo *GameVersionUpdateOne) SetGamesID(id int) *GameVersionUpdateOne {
	gvuo.mutation.SetGamesID(id)
	return gvuo
}

// SetNillableGamesID sets the "games" edge to the Game entity by ID if the given value is not nil.
func (gvuo *GameVersionUpdateOne) SetNillableGamesID(id *int) *GameVersionUpdateOne {
	if id != nil {
		gvuo = gvuo.SetGamesID(*id)
	}
	return gvuo
}

// SetGames sets the "games" edge to the Game entity.
func (gvuo *GameVersionUpdateOne) SetGames(g *Game) *GameVersionUpdateOne {
	return gvuo.SetGamesID(g.ID)
}

// SetGameTypeID sets the "game_type" edge to the GameType entity by ID.
func (gvuo *GameVersionUpdateOne) SetGameTypeID(id int) *GameVersionUpdateOne {
	gvuo.mutation.SetGameTypeID(id)
	return gvuo
}

// SetNillableGameTypeID sets the "game_type" edge to the GameType entity by ID if the given value is not nil.
func (gvuo *GameVersionUpdateOne) SetNillableGameTypeID(id *int) *GameVersionUpdateOne {
	if id != nil {
		gvuo = gvuo.SetGameTypeID(*id)
	}
	return gvuo
}

// SetGameType sets the "game_type" edge to the GameType entity.
func (gvuo *GameVersionUpdateOne) SetGameType(g *GameType) *GameVersionUpdateOne {
	return gvuo.SetGameTypeID(g.ID)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (gvuo *GameVersionUpdateOne) AddSessionIDs(ids ...int) *GameVersionUpdateOne {
	gvuo.mutation.AddSessionIDs(ids...)
	return gvuo
}

// AddSessions adds the "sessions" edges to the Session entity.
func (gvuo *GameVersionUpdateOne) AddSessions(s ...*Session) *GameVersionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return gvuo.AddSessionIDs(ids...)
}

// AddGameConfigIDs adds the "game_configs" edge to the GameConfig entity by IDs.
func (gvuo *GameVersionUpdateOne) AddGameConfigIDs(ids ...int) *GameVersionUpdateOne {
	gvuo.mutation.AddGameConfigIDs(ids...)
	return gvuo
}

// AddGameConfigs adds the "game_configs" edges to the GameConfig entity.
func (gvuo *GameVersionUpdateOne) AddGameConfigs(g ...*GameConfig) *GameVersionUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gvuo.AddGameConfigIDs(ids...)
}

// Mutation returns the GameVersionMutation object of the builder.
func (gvuo *GameVersionUpdateOne) Mutation() *GameVersionMutation {
	return gvuo.mutation
}

// ClearGames clears the "games" edge to the Game entity.
func (gvuo *GameVersionUpdateOne) ClearGames() *GameVersionUpdateOne {
	gvuo.mutation.ClearGames()
	return gvuo
}

// ClearGameType clears the "game_type" edge to the GameType entity.
func (gvuo *GameVersionUpdateOne) ClearGameType() *GameVersionUpdateOne {
	gvuo.mutation.ClearGameType()
	return gvuo
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (gvuo *GameVersionUpdateOne) ClearSessions() *GameVersionUpdateOne {
	gvuo.mutation.ClearSessions()
	return gvuo
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (gvuo *GameVersionUpdateOne) RemoveSessionIDs(ids ...int) *GameVersionUpdateOne {
	gvuo.mutation.RemoveSessionIDs(ids...)
	return gvuo
}

// RemoveSessions removes "sessions" edges to Session entities.
func (gvuo *GameVersionUpdateOne) RemoveSessions(s ...*Session) *GameVersionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return gvuo.RemoveSessionIDs(ids...)
}

// ClearGameConfigs clears all "game_configs" edges to the GameConfig entity.
func (gvuo *GameVersionUpdateOne) ClearGameConfigs() *GameVersionUpdateOne {
	gvuo.mutation.ClearGameConfigs()
	return gvuo
}

// RemoveGameConfigIDs removes the "game_configs" edge to GameConfig entities by IDs.
func (gvuo *GameVersionUpdateOne) RemoveGameConfigIDs(ids ...int) *GameVersionUpdateOne {
	gvuo.mutation.RemoveGameConfigIDs(ids...)
	return gvuo
}

// RemoveGameConfigs removes "game_configs" edges to GameConfig entities.
func (gvuo *GameVersionUpdateOne) RemoveGameConfigs(g ...*GameConfig) *GameVersionUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gvuo.RemoveGameConfigIDs(ids...)
}

// Where appends a list predicates to the GameVersionUpdate builder.
func (gvuo *GameVersionUpdateOne) Where(ps ...predicate.GameVersion) *GameVersionUpdateOne {
	gvuo.mutation.Where(ps...)
	return gvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gvuo *GameVersionUpdateOne) Select(field string, fields ...string) *GameVersionUpdateOne {
	gvuo.fields = append([]string{field}, fields...)
	return gvuo
}

// Save executes the query and returns the updated GameVersion entity.
func (gvuo *GameVersionUpdateOne) Save(ctx context.Context) (*GameVersion, error) {
	return withHooks(ctx, gvuo.sqlSave, gvuo.mutation, gvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gvuo *GameVersionUpdateOne) SaveX(ctx context.Context) *GameVersion {
	node, err := gvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gvuo *GameVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := gvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gvuo *GameVersionUpdateOne) ExecX(ctx context.Context) {
	if err := gvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gvuo *GameVersionUpdateOne) sqlSave(ctx context.Context) (_node *GameVersion, err error) {
	_spec := sqlgraph.NewUpdateSpec(gameversion.Table, gameversion.Columns, sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt))
	id, ok := gvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GameVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gameversion.FieldID)
		for _, f := range fields {
			if !gameversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gameversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gvuo.mutation.Version(); ok {
		_spec.SetField(gameversion.FieldVersion, field.TypeString, value)
	}
	if value, ok := gvuo.mutation.CanDemo(); ok {
		_spec.SetField(gameversion.FieldCanDemo, field.TypeBool, value)
	}
	if value, ok := gvuo.mutation.CanTournament(); ok {
		_spec.SetField(gameversion.FieldCanTournament, field.TypeBool, value)
	}
	if value, ok := gvuo.mutation.CanFreeBets(); ok {
		_spec.SetField(gameversion.FieldCanFreeBets, field.TypeBool, value)
	}
	if value, ok := gvuo.mutation.CanDropAndWins(); ok {
		_spec.SetField(gameversion.FieldCanDropAndWins, field.TypeBool, value)
	}
	if value, ok := gvuo.mutation.CanTurbo(); ok {
		_spec.SetField(gameversion.FieldCanTurbo, field.TypeBool, value)
	}
	if value, ok := gvuo.mutation.URLMediaPack(); ok {
		_spec.SetField(gameversion.FieldURLMediaPack, field.TypeString, value)
	}
	if gvuo.mutation.URLMediaPackCleared() {
		_spec.ClearField(gameversion.FieldURLMediaPack, field.TypeString)
	}
	if value, ok := gvuo.mutation.URLReleaseNote(); ok {
		_spec.SetField(gameversion.FieldURLReleaseNote, field.TypeString, value)
	}
	if gvuo.mutation.URLReleaseNoteCleared() {
		_spec.ClearField(gameversion.FieldURLReleaseNote, field.TypeString)
	}
	if value, ok := gvuo.mutation.Deprecated(); ok {
		_spec.SetField(gameversion.FieldDeprecated, field.TypeBool, value)
	}
	if value, ok := gvuo.mutation.AvailableMathVersions(); ok {
		_spec.SetField(gameversion.FieldAvailableMathVersions, field.TypeJSON, value)
	}
	if value, ok := gvuo.mutation.AppendedAvailableMathVersions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, gameversion.FieldAvailableMathVersions, value)
		})
	}
	if gvuo.mutation.AvailableMathVersionsCleared() {
		_spec.ClearField(gameversion.FieldAvailableMathVersions, field.TypeJSON)
	}
	if value, ok := gvuo.mutation.CanAutoBet(); ok {
		_spec.SetField(gameversion.FieldCanAutoBet, field.TypeBool, value)
	}
	if value, ok := gvuo.mutation.URLGameManual(); ok {
		_spec.SetField(gameversion.FieldURLGameManual, field.TypeString, value)
	}
	if gvuo.mutation.URLGameManualCleared() {
		_spec.ClearField(gameversion.FieldURLGameManual, field.TypeString)
	}
	if value, ok := gvuo.mutation.CanAutoCashout(); ok {
		_spec.SetField(gameversion.FieldCanAutoCashout, field.TypeBool, value)
	}
	if value, ok := gvuo.mutation.CanBuyBonus(); ok {
		_spec.SetField(gameversion.FieldCanBuyBonus, field.TypeBool, value)
	}
	if value, ok := gvuo.mutation.CanAnteBet(); ok {
		_spec.SetField(gameversion.FieldCanAnteBet, field.TypeBool, value)
	}
	if gvuo.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameversion.GamesTable,
			Columns: []string{gameversion.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gvuo.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameversion.GamesTable,
			Columns: []string{gameversion.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gvuo.mutation.GameTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameversion.GameTypeTable,
			Columns: []string{gameversion.GameTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gametype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gvuo.mutation.GameTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameversion.GameTypeTable,
			Columns: []string{gameversion.GameTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gametype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gvuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameversion.SessionsTable,
			Columns: []string{gameversion.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gvuo.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !gvuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameversion.SessionsTable,
			Columns: []string{gameversion.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gvuo.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameversion.SessionsTable,
			Columns: []string{gameversion.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gvuo.mutation.GameConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameversion.GameConfigsTable,
			Columns: []string{gameversion.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gvuo.mutation.RemovedGameConfigsIDs(); len(nodes) > 0 && !gvuo.mutation.GameConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameversion.GameConfigsTable,
			Columns: []string{gameversion.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gvuo.mutation.GameConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameversion.GameConfigsTable,
			Columns: []string{gameversion.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GameVersion{config: gvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gvuo.mutation.done = true
	return _node, nil
}
