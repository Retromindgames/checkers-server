// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencyversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameconfig"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/mathversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/operator"
)

// GameConfig is the model entity for the GameConfig schema.
type GameConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CanDemo holds the value of the "can_demo" field.
	CanDemo bool `json:"can_demo,omitempty"`
	// CanTournament holds the value of the "can_tournament" field.
	CanTournament bool `json:"can_tournament,omitempty"`
	// CanFreeBets holds the value of the "can_free_bets" field.
	CanFreeBets bool `json:"can_free_bets,omitempty"`
	// CanDropAndWins holds the value of the "can_drop_and_wins" field.
	CanDropAndWins bool `json:"can_drop_and_wins,omitempty"`
	// CanTurbo holds the value of the "can_turbo" field.
	CanTurbo bool `json:"can_turbo,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// CanAutoBet holds the value of the "can_auto_bet" field.
	CanAutoBet bool `json:"can_auto_bet,omitempty"`
	// CanAutoCashout holds the value of the "can_auto_cashout" field.
	CanAutoCashout bool `json:"can_auto_cashout,omitempty"`
	// CanAnteBet holds the value of the "can_ante_bet" field.
	CanAnteBet bool `json:"can_ante_bet,omitempty"`
	// CanHomeButton holds the value of the "can_home_button" field.
	CanHomeButton bool `json:"can_home_button,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameConfigQuery when eager-loading is set.
	Edges                         GameConfigEdges `json:"edges"`
	currency_version_game_configs *int
	game_game_configs             *int
	game_version_game_configs     *int
	math_version_game_configs     *int
	operator_game_configs         *int
	selectValues                  sql.SelectValues
}

// GameConfigEdges holds the relations/edges for other nodes in the graph.
type GameConfigEdges struct {
	// MathVersions holds the value of the math_versions edge.
	MathVersions *MathVersion `json:"math_versions,omitempty"`
	// GameVersions holds the value of the game_versions edge.
	GameVersions *GameVersion `json:"game_versions,omitempty"`
	// Games holds the value of the games edge.
	Games *Game `json:"games,omitempty"`
	// Operator holds the value of the Operator edge.
	Operator *Operator `json:"Operator,omitempty"`
	// CurrencyVersions holds the value of the currency_versions edge.
	CurrencyVersions *CurrencyVersion `json:"currency_versions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// MathVersionsOrErr returns the MathVersions value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameConfigEdges) MathVersionsOrErr() (*MathVersion, error) {
	if e.MathVersions != nil {
		return e.MathVersions, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: mathversion.Label}
	}
	return nil, &NotLoadedError{edge: "math_versions"}
}

// GameVersionsOrErr returns the GameVersions value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameConfigEdges) GameVersionsOrErr() (*GameVersion, error) {
	if e.GameVersions != nil {
		return e.GameVersions, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: gameversion.Label}
	}
	return nil, &NotLoadedError{edge: "game_versions"}
}

// GamesOrErr returns the Games value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameConfigEdges) GamesOrErr() (*Game, error) {
	if e.Games != nil {
		return e.Games, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: game.Label}
	}
	return nil, &NotLoadedError{edge: "games"}
}

// OperatorOrErr returns the Operator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameConfigEdges) OperatorOrErr() (*Operator, error) {
	if e.Operator != nil {
		return e.Operator, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: operator.Label}
	}
	return nil, &NotLoadedError{edge: "Operator"}
}

// CurrencyVersionsOrErr returns the CurrencyVersions value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameConfigEdges) CurrencyVersionsOrErr() (*CurrencyVersion, error) {
	if e.CurrencyVersions != nil {
		return e.CurrencyVersions, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: currencyversion.Label}
	}
	return nil, &NotLoadedError{edge: "currency_versions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GameConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gameconfig.FieldCanDemo, gameconfig.FieldCanTournament, gameconfig.FieldCanFreeBets, gameconfig.FieldCanDropAndWins, gameconfig.FieldCanTurbo, gameconfig.FieldIsActive, gameconfig.FieldCanAutoBet, gameconfig.FieldCanAutoCashout, gameconfig.FieldCanAnteBet, gameconfig.FieldCanHomeButton:
			values[i] = new(sql.NullBool)
		case gameconfig.FieldID:
			values[i] = new(sql.NullInt64)
		case gameconfig.ForeignKeys[0]: // currency_version_game_configs
			values[i] = new(sql.NullInt64)
		case gameconfig.ForeignKeys[1]: // game_game_configs
			values[i] = new(sql.NullInt64)
		case gameconfig.ForeignKeys[2]: // game_version_game_configs
			values[i] = new(sql.NullInt64)
		case gameconfig.ForeignKeys[3]: // math_version_game_configs
			values[i] = new(sql.NullInt64)
		case gameconfig.ForeignKeys[4]: // operator_game_configs
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GameConfig fields.
func (gc *GameConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gameconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gc.ID = int(value.Int64)
		case gameconfig.FieldCanDemo:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_demo", values[i])
			} else if value.Valid {
				gc.CanDemo = value.Bool
			}
		case gameconfig.FieldCanTournament:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_tournament", values[i])
			} else if value.Valid {
				gc.CanTournament = value.Bool
			}
		case gameconfig.FieldCanFreeBets:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_free_bets", values[i])
			} else if value.Valid {
				gc.CanFreeBets = value.Bool
			}
		case gameconfig.FieldCanDropAndWins:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_drop_and_wins", values[i])
			} else if value.Valid {
				gc.CanDropAndWins = value.Bool
			}
		case gameconfig.FieldCanTurbo:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_turbo", values[i])
			} else if value.Valid {
				gc.CanTurbo = value.Bool
			}
		case gameconfig.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				gc.IsActive = value.Bool
			}
		case gameconfig.FieldCanAutoBet:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_auto_bet", values[i])
			} else if value.Valid {
				gc.CanAutoBet = value.Bool
			}
		case gameconfig.FieldCanAutoCashout:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_auto_cashout", values[i])
			} else if value.Valid {
				gc.CanAutoCashout = value.Bool
			}
		case gameconfig.FieldCanAnteBet:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_ante_bet", values[i])
			} else if value.Valid {
				gc.CanAnteBet = value.Bool
			}
		case gameconfig.FieldCanHomeButton:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_home_button", values[i])
			} else if value.Valid {
				gc.CanHomeButton = value.Bool
			}
		case gameconfig.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field currency_version_game_configs", value)
			} else if value.Valid {
				gc.currency_version_game_configs = new(int)
				*gc.currency_version_game_configs = int(value.Int64)
			}
		case gameconfig.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field game_game_configs", value)
			} else if value.Valid {
				gc.game_game_configs = new(int)
				*gc.game_game_configs = int(value.Int64)
			}
		case gameconfig.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field game_version_game_configs", value)
			} else if value.Valid {
				gc.game_version_game_configs = new(int)
				*gc.game_version_game_configs = int(value.Int64)
			}
		case gameconfig.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field math_version_game_configs", value)
			} else if value.Valid {
				gc.math_version_game_configs = new(int)
				*gc.math_version_game_configs = int(value.Int64)
			}
		case gameconfig.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field operator_game_configs", value)
			} else if value.Valid {
				gc.operator_game_configs = new(int)
				*gc.operator_game_configs = int(value.Int64)
			}
		default:
			gc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GameConfig.
// This includes values selected through modifiers, order, etc.
func (gc *GameConfig) Value(name string) (ent.Value, error) {
	return gc.selectValues.Get(name)
}

// QueryMathVersions queries the "math_versions" edge of the GameConfig entity.
func (gc *GameConfig) QueryMathVersions() *MathVersionQuery {
	return NewGameConfigClient(gc.config).QueryMathVersions(gc)
}

// QueryGameVersions queries the "game_versions" edge of the GameConfig entity.
func (gc *GameConfig) QueryGameVersions() *GameVersionQuery {
	return NewGameConfigClient(gc.config).QueryGameVersions(gc)
}

// QueryGames queries the "games" edge of the GameConfig entity.
func (gc *GameConfig) QueryGames() *GameQuery {
	return NewGameConfigClient(gc.config).QueryGames(gc)
}

// QueryOperator queries the "Operator" edge of the GameConfig entity.
func (gc *GameConfig) QueryOperator() *OperatorQuery {
	return NewGameConfigClient(gc.config).QueryOperator(gc)
}

// QueryCurrencyVersions queries the "currency_versions" edge of the GameConfig entity.
func (gc *GameConfig) QueryCurrencyVersions() *CurrencyVersionQuery {
	return NewGameConfigClient(gc.config).QueryCurrencyVersions(gc)
}

// Update returns a builder for updating this GameConfig.
// Note that you need to call GameConfig.Unwrap() before calling this method if this GameConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (gc *GameConfig) Update() *GameConfigUpdateOne {
	return NewGameConfigClient(gc.config).UpdateOne(gc)
}

// Unwrap unwraps the GameConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gc *GameConfig) Unwrap() *GameConfig {
	_tx, ok := gc.config.driver.(*txDriver)
	if !ok {
		panic("ent: GameConfig is not a transactional entity")
	}
	gc.config.driver = _tx.drv
	return gc
}

// String implements the fmt.Stringer.
func (gc *GameConfig) String() string {
	var builder strings.Builder
	builder.WriteString("GameConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gc.ID))
	builder.WriteString("can_demo=")
	builder.WriteString(fmt.Sprintf("%v", gc.CanDemo))
	builder.WriteString(", ")
	builder.WriteString("can_tournament=")
	builder.WriteString(fmt.Sprintf("%v", gc.CanTournament))
	builder.WriteString(", ")
	builder.WriteString("can_free_bets=")
	builder.WriteString(fmt.Sprintf("%v", gc.CanFreeBets))
	builder.WriteString(", ")
	builder.WriteString("can_drop_and_wins=")
	builder.WriteString(fmt.Sprintf("%v", gc.CanDropAndWins))
	builder.WriteString(", ")
	builder.WriteString("can_turbo=")
	builder.WriteString(fmt.Sprintf("%v", gc.CanTurbo))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", gc.IsActive))
	builder.WriteString(", ")
	builder.WriteString("can_auto_bet=")
	builder.WriteString(fmt.Sprintf("%v", gc.CanAutoBet))
	builder.WriteString(", ")
	builder.WriteString("can_auto_cashout=")
	builder.WriteString(fmt.Sprintf("%v", gc.CanAutoCashout))
	builder.WriteString(", ")
	builder.WriteString("can_ante_bet=")
	builder.WriteString(fmt.Sprintf("%v", gc.CanAnteBet))
	builder.WriteString(", ")
	builder.WriteString("can_home_button=")
	builder.WriteString(fmt.Sprintf("%v", gc.CanHomeButton))
	builder.WriteByte(')')
	return builder.String()
}

// GameConfigs is a parsable slice of GameConfig.
type GameConfigs []*GameConfig
