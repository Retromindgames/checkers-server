// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencie"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencyversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameconfig"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gametype"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
	"github.com/Lavizord/checkers-server/postgrescli/ent/session"
)

// CurrencyVersionQuery is the builder for querying CurrencyVersion entities.
type CurrencyVersionQuery struct {
	config
	ctx             *QueryContext
	order           []currencyversion.OrderOption
	inters          []Interceptor
	predicates      []predicate.CurrencyVersion
	withCurrencie   *CurrencieQuery
	withGameTypes   *GameTypeQuery
	withSessions    *SessionQuery
	withGameConfigs *GameConfigQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CurrencyVersionQuery builder.
func (cvq *CurrencyVersionQuery) Where(ps ...predicate.CurrencyVersion) *CurrencyVersionQuery {
	cvq.predicates = append(cvq.predicates, ps...)
	return cvq
}

// Limit the number of records to be returned by this query.
func (cvq *CurrencyVersionQuery) Limit(limit int) *CurrencyVersionQuery {
	cvq.ctx.Limit = &limit
	return cvq
}

// Offset to start from.
func (cvq *CurrencyVersionQuery) Offset(offset int) *CurrencyVersionQuery {
	cvq.ctx.Offset = &offset
	return cvq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cvq *CurrencyVersionQuery) Unique(unique bool) *CurrencyVersionQuery {
	cvq.ctx.Unique = &unique
	return cvq
}

// Order specifies how the records should be ordered.
func (cvq *CurrencyVersionQuery) Order(o ...currencyversion.OrderOption) *CurrencyVersionQuery {
	cvq.order = append(cvq.order, o...)
	return cvq
}

// QueryCurrencie chains the current query on the "Currencie" edge.
func (cvq *CurrencyVersionQuery) QueryCurrencie() *CurrencieQuery {
	query := (&CurrencieClient{config: cvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(currencyversion.Table, currencyversion.FieldID, selector),
			sqlgraph.To(currencie.Table, currencie.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, currencyversion.CurrencieTable, currencyversion.CurrencieColumn),
		)
		fromU = sqlgraph.SetNeighbors(cvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGameTypes chains the current query on the "game_types" edge.
func (cvq *CurrencyVersionQuery) QueryGameTypes() *GameTypeQuery {
	query := (&GameTypeClient{config: cvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(currencyversion.Table, currencyversion.FieldID, selector),
			sqlgraph.To(gametype.Table, gametype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, currencyversion.GameTypesTable, currencyversion.GameTypesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySessions chains the current query on the "sessions" edge.
func (cvq *CurrencyVersionQuery) QuerySessions() *SessionQuery {
	query := (&SessionClient{config: cvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(currencyversion.Table, currencyversion.FieldID, selector),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, currencyversion.SessionsTable, currencyversion.SessionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGameConfigs chains the current query on the "game_configs" edge.
func (cvq *CurrencyVersionQuery) QueryGameConfigs() *GameConfigQuery {
	query := (&GameConfigClient{config: cvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(currencyversion.Table, currencyversion.FieldID, selector),
			sqlgraph.To(gameconfig.Table, gameconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, currencyversion.GameConfigsTable, currencyversion.GameConfigsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CurrencyVersion entity from the query.
// Returns a *NotFoundError when no CurrencyVersion was found.
func (cvq *CurrencyVersionQuery) First(ctx context.Context) (*CurrencyVersion, error) {
	nodes, err := cvq.Limit(1).All(setContextOp(ctx, cvq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{currencyversion.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cvq *CurrencyVersionQuery) FirstX(ctx context.Context) *CurrencyVersion {
	node, err := cvq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CurrencyVersion ID from the query.
// Returns a *NotFoundError when no CurrencyVersion ID was found.
func (cvq *CurrencyVersionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cvq.Limit(1).IDs(setContextOp(ctx, cvq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{currencyversion.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cvq *CurrencyVersionQuery) FirstIDX(ctx context.Context) int {
	id, err := cvq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CurrencyVersion entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CurrencyVersion entity is found.
// Returns a *NotFoundError when no CurrencyVersion entities are found.
func (cvq *CurrencyVersionQuery) Only(ctx context.Context) (*CurrencyVersion, error) {
	nodes, err := cvq.Limit(2).All(setContextOp(ctx, cvq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{currencyversion.Label}
	default:
		return nil, &NotSingularError{currencyversion.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cvq *CurrencyVersionQuery) OnlyX(ctx context.Context) *CurrencyVersion {
	node, err := cvq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CurrencyVersion ID in the query.
// Returns a *NotSingularError when more than one CurrencyVersion ID is found.
// Returns a *NotFoundError when no entities are found.
func (cvq *CurrencyVersionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cvq.Limit(2).IDs(setContextOp(ctx, cvq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{currencyversion.Label}
	default:
		err = &NotSingularError{currencyversion.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cvq *CurrencyVersionQuery) OnlyIDX(ctx context.Context) int {
	id, err := cvq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CurrencyVersions.
func (cvq *CurrencyVersionQuery) All(ctx context.Context) ([]*CurrencyVersion, error) {
	ctx = setContextOp(ctx, cvq.ctx, ent.OpQueryAll)
	if err := cvq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CurrencyVersion, *CurrencyVersionQuery]()
	return withInterceptors[[]*CurrencyVersion](ctx, cvq, qr, cvq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cvq *CurrencyVersionQuery) AllX(ctx context.Context) []*CurrencyVersion {
	nodes, err := cvq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CurrencyVersion IDs.
func (cvq *CurrencyVersionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if cvq.ctx.Unique == nil && cvq.path != nil {
		cvq.Unique(true)
	}
	ctx = setContextOp(ctx, cvq.ctx, ent.OpQueryIDs)
	if err = cvq.Select(currencyversion.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cvq *CurrencyVersionQuery) IDsX(ctx context.Context) []int {
	ids, err := cvq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cvq *CurrencyVersionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cvq.ctx, ent.OpQueryCount)
	if err := cvq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cvq, querierCount[*CurrencyVersionQuery](), cvq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cvq *CurrencyVersionQuery) CountX(ctx context.Context) int {
	count, err := cvq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cvq *CurrencyVersionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cvq.ctx, ent.OpQueryExist)
	switch _, err := cvq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cvq *CurrencyVersionQuery) ExistX(ctx context.Context) bool {
	exist, err := cvq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CurrencyVersionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cvq *CurrencyVersionQuery) Clone() *CurrencyVersionQuery {
	if cvq == nil {
		return nil
	}
	return &CurrencyVersionQuery{
		config:          cvq.config,
		ctx:             cvq.ctx.Clone(),
		order:           append([]currencyversion.OrderOption{}, cvq.order...),
		inters:          append([]Interceptor{}, cvq.inters...),
		predicates:      append([]predicate.CurrencyVersion{}, cvq.predicates...),
		withCurrencie:   cvq.withCurrencie.Clone(),
		withGameTypes:   cvq.withGameTypes.Clone(),
		withSessions:    cvq.withSessions.Clone(),
		withGameConfigs: cvq.withGameConfigs.Clone(),
		// clone intermediate query.
		sql:  cvq.sql.Clone(),
		path: cvq.path,
	}
}

// WithCurrencie tells the query-builder to eager-load the nodes that are connected to
// the "Currencie" edge. The optional arguments are used to configure the query builder of the edge.
func (cvq *CurrencyVersionQuery) WithCurrencie(opts ...func(*CurrencieQuery)) *CurrencyVersionQuery {
	query := (&CurrencieClient{config: cvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cvq.withCurrencie = query
	return cvq
}

// WithGameTypes tells the query-builder to eager-load the nodes that are connected to
// the "game_types" edge. The optional arguments are used to configure the query builder of the edge.
func (cvq *CurrencyVersionQuery) WithGameTypes(opts ...func(*GameTypeQuery)) *CurrencyVersionQuery {
	query := (&GameTypeClient{config: cvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cvq.withGameTypes = query
	return cvq
}

// WithSessions tells the query-builder to eager-load the nodes that are connected to
// the "sessions" edge. The optional arguments are used to configure the query builder of the edge.
func (cvq *CurrencyVersionQuery) WithSessions(opts ...func(*SessionQuery)) *CurrencyVersionQuery {
	query := (&SessionClient{config: cvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cvq.withSessions = query
	return cvq
}

// WithGameConfigs tells the query-builder to eager-load the nodes that are connected to
// the "game_configs" edge. The optional arguments are used to configure the query builder of the edge.
func (cvq *CurrencyVersionQuery) WithGameConfigs(opts ...func(*GameConfigQuery)) *CurrencyVersionQuery {
	query := (&GameConfigClient{config: cvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cvq.withGameConfigs = query
	return cvq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CurrencyVersion.Query().
//		GroupBy(currencyversion.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cvq *CurrencyVersionQuery) GroupBy(field string, fields ...string) *CurrencyVersionGroupBy {
	cvq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CurrencyVersionGroupBy{build: cvq}
	grbuild.flds = &cvq.ctx.Fields
	grbuild.label = currencyversion.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.CurrencyVersion.Query().
//		Select(currencyversion.FieldName).
//		Scan(ctx, &v)
func (cvq *CurrencyVersionQuery) Select(fields ...string) *CurrencyVersionSelect {
	cvq.ctx.Fields = append(cvq.ctx.Fields, fields...)
	sbuild := &CurrencyVersionSelect{CurrencyVersionQuery: cvq}
	sbuild.label = currencyversion.Label
	sbuild.flds, sbuild.scan = &cvq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CurrencyVersionSelect configured with the given aggregations.
func (cvq *CurrencyVersionQuery) Aggregate(fns ...AggregateFunc) *CurrencyVersionSelect {
	return cvq.Select().Aggregate(fns...)
}

func (cvq *CurrencyVersionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cvq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cvq); err != nil {
				return err
			}
		}
	}
	for _, f := range cvq.ctx.Fields {
		if !currencyversion.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cvq.path != nil {
		prev, err := cvq.path(ctx)
		if err != nil {
			return err
		}
		cvq.sql = prev
	}
	return nil
}

func (cvq *CurrencyVersionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CurrencyVersion, error) {
	var (
		nodes       = []*CurrencyVersion{}
		withFKs     = cvq.withFKs
		_spec       = cvq.querySpec()
		loadedTypes = [4]bool{
			cvq.withCurrencie != nil,
			cvq.withGameTypes != nil,
			cvq.withSessions != nil,
			cvq.withGameConfigs != nil,
		}
	)
	if cvq.withCurrencie != nil || cvq.withGameTypes != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, currencyversion.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CurrencyVersion).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CurrencyVersion{config: cvq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cvq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cvq.withCurrencie; query != nil {
		if err := cvq.loadCurrencie(ctx, query, nodes, nil,
			func(n *CurrencyVersion, e *Currencie) { n.Edges.Currencie = e }); err != nil {
			return nil, err
		}
	}
	if query := cvq.withGameTypes; query != nil {
		if err := cvq.loadGameTypes(ctx, query, nodes, nil,
			func(n *CurrencyVersion, e *GameType) { n.Edges.GameTypes = e }); err != nil {
			return nil, err
		}
	}
	if query := cvq.withSessions; query != nil {
		if err := cvq.loadSessions(ctx, query, nodes,
			func(n *CurrencyVersion) { n.Edges.Sessions = []*Session{} },
			func(n *CurrencyVersion, e *Session) { n.Edges.Sessions = append(n.Edges.Sessions, e) }); err != nil {
			return nil, err
		}
	}
	if query := cvq.withGameConfigs; query != nil {
		if err := cvq.loadGameConfigs(ctx, query, nodes,
			func(n *CurrencyVersion) { n.Edges.GameConfigs = []*GameConfig{} },
			func(n *CurrencyVersion, e *GameConfig) { n.Edges.GameConfigs = append(n.Edges.GameConfigs, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cvq *CurrencyVersionQuery) loadCurrencie(ctx context.Context, query *CurrencieQuery, nodes []*CurrencyVersion, init func(*CurrencyVersion), assign func(*CurrencyVersion, *Currencie)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CurrencyVersion)
	for i := range nodes {
		if nodes[i].currencie_currency_versions == nil {
			continue
		}
		fk := *nodes[i].currencie_currency_versions
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(currencie.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "currencie_currency_versions" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cvq *CurrencyVersionQuery) loadGameTypes(ctx context.Context, query *GameTypeQuery, nodes []*CurrencyVersion, init func(*CurrencyVersion), assign func(*CurrencyVersion, *GameType)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CurrencyVersion)
	for i := range nodes {
		if nodes[i].game_type_currency_versions == nil {
			continue
		}
		fk := *nodes[i].game_type_currency_versions
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(gametype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "game_type_currency_versions" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cvq *CurrencyVersionQuery) loadSessions(ctx context.Context, query *SessionQuery, nodes []*CurrencyVersion, init func(*CurrencyVersion), assign func(*CurrencyVersion, *Session)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*CurrencyVersion)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Session(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(currencyversion.SessionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.currency_version_sessions
		if fk == nil {
			return fmt.Errorf(`foreign-key "currency_version_sessions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "currency_version_sessions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cvq *CurrencyVersionQuery) loadGameConfigs(ctx context.Context, query *GameConfigQuery, nodes []*CurrencyVersion, init func(*CurrencyVersion), assign func(*CurrencyVersion, *GameConfig)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*CurrencyVersion)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.GameConfig(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(currencyversion.GameConfigsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.currency_version_game_configs
		if fk == nil {
			return fmt.Errorf(`foreign-key "currency_version_game_configs" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "currency_version_game_configs" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (cvq *CurrencyVersionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cvq.querySpec()
	_spec.Node.Columns = cvq.ctx.Fields
	if len(cvq.ctx.Fields) > 0 {
		_spec.Unique = cvq.ctx.Unique != nil && *cvq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cvq.driver, _spec)
}

func (cvq *CurrencyVersionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(currencyversion.Table, currencyversion.Columns, sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt))
	_spec.From = cvq.sql
	if unique := cvq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cvq.path != nil {
		_spec.Unique = true
	}
	if fields := cvq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, currencyversion.FieldID)
		for i := range fields {
			if fields[i] != currencyversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cvq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cvq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cvq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cvq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cvq *CurrencyVersionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cvq.driver.Dialect())
	t1 := builder.Table(currencyversion.Table)
	columns := cvq.ctx.Fields
	if len(columns) == 0 {
		columns = currencyversion.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cvq.sql != nil {
		selector = cvq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cvq.ctx.Unique != nil && *cvq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cvq.predicates {
		p(selector)
	}
	for _, p := range cvq.order {
		p(selector)
	}
	if offset := cvq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cvq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CurrencyVersionGroupBy is the group-by builder for CurrencyVersion entities.
type CurrencyVersionGroupBy struct {
	selector
	build *CurrencyVersionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cvgb *CurrencyVersionGroupBy) Aggregate(fns ...AggregateFunc) *CurrencyVersionGroupBy {
	cvgb.fns = append(cvgb.fns, fns...)
	return cvgb
}

// Scan applies the selector query and scans the result into the given value.
func (cvgb *CurrencyVersionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cvgb.build.ctx, ent.OpQueryGroupBy)
	if err := cvgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CurrencyVersionQuery, *CurrencyVersionGroupBy](ctx, cvgb.build, cvgb, cvgb.build.inters, v)
}

func (cvgb *CurrencyVersionGroupBy) sqlScan(ctx context.Context, root *CurrencyVersionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cvgb.fns))
	for _, fn := range cvgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cvgb.flds)+len(cvgb.fns))
		for _, f := range *cvgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cvgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cvgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CurrencyVersionSelect is the builder for selecting fields of CurrencyVersion entities.
type CurrencyVersionSelect struct {
	*CurrencyVersionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cvs *CurrencyVersionSelect) Aggregate(fns ...AggregateFunc) *CurrencyVersionSelect {
	cvs.fns = append(cvs.fns, fns...)
	return cvs
}

// Scan applies the selector query and scans the result into the given value.
func (cvs *CurrencyVersionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cvs.ctx, ent.OpQuerySelect)
	if err := cvs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CurrencyVersionQuery, *CurrencyVersionSelect](ctx, cvs.CurrencyVersionQuery, cvs, cvs.inters, v)
}

func (cvs *CurrencyVersionSelect) sqlScan(ctx context.Context, root *CurrencyVersionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cvs.fns))
	for _, fn := range cvs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cvs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cvs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
