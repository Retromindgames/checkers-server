// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/feature"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gamefeature"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
	"github.com/Lavizord/checkers-server/postgrescli/ent/seriefeature"
)

// FeatureUpdate is the builder for updating Feature entities.
type FeatureUpdate struct {
	config
	hooks    []Hook
	mutation *FeatureMutation
}

// Where appends a list predicates to the FeatureUpdate builder.
func (fu *FeatureUpdate) Where(ps ...predicate.Feature) *FeatureUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetName sets the "name" field.
func (fu *FeatureUpdate) SetName(s string) *FeatureUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fu *FeatureUpdate) SetNillableName(s *string) *FeatureUpdate {
	if s != nil {
		fu.SetName(*s)
	}
	return fu
}

// SetExternalID sets the "external_id" field.
func (fu *FeatureUpdate) SetExternalID(s string) *FeatureUpdate {
	fu.mutation.SetExternalID(s)
	return fu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (fu *FeatureUpdate) SetNillableExternalID(s *string) *FeatureUpdate {
	if s != nil {
		fu.SetExternalID(*s)
	}
	return fu
}

// AddGameFeatureIDs adds the "game_features" edge to the GameFeature entity by IDs.
func (fu *FeatureUpdate) AddGameFeatureIDs(ids ...int) *FeatureUpdate {
	fu.mutation.AddGameFeatureIDs(ids...)
	return fu
}

// AddGameFeatures adds the "game_features" edges to the GameFeature entity.
func (fu *FeatureUpdate) AddGameFeatures(g ...*GameFeature) *FeatureUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return fu.AddGameFeatureIDs(ids...)
}

// AddSerieFeatureIDs adds the "serie_features" edge to the SerieFeature entity by IDs.
func (fu *FeatureUpdate) AddSerieFeatureIDs(ids ...int) *FeatureUpdate {
	fu.mutation.AddSerieFeatureIDs(ids...)
	return fu
}

// AddSerieFeatures adds the "serie_features" edges to the SerieFeature entity.
func (fu *FeatureUpdate) AddSerieFeatures(s ...*SerieFeature) *FeatureUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fu.AddSerieFeatureIDs(ids...)
}

// Mutation returns the FeatureMutation object of the builder.
func (fu *FeatureUpdate) Mutation() *FeatureMutation {
	return fu.mutation
}

// ClearGameFeatures clears all "game_features" edges to the GameFeature entity.
func (fu *FeatureUpdate) ClearGameFeatures() *FeatureUpdate {
	fu.mutation.ClearGameFeatures()
	return fu
}

// RemoveGameFeatureIDs removes the "game_features" edge to GameFeature entities by IDs.
func (fu *FeatureUpdate) RemoveGameFeatureIDs(ids ...int) *FeatureUpdate {
	fu.mutation.RemoveGameFeatureIDs(ids...)
	return fu
}

// RemoveGameFeatures removes "game_features" edges to GameFeature entities.
func (fu *FeatureUpdate) RemoveGameFeatures(g ...*GameFeature) *FeatureUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return fu.RemoveGameFeatureIDs(ids...)
}

// ClearSerieFeatures clears all "serie_features" edges to the SerieFeature entity.
func (fu *FeatureUpdate) ClearSerieFeatures() *FeatureUpdate {
	fu.mutation.ClearSerieFeatures()
	return fu
}

// RemoveSerieFeatureIDs removes the "serie_features" edge to SerieFeature entities by IDs.
func (fu *FeatureUpdate) RemoveSerieFeatureIDs(ids ...int) *FeatureUpdate {
	fu.mutation.RemoveSerieFeatureIDs(ids...)
	return fu
}

// RemoveSerieFeatures removes "serie_features" edges to SerieFeature entities.
func (fu *FeatureUpdate) RemoveSerieFeatures(s ...*SerieFeature) *FeatureUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fu.RemoveSerieFeatureIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FeatureUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FeatureUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FeatureUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FeatureUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FeatureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(feature.Table, feature.Columns, sqlgraph.NewFieldSpec(feature.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(feature.FieldName, field.TypeString, value)
	}
	if value, ok := fu.mutation.ExternalID(); ok {
		_spec.SetField(feature.FieldExternalID, field.TypeString, value)
	}
	if fu.mutation.GameFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feature.GameFeaturesTable,
			Columns: []string{feature.GameFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamefeature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedGameFeaturesIDs(); len(nodes) > 0 && !fu.mutation.GameFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feature.GameFeaturesTable,
			Columns: []string{feature.GameFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamefeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.GameFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feature.GameFeaturesTable,
			Columns: []string{feature.GameFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamefeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.SerieFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feature.SerieFeaturesTable,
			Columns: []string{feature.SerieFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seriefeature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedSerieFeaturesIDs(); len(nodes) > 0 && !fu.mutation.SerieFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feature.SerieFeaturesTable,
			Columns: []string{feature.SerieFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seriefeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.SerieFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feature.SerieFeaturesTable,
			Columns: []string{feature.SerieFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seriefeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FeatureUpdateOne is the builder for updating a single Feature entity.
type FeatureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeatureMutation
}

// SetName sets the "name" field.
func (fuo *FeatureUpdateOne) SetName(s string) *FeatureUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuo *FeatureUpdateOne) SetNillableName(s *string) *FeatureUpdateOne {
	if s != nil {
		fuo.SetName(*s)
	}
	return fuo
}

// SetExternalID sets the "external_id" field.
func (fuo *FeatureUpdateOne) SetExternalID(s string) *FeatureUpdateOne {
	fuo.mutation.SetExternalID(s)
	return fuo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (fuo *FeatureUpdateOne) SetNillableExternalID(s *string) *FeatureUpdateOne {
	if s != nil {
		fuo.SetExternalID(*s)
	}
	return fuo
}

// AddGameFeatureIDs adds the "game_features" edge to the GameFeature entity by IDs.
func (fuo *FeatureUpdateOne) AddGameFeatureIDs(ids ...int) *FeatureUpdateOne {
	fuo.mutation.AddGameFeatureIDs(ids...)
	return fuo
}

// AddGameFeatures adds the "game_features" edges to the GameFeature entity.
func (fuo *FeatureUpdateOne) AddGameFeatures(g ...*GameFeature) *FeatureUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return fuo.AddGameFeatureIDs(ids...)
}

// AddSerieFeatureIDs adds the "serie_features" edge to the SerieFeature entity by IDs.
func (fuo *FeatureUpdateOne) AddSerieFeatureIDs(ids ...int) *FeatureUpdateOne {
	fuo.mutation.AddSerieFeatureIDs(ids...)
	return fuo
}

// AddSerieFeatures adds the "serie_features" edges to the SerieFeature entity.
func (fuo *FeatureUpdateOne) AddSerieFeatures(s ...*SerieFeature) *FeatureUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fuo.AddSerieFeatureIDs(ids...)
}

// Mutation returns the FeatureMutation object of the builder.
func (fuo *FeatureUpdateOne) Mutation() *FeatureMutation {
	return fuo.mutation
}

// ClearGameFeatures clears all "game_features" edges to the GameFeature entity.
func (fuo *FeatureUpdateOne) ClearGameFeatures() *FeatureUpdateOne {
	fuo.mutation.ClearGameFeatures()
	return fuo
}

// RemoveGameFeatureIDs removes the "game_features" edge to GameFeature entities by IDs.
func (fuo *FeatureUpdateOne) RemoveGameFeatureIDs(ids ...int) *FeatureUpdateOne {
	fuo.mutation.RemoveGameFeatureIDs(ids...)
	return fuo
}

// RemoveGameFeatures removes "game_features" edges to GameFeature entities.
func (fuo *FeatureUpdateOne) RemoveGameFeatures(g ...*GameFeature) *FeatureUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return fuo.RemoveGameFeatureIDs(ids...)
}

// ClearSerieFeatures clears all "serie_features" edges to the SerieFeature entity.
func (fuo *FeatureUpdateOne) ClearSerieFeatures() *FeatureUpdateOne {
	fuo.mutation.ClearSerieFeatures()
	return fuo
}

// RemoveSerieFeatureIDs removes the "serie_features" edge to SerieFeature entities by IDs.
func (fuo *FeatureUpdateOne) RemoveSerieFeatureIDs(ids ...int) *FeatureUpdateOne {
	fuo.mutation.RemoveSerieFeatureIDs(ids...)
	return fuo
}

// RemoveSerieFeatures removes "serie_features" edges to SerieFeature entities.
func (fuo *FeatureUpdateOne) RemoveSerieFeatures(s ...*SerieFeature) *FeatureUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fuo.RemoveSerieFeatureIDs(ids...)
}

// Where appends a list predicates to the FeatureUpdate builder.
func (fuo *FeatureUpdateOne) Where(ps ...predicate.Feature) *FeatureUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FeatureUpdateOne) Select(field string, fields ...string) *FeatureUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Feature entity.
func (fuo *FeatureUpdateOne) Save(ctx context.Context) (*Feature, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FeatureUpdateOne) SaveX(ctx context.Context) *Feature {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FeatureUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FeatureUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FeatureUpdateOne) sqlSave(ctx context.Context) (_node *Feature, err error) {
	_spec := sqlgraph.NewUpdateSpec(feature.Table, feature.Columns, sqlgraph.NewFieldSpec(feature.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Feature.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feature.FieldID)
		for _, f := range fields {
			if !feature.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(feature.FieldName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.ExternalID(); ok {
		_spec.SetField(feature.FieldExternalID, field.TypeString, value)
	}
	if fuo.mutation.GameFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feature.GameFeaturesTable,
			Columns: []string{feature.GameFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamefeature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedGameFeaturesIDs(); len(nodes) > 0 && !fuo.mutation.GameFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feature.GameFeaturesTable,
			Columns: []string{feature.GameFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamefeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.GameFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feature.GameFeaturesTable,
			Columns: []string{feature.GameFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamefeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.SerieFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feature.SerieFeaturesTable,
			Columns: []string{feature.SerieFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seriefeature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedSerieFeaturesIDs(); len(nodes) > 0 && !fuo.mutation.SerieFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feature.SerieFeaturesTable,
			Columns: []string{feature.SerieFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seriefeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.SerieFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feature.SerieFeaturesTable,
			Columns: []string{feature.SerieFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seriefeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Feature{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
