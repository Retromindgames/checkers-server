// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencie"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencyversion"
)

// CurrencieCreate is the builder for creating a Currencie entity.
type CurrencieCreate struct {
	config
	mutation *CurrencieMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cc *CurrencieCreate) SetName(s string) *CurrencieCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetSymbol sets the "symbol" field.
func (cc *CurrencieCreate) SetSymbol(s string) *CurrencieCreate {
	cc.mutation.SetSymbol(s)
	return cc
}

// SetThousandsSeparator sets the "thousands_separator" field.
func (cc *CurrencieCreate) SetThousandsSeparator(s string) *CurrencieCreate {
	cc.mutation.SetThousandsSeparator(s)
	return cc
}

// SetUnitsSeparator sets the "units_separator" field.
func (cc *CurrencieCreate) SetUnitsSeparator(s string) *CurrencieCreate {
	cc.mutation.SetUnitsSeparator(s)
	return cc
}

// SetSymbolPosition sets the "symbol_position" field.
func (cc *CurrencieCreate) SetSymbolPosition(s string) *CurrencieCreate {
	cc.mutation.SetSymbolPosition(s)
	return cc
}

// SetDenominator sets the "denominator" field.
func (cc *CurrencieCreate) SetDenominator(i int) *CurrencieCreate {
	cc.mutation.SetDenominator(i)
	return cc
}

// AddCurrencyVersionIDs adds the "currency_versions" edge to the CurrencyVersion entity by IDs.
func (cc *CurrencieCreate) AddCurrencyVersionIDs(ids ...int) *CurrencieCreate {
	cc.mutation.AddCurrencyVersionIDs(ids...)
	return cc
}

// AddCurrencyVersions adds the "currency_versions" edges to the CurrencyVersion entity.
func (cc *CurrencieCreate) AddCurrencyVersions(c ...*CurrencyVersion) *CurrencieCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCurrencyVersionIDs(ids...)
}

// Mutation returns the CurrencieMutation object of the builder.
func (cc *CurrencieCreate) Mutation() *CurrencieMutation {
	return cc.mutation
}

// Save creates the Currencie in the database.
func (cc *CurrencieCreate) Save(ctx context.Context) (*Currencie, error) {
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CurrencieCreate) SaveX(ctx context.Context) *Currencie {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CurrencieCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CurrencieCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CurrencieCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Currencie.name"`)}
	}
	if _, ok := cc.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "Currencie.symbol"`)}
	}
	if _, ok := cc.mutation.ThousandsSeparator(); !ok {
		return &ValidationError{Name: "thousands_separator", err: errors.New(`ent: missing required field "Currencie.thousands_separator"`)}
	}
	if _, ok := cc.mutation.UnitsSeparator(); !ok {
		return &ValidationError{Name: "units_separator", err: errors.New(`ent: missing required field "Currencie.units_separator"`)}
	}
	if _, ok := cc.mutation.SymbolPosition(); !ok {
		return &ValidationError{Name: "symbol_position", err: errors.New(`ent: missing required field "Currencie.symbol_position"`)}
	}
	if _, ok := cc.mutation.Denominator(); !ok {
		return &ValidationError{Name: "denominator", err: errors.New(`ent: missing required field "Currencie.denominator"`)}
	}
	return nil
}

func (cc *CurrencieCreate) sqlSave(ctx context.Context) (*Currencie, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CurrencieCreate) createSpec() (*Currencie, *sqlgraph.CreateSpec) {
	var (
		_node = &Currencie{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(currencie.Table, sqlgraph.NewFieldSpec(currencie.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(currencie.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Symbol(); ok {
		_spec.SetField(currencie.FieldSymbol, field.TypeString, value)
		_node.Symbol = value
	}
	if value, ok := cc.mutation.ThousandsSeparator(); ok {
		_spec.SetField(currencie.FieldThousandsSeparator, field.TypeString, value)
		_node.ThousandsSeparator = value
	}
	if value, ok := cc.mutation.UnitsSeparator(); ok {
		_spec.SetField(currencie.FieldUnitsSeparator, field.TypeString, value)
		_node.UnitsSeparator = value
	}
	if value, ok := cc.mutation.SymbolPosition(); ok {
		_spec.SetField(currencie.FieldSymbolPosition, field.TypeString, value)
		_node.SymbolPosition = value
	}
	if value, ok := cc.mutation.Denominator(); ok {
		_spec.SetField(currencie.FieldDenominator, field.TypeInt, value)
		_node.Denominator = value
	}
	if nodes := cc.mutation.CurrencyVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencie.CurrencyVersionsTable,
			Columns: []string{currencie.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CurrencieCreateBulk is the builder for creating many Currencie entities in bulk.
type CurrencieCreateBulk struct {
	config
	err      error
	builders []*CurrencieCreate
}

// Save creates the Currencie entities in the database.
func (ccb *CurrencieCreateBulk) Save(ctx context.Context) ([]*Currencie, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Currencie, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CurrencieMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CurrencieCreateBulk) SaveX(ctx context.Context) []*Currencie {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CurrencieCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CurrencieCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
