// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currency"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencyversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameconfig"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gametype"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
	"github.com/Lavizord/checkers-server/postgrescli/ent/session"
)

// CurrencyVersionUpdate is the builder for updating CurrencyVersion entities.
type CurrencyVersionUpdate struct {
	config
	hooks    []Hook
	mutation *CurrencyVersionMutation
}

// Where appends a list predicates to the CurrencyVersionUpdate builder.
func (cvu *CurrencyVersionUpdate) Where(ps ...predicate.CurrencyVersion) *CurrencyVersionUpdate {
	cvu.mutation.Where(ps...)
	return cvu
}

// SetName sets the "name" field.
func (cvu *CurrencyVersionUpdate) SetName(s string) *CurrencyVersionUpdate {
	cvu.mutation.SetName(s)
	return cvu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cvu *CurrencyVersionUpdate) SetNillableName(s *string) *CurrencyVersionUpdate {
	if s != nil {
		cvu.SetName(*s)
	}
	return cvu
}

// SetMinBet sets the "min_bet" field.
func (cvu *CurrencyVersionUpdate) SetMinBet(i int) *CurrencyVersionUpdate {
	cvu.mutation.ResetMinBet()
	cvu.mutation.SetMinBet(i)
	return cvu
}

// SetNillableMinBet sets the "min_bet" field if the given value is not nil.
func (cvu *CurrencyVersionUpdate) SetNillableMinBet(i *int) *CurrencyVersionUpdate {
	if i != nil {
		cvu.SetMinBet(*i)
	}
	return cvu
}

// AddMinBet adds i to the "min_bet" field.
func (cvu *CurrencyVersionUpdate) AddMinBet(i int) *CurrencyVersionUpdate {
	cvu.mutation.AddMinBet(i)
	return cvu
}

// ClearMinBet clears the value of the "min_bet" field.
func (cvu *CurrencyVersionUpdate) ClearMinBet() *CurrencyVersionUpdate {
	cvu.mutation.ClearMinBet()
	return cvu
}

// SetMaxExp sets the "max_exp" field.
func (cvu *CurrencyVersionUpdate) SetMaxExp(i int) *CurrencyVersionUpdate {
	cvu.mutation.ResetMaxExp()
	cvu.mutation.SetMaxExp(i)
	return cvu
}

// SetNillableMaxExp sets the "max_exp" field if the given value is not nil.
func (cvu *CurrencyVersionUpdate) SetNillableMaxExp(i *int) *CurrencyVersionUpdate {
	if i != nil {
		cvu.SetMaxExp(*i)
	}
	return cvu
}

// AddMaxExp adds i to the "max_exp" field.
func (cvu *CurrencyVersionUpdate) AddMaxExp(i int) *CurrencyVersionUpdate {
	cvu.mutation.AddMaxExp(i)
	return cvu
}

// ClearMaxExp clears the value of the "max_exp" field.
func (cvu *CurrencyVersionUpdate) ClearMaxExp() *CurrencyVersionUpdate {
	cvu.mutation.ClearMaxExp()
	return cvu
}

// SetDenominator sets the "denominator" field.
func (cvu *CurrencyVersionUpdate) SetDenominator(i int) *CurrencyVersionUpdate {
	cvu.mutation.ResetDenominator()
	cvu.mutation.SetDenominator(i)
	return cvu
}

// SetNillableDenominator sets the "denominator" field if the given value is not nil.
func (cvu *CurrencyVersionUpdate) SetNillableDenominator(i *int) *CurrencyVersionUpdate {
	if i != nil {
		cvu.SetDenominator(*i)
	}
	return cvu
}

// AddDenominator adds i to the "denominator" field.
func (cvu *CurrencyVersionUpdate) AddDenominator(i int) *CurrencyVersionUpdate {
	cvu.mutation.AddDenominator(i)
	return cvu
}

// SetDefaultMultiplier sets the "default_multiplier" field.
func (cvu *CurrencyVersionUpdate) SetDefaultMultiplier(i int) *CurrencyVersionUpdate {
	cvu.mutation.ResetDefaultMultiplier()
	cvu.mutation.SetDefaultMultiplier(i)
	return cvu
}

// SetNillableDefaultMultiplier sets the "default_multiplier" field if the given value is not nil.
func (cvu *CurrencyVersionUpdate) SetNillableDefaultMultiplier(i *int) *CurrencyVersionUpdate {
	if i != nil {
		cvu.SetDefaultMultiplier(*i)
	}
	return cvu
}

// AddDefaultMultiplier adds i to the "default_multiplier" field.
func (cvu *CurrencyVersionUpdate) AddDefaultMultiplier(i int) *CurrencyVersionUpdate {
	cvu.mutation.AddDefaultMultiplier(i)
	return cvu
}

// ClearDefaultMultiplier clears the value of the "default_multiplier" field.
func (cvu *CurrencyVersionUpdate) ClearDefaultMultiplier() *CurrencyVersionUpdate {
	cvu.mutation.ClearDefaultMultiplier()
	return cvu
}

// SetDeprecated sets the "deprecated" field.
func (cvu *CurrencyVersionUpdate) SetDeprecated(b bool) *CurrencyVersionUpdate {
	cvu.mutation.SetDeprecated(b)
	return cvu
}

// SetNillableDeprecated sets the "deprecated" field if the given value is not nil.
func (cvu *CurrencyVersionUpdate) SetNillableDeprecated(b *bool) *CurrencyVersionUpdate {
	if b != nil {
		cvu.SetDeprecated(*b)
	}
	return cvu
}

// SetCrashBetIncrement sets the "crash_bet_increment" field.
func (cvu *CurrencyVersionUpdate) SetCrashBetIncrement(i int) *CurrencyVersionUpdate {
	cvu.mutation.ResetCrashBetIncrement()
	cvu.mutation.SetCrashBetIncrement(i)
	return cvu
}

// SetNillableCrashBetIncrement sets the "crash_bet_increment" field if the given value is not nil.
func (cvu *CurrencyVersionUpdate) SetNillableCrashBetIncrement(i *int) *CurrencyVersionUpdate {
	if i != nil {
		cvu.SetCrashBetIncrement(*i)
	}
	return cvu
}

// AddCrashBetIncrement adds i to the "crash_bet_increment" field.
func (cvu *CurrencyVersionUpdate) AddCrashBetIncrement(i int) *CurrencyVersionUpdate {
	cvu.mutation.AddCrashBetIncrement(i)
	return cvu
}

// ClearCrashBetIncrement clears the value of the "crash_bet_increment" field.
func (cvu *CurrencyVersionUpdate) ClearCrashBetIncrement() *CurrencyVersionUpdate {
	cvu.mutation.ClearCrashBetIncrement()
	return cvu
}

// SetSlotsBetMultipliers sets the "slots_bet_multipliers" field.
func (cvu *CurrencyVersionUpdate) SetSlotsBetMultipliers(i []int) *CurrencyVersionUpdate {
	cvu.mutation.SetSlotsBetMultipliers(i)
	return cvu
}

// AppendSlotsBetMultipliers appends i to the "slots_bet_multipliers" field.
func (cvu *CurrencyVersionUpdate) AppendSlotsBetMultipliers(i []int) *CurrencyVersionUpdate {
	cvu.mutation.AppendSlotsBetMultipliers(i)
	return cvu
}

// ClearSlotsBetMultipliers clears the value of the "slots_bet_multipliers" field.
func (cvu *CurrencyVersionUpdate) ClearSlotsBetMultipliers() *CurrencyVersionUpdate {
	cvu.mutation.ClearSlotsBetMultipliers()
	return cvu
}

// SetCurrencyID sets the "Currency" edge to the Currency entity by ID.
func (cvu *CurrencyVersionUpdate) SetCurrencyID(id int) *CurrencyVersionUpdate {
	cvu.mutation.SetCurrencyID(id)
	return cvu
}

// SetNillableCurrencyID sets the "Currency" edge to the Currency entity by ID if the given value is not nil.
func (cvu *CurrencyVersionUpdate) SetNillableCurrencyID(id *int) *CurrencyVersionUpdate {
	if id != nil {
		cvu = cvu.SetCurrencyID(*id)
	}
	return cvu
}

// SetCurrency sets the "Currency" edge to the Currency entity.
func (cvu *CurrencyVersionUpdate) SetCurrency(c *Currency) *CurrencyVersionUpdate {
	return cvu.SetCurrencyID(c.ID)
}

// SetGameTypesID sets the "game_types" edge to the GameType entity by ID.
func (cvu *CurrencyVersionUpdate) SetGameTypesID(id int) *CurrencyVersionUpdate {
	cvu.mutation.SetGameTypesID(id)
	return cvu
}

// SetNillableGameTypesID sets the "game_types" edge to the GameType entity by ID if the given value is not nil.
func (cvu *CurrencyVersionUpdate) SetNillableGameTypesID(id *int) *CurrencyVersionUpdate {
	if id != nil {
		cvu = cvu.SetGameTypesID(*id)
	}
	return cvu
}

// SetGameTypes sets the "game_types" edge to the GameType entity.
func (cvu *CurrencyVersionUpdate) SetGameTypes(g *GameType) *CurrencyVersionUpdate {
	return cvu.SetGameTypesID(g.ID)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (cvu *CurrencyVersionUpdate) AddSessionIDs(ids ...int) *CurrencyVersionUpdate {
	cvu.mutation.AddSessionIDs(ids...)
	return cvu
}

// AddSessions adds the "sessions" edges to the Session entity.
func (cvu *CurrencyVersionUpdate) AddSessions(s ...*Session) *CurrencyVersionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cvu.AddSessionIDs(ids...)
}

// AddGameConfigIDs adds the "game_configs" edge to the GameConfig entity by IDs.
func (cvu *CurrencyVersionUpdate) AddGameConfigIDs(ids ...int) *CurrencyVersionUpdate {
	cvu.mutation.AddGameConfigIDs(ids...)
	return cvu
}

// AddGameConfigs adds the "game_configs" edges to the GameConfig entity.
func (cvu *CurrencyVersionUpdate) AddGameConfigs(g ...*GameConfig) *CurrencyVersionUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cvu.AddGameConfigIDs(ids...)
}

// Mutation returns the CurrencyVersionMutation object of the builder.
func (cvu *CurrencyVersionUpdate) Mutation() *CurrencyVersionMutation {
	return cvu.mutation
}

// ClearCurrency clears the "Currency" edge to the Currency entity.
func (cvu *CurrencyVersionUpdate) ClearCurrency() *CurrencyVersionUpdate {
	cvu.mutation.ClearCurrency()
	return cvu
}

// ClearGameTypes clears the "game_types" edge to the GameType entity.
func (cvu *CurrencyVersionUpdate) ClearGameTypes() *CurrencyVersionUpdate {
	cvu.mutation.ClearGameTypes()
	return cvu
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (cvu *CurrencyVersionUpdate) ClearSessions() *CurrencyVersionUpdate {
	cvu.mutation.ClearSessions()
	return cvu
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (cvu *CurrencyVersionUpdate) RemoveSessionIDs(ids ...int) *CurrencyVersionUpdate {
	cvu.mutation.RemoveSessionIDs(ids...)
	return cvu
}

// RemoveSessions removes "sessions" edges to Session entities.
func (cvu *CurrencyVersionUpdate) RemoveSessions(s ...*Session) *CurrencyVersionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cvu.RemoveSessionIDs(ids...)
}

// ClearGameConfigs clears all "game_configs" edges to the GameConfig entity.
func (cvu *CurrencyVersionUpdate) ClearGameConfigs() *CurrencyVersionUpdate {
	cvu.mutation.ClearGameConfigs()
	return cvu
}

// RemoveGameConfigIDs removes the "game_configs" edge to GameConfig entities by IDs.
func (cvu *CurrencyVersionUpdate) RemoveGameConfigIDs(ids ...int) *CurrencyVersionUpdate {
	cvu.mutation.RemoveGameConfigIDs(ids...)
	return cvu
}

// RemoveGameConfigs removes "game_configs" edges to GameConfig entities.
func (cvu *CurrencyVersionUpdate) RemoveGameConfigs(g ...*GameConfig) *CurrencyVersionUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cvu.RemoveGameConfigIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cvu *CurrencyVersionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cvu.sqlSave, cvu.mutation, cvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cvu *CurrencyVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := cvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cvu *CurrencyVersionUpdate) Exec(ctx context.Context) error {
	_, err := cvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvu *CurrencyVersionUpdate) ExecX(ctx context.Context) {
	if err := cvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cvu *CurrencyVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(currencyversion.Table, currencyversion.Columns, sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt))
	if ps := cvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cvu.mutation.Name(); ok {
		_spec.SetField(currencyversion.FieldName, field.TypeString, value)
	}
	if value, ok := cvu.mutation.MinBet(); ok {
		_spec.SetField(currencyversion.FieldMinBet, field.TypeInt, value)
	}
	if value, ok := cvu.mutation.AddedMinBet(); ok {
		_spec.AddField(currencyversion.FieldMinBet, field.TypeInt, value)
	}
	if cvu.mutation.MinBetCleared() {
		_spec.ClearField(currencyversion.FieldMinBet, field.TypeInt)
	}
	if value, ok := cvu.mutation.MaxExp(); ok {
		_spec.SetField(currencyversion.FieldMaxExp, field.TypeInt, value)
	}
	if value, ok := cvu.mutation.AddedMaxExp(); ok {
		_spec.AddField(currencyversion.FieldMaxExp, field.TypeInt, value)
	}
	if cvu.mutation.MaxExpCleared() {
		_spec.ClearField(currencyversion.FieldMaxExp, field.TypeInt)
	}
	if value, ok := cvu.mutation.Denominator(); ok {
		_spec.SetField(currencyversion.FieldDenominator, field.TypeInt, value)
	}
	if value, ok := cvu.mutation.AddedDenominator(); ok {
		_spec.AddField(currencyversion.FieldDenominator, field.TypeInt, value)
	}
	if value, ok := cvu.mutation.DefaultMultiplier(); ok {
		_spec.SetField(currencyversion.FieldDefaultMultiplier, field.TypeInt, value)
	}
	if value, ok := cvu.mutation.AddedDefaultMultiplier(); ok {
		_spec.AddField(currencyversion.FieldDefaultMultiplier, field.TypeInt, value)
	}
	if cvu.mutation.DefaultMultiplierCleared() {
		_spec.ClearField(currencyversion.FieldDefaultMultiplier, field.TypeInt)
	}
	if value, ok := cvu.mutation.Deprecated(); ok {
		_spec.SetField(currencyversion.FieldDeprecated, field.TypeBool, value)
	}
	if value, ok := cvu.mutation.CrashBetIncrement(); ok {
		_spec.SetField(currencyversion.FieldCrashBetIncrement, field.TypeInt, value)
	}
	if value, ok := cvu.mutation.AddedCrashBetIncrement(); ok {
		_spec.AddField(currencyversion.FieldCrashBetIncrement, field.TypeInt, value)
	}
	if cvu.mutation.CrashBetIncrementCleared() {
		_spec.ClearField(currencyversion.FieldCrashBetIncrement, field.TypeInt)
	}
	if value, ok := cvu.mutation.SlotsBetMultipliers(); ok {
		_spec.SetField(currencyversion.FieldSlotsBetMultipliers, field.TypeJSON, value)
	}
	if value, ok := cvu.mutation.AppendedSlotsBetMultipliers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, currencyversion.FieldSlotsBetMultipliers, value)
		})
	}
	if cvu.mutation.SlotsBetMultipliersCleared() {
		_spec.ClearField(currencyversion.FieldSlotsBetMultipliers, field.TypeJSON)
	}
	if cvu.mutation.CurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   currencyversion.CurrencyTable,
			Columns: []string{currencyversion.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvu.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   currencyversion.CurrencyTable,
			Columns: []string{currencyversion.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvu.mutation.GameTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   currencyversion.GameTypesTable,
			Columns: []string{currencyversion.GameTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gametype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvu.mutation.GameTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   currencyversion.GameTypesTable,
			Columns: []string{currencyversion.GameTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gametype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencyversion.SessionsTable,
			Columns: []string{currencyversion.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvu.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !cvu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencyversion.SessionsTable,
			Columns: []string{currencyversion.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvu.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencyversion.SessionsTable,
			Columns: []string{currencyversion.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvu.mutation.GameConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencyversion.GameConfigsTable,
			Columns: []string{currencyversion.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvu.mutation.RemovedGameConfigsIDs(); len(nodes) > 0 && !cvu.mutation.GameConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencyversion.GameConfigsTable,
			Columns: []string{currencyversion.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvu.mutation.GameConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencyversion.GameConfigsTable,
			Columns: []string{currencyversion.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{currencyversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cvu.mutation.done = true
	return n, nil
}

// CurrencyVersionUpdateOne is the builder for updating a single CurrencyVersion entity.
type CurrencyVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CurrencyVersionMutation
}

// SetName sets the "name" field.
func (cvuo *CurrencyVersionUpdateOne) SetName(s string) *CurrencyVersionUpdateOne {
	cvuo.mutation.SetName(s)
	return cvuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cvuo *CurrencyVersionUpdateOne) SetNillableName(s *string) *CurrencyVersionUpdateOne {
	if s != nil {
		cvuo.SetName(*s)
	}
	return cvuo
}

// SetMinBet sets the "min_bet" field.
func (cvuo *CurrencyVersionUpdateOne) SetMinBet(i int) *CurrencyVersionUpdateOne {
	cvuo.mutation.ResetMinBet()
	cvuo.mutation.SetMinBet(i)
	return cvuo
}

// SetNillableMinBet sets the "min_bet" field if the given value is not nil.
func (cvuo *CurrencyVersionUpdateOne) SetNillableMinBet(i *int) *CurrencyVersionUpdateOne {
	if i != nil {
		cvuo.SetMinBet(*i)
	}
	return cvuo
}

// AddMinBet adds i to the "min_bet" field.
func (cvuo *CurrencyVersionUpdateOne) AddMinBet(i int) *CurrencyVersionUpdateOne {
	cvuo.mutation.AddMinBet(i)
	return cvuo
}

// ClearMinBet clears the value of the "min_bet" field.
func (cvuo *CurrencyVersionUpdateOne) ClearMinBet() *CurrencyVersionUpdateOne {
	cvuo.mutation.ClearMinBet()
	return cvuo
}

// SetMaxExp sets the "max_exp" field.
func (cvuo *CurrencyVersionUpdateOne) SetMaxExp(i int) *CurrencyVersionUpdateOne {
	cvuo.mutation.ResetMaxExp()
	cvuo.mutation.SetMaxExp(i)
	return cvuo
}

// SetNillableMaxExp sets the "max_exp" field if the given value is not nil.
func (cvuo *CurrencyVersionUpdateOne) SetNillableMaxExp(i *int) *CurrencyVersionUpdateOne {
	if i != nil {
		cvuo.SetMaxExp(*i)
	}
	return cvuo
}

// AddMaxExp adds i to the "max_exp" field.
func (cvuo *CurrencyVersionUpdateOne) AddMaxExp(i int) *CurrencyVersionUpdateOne {
	cvuo.mutation.AddMaxExp(i)
	return cvuo
}

// ClearMaxExp clears the value of the "max_exp" field.
func (cvuo *CurrencyVersionUpdateOne) ClearMaxExp() *CurrencyVersionUpdateOne {
	cvuo.mutation.ClearMaxExp()
	return cvuo
}

// SetDenominator sets the "denominator" field.
func (cvuo *CurrencyVersionUpdateOne) SetDenominator(i int) *CurrencyVersionUpdateOne {
	cvuo.mutation.ResetDenominator()
	cvuo.mutation.SetDenominator(i)
	return cvuo
}

// SetNillableDenominator sets the "denominator" field if the given value is not nil.
func (cvuo *CurrencyVersionUpdateOne) SetNillableDenominator(i *int) *CurrencyVersionUpdateOne {
	if i != nil {
		cvuo.SetDenominator(*i)
	}
	return cvuo
}

// AddDenominator adds i to the "denominator" field.
func (cvuo *CurrencyVersionUpdateOne) AddDenominator(i int) *CurrencyVersionUpdateOne {
	cvuo.mutation.AddDenominator(i)
	return cvuo
}

// SetDefaultMultiplier sets the "default_multiplier" field.
func (cvuo *CurrencyVersionUpdateOne) SetDefaultMultiplier(i int) *CurrencyVersionUpdateOne {
	cvuo.mutation.ResetDefaultMultiplier()
	cvuo.mutation.SetDefaultMultiplier(i)
	return cvuo
}

// SetNillableDefaultMultiplier sets the "default_multiplier" field if the given value is not nil.
func (cvuo *CurrencyVersionUpdateOne) SetNillableDefaultMultiplier(i *int) *CurrencyVersionUpdateOne {
	if i != nil {
		cvuo.SetDefaultMultiplier(*i)
	}
	return cvuo
}

// AddDefaultMultiplier adds i to the "default_multiplier" field.
func (cvuo *CurrencyVersionUpdateOne) AddDefaultMultiplier(i int) *CurrencyVersionUpdateOne {
	cvuo.mutation.AddDefaultMultiplier(i)
	return cvuo
}

// ClearDefaultMultiplier clears the value of the "default_multiplier" field.
func (cvuo *CurrencyVersionUpdateOne) ClearDefaultMultiplier() *CurrencyVersionUpdateOne {
	cvuo.mutation.ClearDefaultMultiplier()
	return cvuo
}

// SetDeprecated sets the "deprecated" field.
func (cvuo *CurrencyVersionUpdateOne) SetDeprecated(b bool) *CurrencyVersionUpdateOne {
	cvuo.mutation.SetDeprecated(b)
	return cvuo
}

// SetNillableDeprecated sets the "deprecated" field if the given value is not nil.
func (cvuo *CurrencyVersionUpdateOne) SetNillableDeprecated(b *bool) *CurrencyVersionUpdateOne {
	if b != nil {
		cvuo.SetDeprecated(*b)
	}
	return cvuo
}

// SetCrashBetIncrement sets the "crash_bet_increment" field.
func (cvuo *CurrencyVersionUpdateOne) SetCrashBetIncrement(i int) *CurrencyVersionUpdateOne {
	cvuo.mutation.ResetCrashBetIncrement()
	cvuo.mutation.SetCrashBetIncrement(i)
	return cvuo
}

// SetNillableCrashBetIncrement sets the "crash_bet_increment" field if the given value is not nil.
func (cvuo *CurrencyVersionUpdateOne) SetNillableCrashBetIncrement(i *int) *CurrencyVersionUpdateOne {
	if i != nil {
		cvuo.SetCrashBetIncrement(*i)
	}
	return cvuo
}

// AddCrashBetIncrement adds i to the "crash_bet_increment" field.
func (cvuo *CurrencyVersionUpdateOne) AddCrashBetIncrement(i int) *CurrencyVersionUpdateOne {
	cvuo.mutation.AddCrashBetIncrement(i)
	return cvuo
}

// ClearCrashBetIncrement clears the value of the "crash_bet_increment" field.
func (cvuo *CurrencyVersionUpdateOne) ClearCrashBetIncrement() *CurrencyVersionUpdateOne {
	cvuo.mutation.ClearCrashBetIncrement()
	return cvuo
}

// SetSlotsBetMultipliers sets the "slots_bet_multipliers" field.
func (cvuo *CurrencyVersionUpdateOne) SetSlotsBetMultipliers(i []int) *CurrencyVersionUpdateOne {
	cvuo.mutation.SetSlotsBetMultipliers(i)
	return cvuo
}

// AppendSlotsBetMultipliers appends i to the "slots_bet_multipliers" field.
func (cvuo *CurrencyVersionUpdateOne) AppendSlotsBetMultipliers(i []int) *CurrencyVersionUpdateOne {
	cvuo.mutation.AppendSlotsBetMultipliers(i)
	return cvuo
}

// ClearSlotsBetMultipliers clears the value of the "slots_bet_multipliers" field.
func (cvuo *CurrencyVersionUpdateOne) ClearSlotsBetMultipliers() *CurrencyVersionUpdateOne {
	cvuo.mutation.ClearSlotsBetMultipliers()
	return cvuo
}

// SetCurrencyID sets the "Currency" edge to the Currency entity by ID.
func (cvuo *CurrencyVersionUpdateOne) SetCurrencyID(id int) *CurrencyVersionUpdateOne {
	cvuo.mutation.SetCurrencyID(id)
	return cvuo
}

// SetNillableCurrencyID sets the "Currency" edge to the Currency entity by ID if the given value is not nil.
func (cvuo *CurrencyVersionUpdateOne) SetNillableCurrencyID(id *int) *CurrencyVersionUpdateOne {
	if id != nil {
		cvuo = cvuo.SetCurrencyID(*id)
	}
	return cvuo
}

// SetCurrency sets the "Currency" edge to the Currency entity.
func (cvuo *CurrencyVersionUpdateOne) SetCurrency(c *Currency) *CurrencyVersionUpdateOne {
	return cvuo.SetCurrencyID(c.ID)
}

// SetGameTypesID sets the "game_types" edge to the GameType entity by ID.
func (cvuo *CurrencyVersionUpdateOne) SetGameTypesID(id int) *CurrencyVersionUpdateOne {
	cvuo.mutation.SetGameTypesID(id)
	return cvuo
}

// SetNillableGameTypesID sets the "game_types" edge to the GameType entity by ID if the given value is not nil.
func (cvuo *CurrencyVersionUpdateOne) SetNillableGameTypesID(id *int) *CurrencyVersionUpdateOne {
	if id != nil {
		cvuo = cvuo.SetGameTypesID(*id)
	}
	return cvuo
}

// SetGameTypes sets the "game_types" edge to the GameType entity.
func (cvuo *CurrencyVersionUpdateOne) SetGameTypes(g *GameType) *CurrencyVersionUpdateOne {
	return cvuo.SetGameTypesID(g.ID)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (cvuo *CurrencyVersionUpdateOne) AddSessionIDs(ids ...int) *CurrencyVersionUpdateOne {
	cvuo.mutation.AddSessionIDs(ids...)
	return cvuo
}

// AddSessions adds the "sessions" edges to the Session entity.
func (cvuo *CurrencyVersionUpdateOne) AddSessions(s ...*Session) *CurrencyVersionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cvuo.AddSessionIDs(ids...)
}

// AddGameConfigIDs adds the "game_configs" edge to the GameConfig entity by IDs.
func (cvuo *CurrencyVersionUpdateOne) AddGameConfigIDs(ids ...int) *CurrencyVersionUpdateOne {
	cvuo.mutation.AddGameConfigIDs(ids...)
	return cvuo
}

// AddGameConfigs adds the "game_configs" edges to the GameConfig entity.
func (cvuo *CurrencyVersionUpdateOne) AddGameConfigs(g ...*GameConfig) *CurrencyVersionUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cvuo.AddGameConfigIDs(ids...)
}

// Mutation returns the CurrencyVersionMutation object of the builder.
func (cvuo *CurrencyVersionUpdateOne) Mutation() *CurrencyVersionMutation {
	return cvuo.mutation
}

// ClearCurrency clears the "Currency" edge to the Currency entity.
func (cvuo *CurrencyVersionUpdateOne) ClearCurrency() *CurrencyVersionUpdateOne {
	cvuo.mutation.ClearCurrency()
	return cvuo
}

// ClearGameTypes clears the "game_types" edge to the GameType entity.
func (cvuo *CurrencyVersionUpdateOne) ClearGameTypes() *CurrencyVersionUpdateOne {
	cvuo.mutation.ClearGameTypes()
	return cvuo
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (cvuo *CurrencyVersionUpdateOne) ClearSessions() *CurrencyVersionUpdateOne {
	cvuo.mutation.ClearSessions()
	return cvuo
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (cvuo *CurrencyVersionUpdateOne) RemoveSessionIDs(ids ...int) *CurrencyVersionUpdateOne {
	cvuo.mutation.RemoveSessionIDs(ids...)
	return cvuo
}

// RemoveSessions removes "sessions" edges to Session entities.
func (cvuo *CurrencyVersionUpdateOne) RemoveSessions(s ...*Session) *CurrencyVersionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cvuo.RemoveSessionIDs(ids...)
}

// ClearGameConfigs clears all "game_configs" edges to the GameConfig entity.
func (cvuo *CurrencyVersionUpdateOne) ClearGameConfigs() *CurrencyVersionUpdateOne {
	cvuo.mutation.ClearGameConfigs()
	return cvuo
}

// RemoveGameConfigIDs removes the "game_configs" edge to GameConfig entities by IDs.
func (cvuo *CurrencyVersionUpdateOne) RemoveGameConfigIDs(ids ...int) *CurrencyVersionUpdateOne {
	cvuo.mutation.RemoveGameConfigIDs(ids...)
	return cvuo
}

// RemoveGameConfigs removes "game_configs" edges to GameConfig entities.
func (cvuo *CurrencyVersionUpdateOne) RemoveGameConfigs(g ...*GameConfig) *CurrencyVersionUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cvuo.RemoveGameConfigIDs(ids...)
}

// Where appends a list predicates to the CurrencyVersionUpdate builder.
func (cvuo *CurrencyVersionUpdateOne) Where(ps ...predicate.CurrencyVersion) *CurrencyVersionUpdateOne {
	cvuo.mutation.Where(ps...)
	return cvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cvuo *CurrencyVersionUpdateOne) Select(field string, fields ...string) *CurrencyVersionUpdateOne {
	cvuo.fields = append([]string{field}, fields...)
	return cvuo
}

// Save executes the query and returns the updated CurrencyVersion entity.
func (cvuo *CurrencyVersionUpdateOne) Save(ctx context.Context) (*CurrencyVersion, error) {
	return withHooks(ctx, cvuo.sqlSave, cvuo.mutation, cvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cvuo *CurrencyVersionUpdateOne) SaveX(ctx context.Context) *CurrencyVersion {
	node, err := cvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cvuo *CurrencyVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := cvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvuo *CurrencyVersionUpdateOne) ExecX(ctx context.Context) {
	if err := cvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cvuo *CurrencyVersionUpdateOne) sqlSave(ctx context.Context) (_node *CurrencyVersion, err error) {
	_spec := sqlgraph.NewUpdateSpec(currencyversion.Table, currencyversion.Columns, sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt))
	id, ok := cvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CurrencyVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, currencyversion.FieldID)
		for _, f := range fields {
			if !currencyversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != currencyversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cvuo.mutation.Name(); ok {
		_spec.SetField(currencyversion.FieldName, field.TypeString, value)
	}
	if value, ok := cvuo.mutation.MinBet(); ok {
		_spec.SetField(currencyversion.FieldMinBet, field.TypeInt, value)
	}
	if value, ok := cvuo.mutation.AddedMinBet(); ok {
		_spec.AddField(currencyversion.FieldMinBet, field.TypeInt, value)
	}
	if cvuo.mutation.MinBetCleared() {
		_spec.ClearField(currencyversion.FieldMinBet, field.TypeInt)
	}
	if value, ok := cvuo.mutation.MaxExp(); ok {
		_spec.SetField(currencyversion.FieldMaxExp, field.TypeInt, value)
	}
	if value, ok := cvuo.mutation.AddedMaxExp(); ok {
		_spec.AddField(currencyversion.FieldMaxExp, field.TypeInt, value)
	}
	if cvuo.mutation.MaxExpCleared() {
		_spec.ClearField(currencyversion.FieldMaxExp, field.TypeInt)
	}
	if value, ok := cvuo.mutation.Denominator(); ok {
		_spec.SetField(currencyversion.FieldDenominator, field.TypeInt, value)
	}
	if value, ok := cvuo.mutation.AddedDenominator(); ok {
		_spec.AddField(currencyversion.FieldDenominator, field.TypeInt, value)
	}
	if value, ok := cvuo.mutation.DefaultMultiplier(); ok {
		_spec.SetField(currencyversion.FieldDefaultMultiplier, field.TypeInt, value)
	}
	if value, ok := cvuo.mutation.AddedDefaultMultiplier(); ok {
		_spec.AddField(currencyversion.FieldDefaultMultiplier, field.TypeInt, value)
	}
	if cvuo.mutation.DefaultMultiplierCleared() {
		_spec.ClearField(currencyversion.FieldDefaultMultiplier, field.TypeInt)
	}
	if value, ok := cvuo.mutation.Deprecated(); ok {
		_spec.SetField(currencyversion.FieldDeprecated, field.TypeBool, value)
	}
	if value, ok := cvuo.mutation.CrashBetIncrement(); ok {
		_spec.SetField(currencyversion.FieldCrashBetIncrement, field.TypeInt, value)
	}
	if value, ok := cvuo.mutation.AddedCrashBetIncrement(); ok {
		_spec.AddField(currencyversion.FieldCrashBetIncrement, field.TypeInt, value)
	}
	if cvuo.mutation.CrashBetIncrementCleared() {
		_spec.ClearField(currencyversion.FieldCrashBetIncrement, field.TypeInt)
	}
	if value, ok := cvuo.mutation.SlotsBetMultipliers(); ok {
		_spec.SetField(currencyversion.FieldSlotsBetMultipliers, field.TypeJSON, value)
	}
	if value, ok := cvuo.mutation.AppendedSlotsBetMultipliers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, currencyversion.FieldSlotsBetMultipliers, value)
		})
	}
	if cvuo.mutation.SlotsBetMultipliersCleared() {
		_spec.ClearField(currencyversion.FieldSlotsBetMultipliers, field.TypeJSON)
	}
	if cvuo.mutation.CurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   currencyversion.CurrencyTable,
			Columns: []string{currencyversion.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvuo.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   currencyversion.CurrencyTable,
			Columns: []string{currencyversion.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvuo.mutation.GameTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   currencyversion.GameTypesTable,
			Columns: []string{currencyversion.GameTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gametype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvuo.mutation.GameTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   currencyversion.GameTypesTable,
			Columns: []string{currencyversion.GameTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gametype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencyversion.SessionsTable,
			Columns: []string{currencyversion.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvuo.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !cvuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencyversion.SessionsTable,
			Columns: []string{currencyversion.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvuo.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencyversion.SessionsTable,
			Columns: []string{currencyversion.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvuo.mutation.GameConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencyversion.GameConfigsTable,
			Columns: []string{currencyversion.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvuo.mutation.RemovedGameConfigsIDs(); len(nodes) > 0 && !cvuo.mutation.GameConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencyversion.GameConfigsTable,
			Columns: []string{currencyversion.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvuo.mutation.GameConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currencyversion.GameConfigsTable,
			Columns: []string{currencyversion.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CurrencyVersion{config: cvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{currencyversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cvuo.mutation.done = true
	return _node, nil
}
