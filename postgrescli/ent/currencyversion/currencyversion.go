// Code generated by ent, DO NOT EDIT.

package currencyversion

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the currencyversion type in the database.
	Label = "currency_version"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldMinBet holds the string denoting the min_bet field in the database.
	FieldMinBet = "min_bet"
	// FieldMaxExp holds the string denoting the max_exp field in the database.
	FieldMaxExp = "max_exp"
	// FieldDenominator holds the string denoting the denominator field in the database.
	FieldDenominator = "denominator"
	// FieldCurrencyID holds the string denoting the currency_id field in the database.
	FieldCurrencyID = "currency_id"
	// FieldDefaultMultiplier holds the string denoting the default_multiplier field in the database.
	FieldDefaultMultiplier = "default_multiplier"
	// FieldDeprecated holds the string denoting the deprecated field in the database.
	FieldDeprecated = "deprecated"
	// FieldCrashBetIncrement holds the string denoting the crash_bet_increment field in the database.
	FieldCrashBetIncrement = "crash_bet_increment"
	// FieldSlotsBetMultipliers holds the string denoting the slots_bet_multipliers field in the database.
	FieldSlotsBetMultipliers = "slots_bet_multipliers"
	// EdgeCurrencie holds the string denoting the currencie edge name in mutations.
	EdgeCurrencie = "Currencie"
	// EdgeGameTypes holds the string denoting the game_types edge name in mutations.
	EdgeGameTypes = "game_types"
	// EdgeSessions holds the string denoting the sessions edge name in mutations.
	EdgeSessions = "sessions"
	// EdgeGameConfigs holds the string denoting the game_configs edge name in mutations.
	EdgeGameConfigs = "game_configs"
	// Table holds the table name of the currencyversion in the database.
	Table = "currency_versions"
	// CurrencieTable is the table that holds the Currencie relation/edge.
	CurrencieTable = "currency_versions"
	// CurrencieInverseTable is the table name for the Currencie entity.
	// It exists in this package in order to avoid circular dependency with the "currencie" package.
	CurrencieInverseTable = "currencies"
	// CurrencieColumn is the table column denoting the Currencie relation/edge.
	CurrencieColumn = "currencie_currency_versions"
	// GameTypesTable is the table that holds the game_types relation/edge.
	GameTypesTable = "currency_versions"
	// GameTypesInverseTable is the table name for the GameType entity.
	// It exists in this package in order to avoid circular dependency with the "gametype" package.
	GameTypesInverseTable = "game_types"
	// GameTypesColumn is the table column denoting the game_types relation/edge.
	GameTypesColumn = "game_type_currency_versions"
	// SessionsTable is the table that holds the sessions relation/edge.
	SessionsTable = "sessions"
	// SessionsInverseTable is the table name for the Session entity.
	// It exists in this package in order to avoid circular dependency with the "session" package.
	SessionsInverseTable = "sessions"
	// SessionsColumn is the table column denoting the sessions relation/edge.
	SessionsColumn = "currency_version_sessions"
	// GameConfigsTable is the table that holds the game_configs relation/edge.
	GameConfigsTable = "game_configs"
	// GameConfigsInverseTable is the table name for the GameConfig entity.
	// It exists in this package in order to avoid circular dependency with the "gameconfig" package.
	GameConfigsInverseTable = "game_configs"
	// GameConfigsColumn is the table column denoting the game_configs relation/edge.
	GameConfigsColumn = "currency_version_game_configs"
)

// Columns holds all SQL columns for currencyversion fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldMinBet,
	FieldMaxExp,
	FieldDenominator,
	FieldCurrencyID,
	FieldDefaultMultiplier,
	FieldDeprecated,
	FieldCrashBetIncrement,
	FieldSlotsBetMultipliers,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "currency_versions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"currencie_currency_versions",
	"game_type_currency_versions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the CurrencyVersion queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByMinBet orders the results by the min_bet field.
func ByMinBet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinBet, opts...).ToFunc()
}

// ByMaxExp orders the results by the max_exp field.
func ByMaxExp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxExp, opts...).ToFunc()
}

// ByDenominator orders the results by the denominator field.
func ByDenominator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDenominator, opts...).ToFunc()
}

// ByCurrencyID orders the results by the currency_id field.
func ByCurrencyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrencyID, opts...).ToFunc()
}

// ByDefaultMultiplier orders the results by the default_multiplier field.
func ByDefaultMultiplier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefaultMultiplier, opts...).ToFunc()
}

// ByDeprecated orders the results by the deprecated field.
func ByDeprecated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeprecated, opts...).ToFunc()
}

// ByCrashBetIncrement orders the results by the crash_bet_increment field.
func ByCrashBetIncrement(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCrashBetIncrement, opts...).ToFunc()
}

// ByCurrencieField orders the results by Currencie field.
func ByCurrencieField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCurrencieStep(), sql.OrderByField(field, opts...))
	}
}

// ByGameTypesField orders the results by game_types field.
func ByGameTypesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameTypesStep(), sql.OrderByField(field, opts...))
	}
}

// BySessionsCount orders the results by sessions count.
func BySessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSessionsStep(), opts...)
	}
}

// BySessions orders the results by sessions terms.
func BySessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGameConfigsCount orders the results by game_configs count.
func ByGameConfigsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGameConfigsStep(), opts...)
	}
}

// ByGameConfigs orders the results by game_configs terms.
func ByGameConfigs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameConfigsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCurrencieStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CurrencieInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CurrencieTable, CurrencieColumn),
	)
}
func newGameTypesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameTypesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GameTypesTable, GameTypesColumn),
	)
}
func newSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
	)
}
func newGameConfigsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameConfigsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GameConfigsTable, GameConfigsColumn),
	)
}
