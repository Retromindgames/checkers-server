// Code generated by ent, DO NOT EDIT.

package currencyversion

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldEQ(FieldName, v))
}

// MinBet applies equality check predicate on the "min_bet" field. It's identical to MinBetEQ.
func MinBet(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldEQ(FieldMinBet, v))
}

// MaxExp applies equality check predicate on the "max_exp" field. It's identical to MaxExpEQ.
func MaxExp(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldEQ(FieldMaxExp, v))
}

// Denominator applies equality check predicate on the "denominator" field. It's identical to DenominatorEQ.
func Denominator(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldEQ(FieldDenominator, v))
}

// CurrencyID applies equality check predicate on the "currency_id" field. It's identical to CurrencyIDEQ.
func CurrencyID(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldEQ(FieldCurrencyID, v))
}

// DefaultMultiplier applies equality check predicate on the "default_multiplier" field. It's identical to DefaultMultiplierEQ.
func DefaultMultiplier(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldEQ(FieldDefaultMultiplier, v))
}

// Deprecated applies equality check predicate on the "deprecated" field. It's identical to DeprecatedEQ.
func Deprecated(v bool) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldEQ(FieldDeprecated, v))
}

// CrashBetIncrement applies equality check predicate on the "crash_bet_increment" field. It's identical to CrashBetIncrementEQ.
func CrashBetIncrement(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldEQ(FieldCrashBetIncrement, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldContainsFold(FieldName, v))
}

// MinBetEQ applies the EQ predicate on the "min_bet" field.
func MinBetEQ(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldEQ(FieldMinBet, v))
}

// MinBetNEQ applies the NEQ predicate on the "min_bet" field.
func MinBetNEQ(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldNEQ(FieldMinBet, v))
}

// MinBetIn applies the In predicate on the "min_bet" field.
func MinBetIn(vs ...int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldIn(FieldMinBet, vs...))
}

// MinBetNotIn applies the NotIn predicate on the "min_bet" field.
func MinBetNotIn(vs ...int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldNotIn(FieldMinBet, vs...))
}

// MinBetGT applies the GT predicate on the "min_bet" field.
func MinBetGT(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldGT(FieldMinBet, v))
}

// MinBetGTE applies the GTE predicate on the "min_bet" field.
func MinBetGTE(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldGTE(FieldMinBet, v))
}

// MinBetLT applies the LT predicate on the "min_bet" field.
func MinBetLT(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldLT(FieldMinBet, v))
}

// MinBetLTE applies the LTE predicate on the "min_bet" field.
func MinBetLTE(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldLTE(FieldMinBet, v))
}

// MaxExpEQ applies the EQ predicate on the "max_exp" field.
func MaxExpEQ(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldEQ(FieldMaxExp, v))
}

// MaxExpNEQ applies the NEQ predicate on the "max_exp" field.
func MaxExpNEQ(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldNEQ(FieldMaxExp, v))
}

// MaxExpIn applies the In predicate on the "max_exp" field.
func MaxExpIn(vs ...int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldIn(FieldMaxExp, vs...))
}

// MaxExpNotIn applies the NotIn predicate on the "max_exp" field.
func MaxExpNotIn(vs ...int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldNotIn(FieldMaxExp, vs...))
}

// MaxExpGT applies the GT predicate on the "max_exp" field.
func MaxExpGT(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldGT(FieldMaxExp, v))
}

// MaxExpGTE applies the GTE predicate on the "max_exp" field.
func MaxExpGTE(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldGTE(FieldMaxExp, v))
}

// MaxExpLT applies the LT predicate on the "max_exp" field.
func MaxExpLT(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldLT(FieldMaxExp, v))
}

// MaxExpLTE applies the LTE predicate on the "max_exp" field.
func MaxExpLTE(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldLTE(FieldMaxExp, v))
}

// DenominatorEQ applies the EQ predicate on the "denominator" field.
func DenominatorEQ(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldEQ(FieldDenominator, v))
}

// DenominatorNEQ applies the NEQ predicate on the "denominator" field.
func DenominatorNEQ(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldNEQ(FieldDenominator, v))
}

// DenominatorIn applies the In predicate on the "denominator" field.
func DenominatorIn(vs ...int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldIn(FieldDenominator, vs...))
}

// DenominatorNotIn applies the NotIn predicate on the "denominator" field.
func DenominatorNotIn(vs ...int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldNotIn(FieldDenominator, vs...))
}

// DenominatorGT applies the GT predicate on the "denominator" field.
func DenominatorGT(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldGT(FieldDenominator, v))
}

// DenominatorGTE applies the GTE predicate on the "denominator" field.
func DenominatorGTE(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldGTE(FieldDenominator, v))
}

// DenominatorLT applies the LT predicate on the "denominator" field.
func DenominatorLT(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldLT(FieldDenominator, v))
}

// DenominatorLTE applies the LTE predicate on the "denominator" field.
func DenominatorLTE(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldLTE(FieldDenominator, v))
}

// CurrencyIDEQ applies the EQ predicate on the "currency_id" field.
func CurrencyIDEQ(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldEQ(FieldCurrencyID, v))
}

// CurrencyIDNEQ applies the NEQ predicate on the "currency_id" field.
func CurrencyIDNEQ(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldNEQ(FieldCurrencyID, v))
}

// CurrencyIDIn applies the In predicate on the "currency_id" field.
func CurrencyIDIn(vs ...int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldIn(FieldCurrencyID, vs...))
}

// CurrencyIDNotIn applies the NotIn predicate on the "currency_id" field.
func CurrencyIDNotIn(vs ...int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldNotIn(FieldCurrencyID, vs...))
}

// CurrencyIDGT applies the GT predicate on the "currency_id" field.
func CurrencyIDGT(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldGT(FieldCurrencyID, v))
}

// CurrencyIDGTE applies the GTE predicate on the "currency_id" field.
func CurrencyIDGTE(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldGTE(FieldCurrencyID, v))
}

// CurrencyIDLT applies the LT predicate on the "currency_id" field.
func CurrencyIDLT(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldLT(FieldCurrencyID, v))
}

// CurrencyIDLTE applies the LTE predicate on the "currency_id" field.
func CurrencyIDLTE(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldLTE(FieldCurrencyID, v))
}

// DefaultMultiplierEQ applies the EQ predicate on the "default_multiplier" field.
func DefaultMultiplierEQ(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldEQ(FieldDefaultMultiplier, v))
}

// DefaultMultiplierNEQ applies the NEQ predicate on the "default_multiplier" field.
func DefaultMultiplierNEQ(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldNEQ(FieldDefaultMultiplier, v))
}

// DefaultMultiplierIn applies the In predicate on the "default_multiplier" field.
func DefaultMultiplierIn(vs ...int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldIn(FieldDefaultMultiplier, vs...))
}

// DefaultMultiplierNotIn applies the NotIn predicate on the "default_multiplier" field.
func DefaultMultiplierNotIn(vs ...int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldNotIn(FieldDefaultMultiplier, vs...))
}

// DefaultMultiplierGT applies the GT predicate on the "default_multiplier" field.
func DefaultMultiplierGT(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldGT(FieldDefaultMultiplier, v))
}

// DefaultMultiplierGTE applies the GTE predicate on the "default_multiplier" field.
func DefaultMultiplierGTE(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldGTE(FieldDefaultMultiplier, v))
}

// DefaultMultiplierLT applies the LT predicate on the "default_multiplier" field.
func DefaultMultiplierLT(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldLT(FieldDefaultMultiplier, v))
}

// DefaultMultiplierLTE applies the LTE predicate on the "default_multiplier" field.
func DefaultMultiplierLTE(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldLTE(FieldDefaultMultiplier, v))
}

// DeprecatedEQ applies the EQ predicate on the "deprecated" field.
func DeprecatedEQ(v bool) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldEQ(FieldDeprecated, v))
}

// DeprecatedNEQ applies the NEQ predicate on the "deprecated" field.
func DeprecatedNEQ(v bool) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldNEQ(FieldDeprecated, v))
}

// CrashBetIncrementEQ applies the EQ predicate on the "crash_bet_increment" field.
func CrashBetIncrementEQ(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldEQ(FieldCrashBetIncrement, v))
}

// CrashBetIncrementNEQ applies the NEQ predicate on the "crash_bet_increment" field.
func CrashBetIncrementNEQ(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldNEQ(FieldCrashBetIncrement, v))
}

// CrashBetIncrementIn applies the In predicate on the "crash_bet_increment" field.
func CrashBetIncrementIn(vs ...int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldIn(FieldCrashBetIncrement, vs...))
}

// CrashBetIncrementNotIn applies the NotIn predicate on the "crash_bet_increment" field.
func CrashBetIncrementNotIn(vs ...int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldNotIn(FieldCrashBetIncrement, vs...))
}

// CrashBetIncrementGT applies the GT predicate on the "crash_bet_increment" field.
func CrashBetIncrementGT(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldGT(FieldCrashBetIncrement, v))
}

// CrashBetIncrementGTE applies the GTE predicate on the "crash_bet_increment" field.
func CrashBetIncrementGTE(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldGTE(FieldCrashBetIncrement, v))
}

// CrashBetIncrementLT applies the LT predicate on the "crash_bet_increment" field.
func CrashBetIncrementLT(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldLT(FieldCrashBetIncrement, v))
}

// CrashBetIncrementLTE applies the LTE predicate on the "crash_bet_increment" field.
func CrashBetIncrementLTE(v int) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.FieldLTE(FieldCrashBetIncrement, v))
}

// HasCurrencie applies the HasEdge predicate on the "Currencie" edge.
func HasCurrencie() predicate.CurrencyVersion {
	return predicate.CurrencyVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CurrencieTable, CurrencieColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrencieWith applies the HasEdge predicate on the "Currencie" edge with a given conditions (other predicates).
func HasCurrencieWith(preds ...predicate.Currencie) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(func(s *sql.Selector) {
		step := newCurrencieStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGameTypes applies the HasEdge predicate on the "game_types" edge.
func HasGameTypes() predicate.CurrencyVersion {
	return predicate.CurrencyVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GameTypesTable, GameTypesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGameTypesWith applies the HasEdge predicate on the "game_types" edge with a given conditions (other predicates).
func HasGameTypesWith(preds ...predicate.GameType) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(func(s *sql.Selector) {
		step := newGameTypesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSessions applies the HasEdge predicate on the "sessions" edge.
func HasSessions() predicate.CurrencyVersion {
	return predicate.CurrencyVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSessionsWith applies the HasEdge predicate on the "sessions" edge with a given conditions (other predicates).
func HasSessionsWith(preds ...predicate.Session) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(func(s *sql.Selector) {
		step := newSessionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGameConfigs applies the HasEdge predicate on the "game_configs" edge.
func HasGameConfigs() predicate.CurrencyVersion {
	return predicate.CurrencyVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GameConfigsTable, GameConfigsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGameConfigsWith applies the HasEdge predicate on the "game_configs" edge with a given conditions (other predicates).
func HasGameConfigsWith(preds ...predicate.GameConfig) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(func(s *sql.Selector) {
		step := newGameConfigsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CurrencyVersion) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CurrencyVersion) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CurrencyVersion) predicate.CurrencyVersion {
	return predicate.CurrencyVersion(sql.NotPredicates(p))
}
