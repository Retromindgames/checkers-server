// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencyversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gametype"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
)

// GameTypeUpdate is the builder for updating GameType entities.
type GameTypeUpdate struct {
	config
	hooks    []Hook
	mutation *GameTypeMutation
}

// Where appends a list predicates to the GameTypeUpdate builder.
func (gtu *GameTypeUpdate) Where(ps ...predicate.GameType) *GameTypeUpdate {
	gtu.mutation.Where(ps...)
	return gtu
}

// SetType sets the "type" field.
func (gtu *GameTypeUpdate) SetType(s string) *GameTypeUpdate {
	gtu.mutation.SetType(s)
	return gtu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (gtu *GameTypeUpdate) SetNillableType(s *string) *GameTypeUpdate {
	if s != nil {
		gtu.SetType(*s)
	}
	return gtu
}

// SetExternalTypeID sets the "external_type_id" field.
func (gtu *GameTypeUpdate) SetExternalTypeID(s string) *GameTypeUpdate {
	gtu.mutation.SetExternalTypeID(s)
	return gtu
}

// SetNillableExternalTypeID sets the "external_type_id" field if the given value is not nil.
func (gtu *GameTypeUpdate) SetNillableExternalTypeID(s *string) *GameTypeUpdate {
	if s != nil {
		gtu.SetExternalTypeID(*s)
	}
	return gtu
}

// AddGameIDs adds the "games" edge to the Game entity by IDs.
func (gtu *GameTypeUpdate) AddGameIDs(ids ...int) *GameTypeUpdate {
	gtu.mutation.AddGameIDs(ids...)
	return gtu
}

// AddGames adds the "games" edges to the Game entity.
func (gtu *GameTypeUpdate) AddGames(g ...*Game) *GameTypeUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gtu.AddGameIDs(ids...)
}

// AddGameVersionIDs adds the "game_versions" edge to the GameVersion entity by IDs.
func (gtu *GameTypeUpdate) AddGameVersionIDs(ids ...int) *GameTypeUpdate {
	gtu.mutation.AddGameVersionIDs(ids...)
	return gtu
}

// AddGameVersions adds the "game_versions" edges to the GameVersion entity.
func (gtu *GameTypeUpdate) AddGameVersions(g ...*GameVersion) *GameTypeUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gtu.AddGameVersionIDs(ids...)
}

// AddCurrencyVersionIDs adds the "currency_versions" edge to the CurrencyVersion entity by IDs.
func (gtu *GameTypeUpdate) AddCurrencyVersionIDs(ids ...int) *GameTypeUpdate {
	gtu.mutation.AddCurrencyVersionIDs(ids...)
	return gtu
}

// AddCurrencyVersions adds the "currency_versions" edges to the CurrencyVersion entity.
func (gtu *GameTypeUpdate) AddCurrencyVersions(c ...*CurrencyVersion) *GameTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gtu.AddCurrencyVersionIDs(ids...)
}

// Mutation returns the GameTypeMutation object of the builder.
func (gtu *GameTypeUpdate) Mutation() *GameTypeMutation {
	return gtu.mutation
}

// ClearGames clears all "games" edges to the Game entity.
func (gtu *GameTypeUpdate) ClearGames() *GameTypeUpdate {
	gtu.mutation.ClearGames()
	return gtu
}

// RemoveGameIDs removes the "games" edge to Game entities by IDs.
func (gtu *GameTypeUpdate) RemoveGameIDs(ids ...int) *GameTypeUpdate {
	gtu.mutation.RemoveGameIDs(ids...)
	return gtu
}

// RemoveGames removes "games" edges to Game entities.
func (gtu *GameTypeUpdate) RemoveGames(g ...*Game) *GameTypeUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gtu.RemoveGameIDs(ids...)
}

// ClearGameVersions clears all "game_versions" edges to the GameVersion entity.
func (gtu *GameTypeUpdate) ClearGameVersions() *GameTypeUpdate {
	gtu.mutation.ClearGameVersions()
	return gtu
}

// RemoveGameVersionIDs removes the "game_versions" edge to GameVersion entities by IDs.
func (gtu *GameTypeUpdate) RemoveGameVersionIDs(ids ...int) *GameTypeUpdate {
	gtu.mutation.RemoveGameVersionIDs(ids...)
	return gtu
}

// RemoveGameVersions removes "game_versions" edges to GameVersion entities.
func (gtu *GameTypeUpdate) RemoveGameVersions(g ...*GameVersion) *GameTypeUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gtu.RemoveGameVersionIDs(ids...)
}

// ClearCurrencyVersions clears all "currency_versions" edges to the CurrencyVersion entity.
func (gtu *GameTypeUpdate) ClearCurrencyVersions() *GameTypeUpdate {
	gtu.mutation.ClearCurrencyVersions()
	return gtu
}

// RemoveCurrencyVersionIDs removes the "currency_versions" edge to CurrencyVersion entities by IDs.
func (gtu *GameTypeUpdate) RemoveCurrencyVersionIDs(ids ...int) *GameTypeUpdate {
	gtu.mutation.RemoveCurrencyVersionIDs(ids...)
	return gtu
}

// RemoveCurrencyVersions removes "currency_versions" edges to CurrencyVersion entities.
func (gtu *GameTypeUpdate) RemoveCurrencyVersions(c ...*CurrencyVersion) *GameTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gtu.RemoveCurrencyVersionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gtu *GameTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gtu.sqlSave, gtu.mutation, gtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gtu *GameTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := gtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gtu *GameTypeUpdate) Exec(ctx context.Context) error {
	_, err := gtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gtu *GameTypeUpdate) ExecX(ctx context.Context) {
	if err := gtu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gtu *GameTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(gametype.Table, gametype.Columns, sqlgraph.NewFieldSpec(gametype.FieldID, field.TypeInt))
	if ps := gtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gtu.mutation.GetType(); ok {
		_spec.SetField(gametype.FieldType, field.TypeString, value)
	}
	if value, ok := gtu.mutation.ExternalTypeID(); ok {
		_spec.SetField(gametype.FieldExternalTypeID, field.TypeString, value)
	}
	if gtu.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.GamesTable,
			Columns: []string{gametype.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtu.mutation.RemovedGamesIDs(); len(nodes) > 0 && !gtu.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.GamesTable,
			Columns: []string{gametype.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtu.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.GamesTable,
			Columns: []string{gametype.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gtu.mutation.GameVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.GameVersionsTable,
			Columns: []string{gametype.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtu.mutation.RemovedGameVersionsIDs(); len(nodes) > 0 && !gtu.mutation.GameVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.GameVersionsTable,
			Columns: []string{gametype.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtu.mutation.GameVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.GameVersionsTable,
			Columns: []string{gametype.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gtu.mutation.CurrencyVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.CurrencyVersionsTable,
			Columns: []string{gametype.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtu.mutation.RemovedCurrencyVersionsIDs(); len(nodes) > 0 && !gtu.mutation.CurrencyVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.CurrencyVersionsTable,
			Columns: []string{gametype.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtu.mutation.CurrencyVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.CurrencyVersionsTable,
			Columns: []string{gametype.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gametype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gtu.mutation.done = true
	return n, nil
}

// GameTypeUpdateOne is the builder for updating a single GameType entity.
type GameTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameTypeMutation
}

// SetType sets the "type" field.
func (gtuo *GameTypeUpdateOne) SetType(s string) *GameTypeUpdateOne {
	gtuo.mutation.SetType(s)
	return gtuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (gtuo *GameTypeUpdateOne) SetNillableType(s *string) *GameTypeUpdateOne {
	if s != nil {
		gtuo.SetType(*s)
	}
	return gtuo
}

// SetExternalTypeID sets the "external_type_id" field.
func (gtuo *GameTypeUpdateOne) SetExternalTypeID(s string) *GameTypeUpdateOne {
	gtuo.mutation.SetExternalTypeID(s)
	return gtuo
}

// SetNillableExternalTypeID sets the "external_type_id" field if the given value is not nil.
func (gtuo *GameTypeUpdateOne) SetNillableExternalTypeID(s *string) *GameTypeUpdateOne {
	if s != nil {
		gtuo.SetExternalTypeID(*s)
	}
	return gtuo
}

// AddGameIDs adds the "games" edge to the Game entity by IDs.
func (gtuo *GameTypeUpdateOne) AddGameIDs(ids ...int) *GameTypeUpdateOne {
	gtuo.mutation.AddGameIDs(ids...)
	return gtuo
}

// AddGames adds the "games" edges to the Game entity.
func (gtuo *GameTypeUpdateOne) AddGames(g ...*Game) *GameTypeUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gtuo.AddGameIDs(ids...)
}

// AddGameVersionIDs adds the "game_versions" edge to the GameVersion entity by IDs.
func (gtuo *GameTypeUpdateOne) AddGameVersionIDs(ids ...int) *GameTypeUpdateOne {
	gtuo.mutation.AddGameVersionIDs(ids...)
	return gtuo
}

// AddGameVersions adds the "game_versions" edges to the GameVersion entity.
func (gtuo *GameTypeUpdateOne) AddGameVersions(g ...*GameVersion) *GameTypeUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gtuo.AddGameVersionIDs(ids...)
}

// AddCurrencyVersionIDs adds the "currency_versions" edge to the CurrencyVersion entity by IDs.
func (gtuo *GameTypeUpdateOne) AddCurrencyVersionIDs(ids ...int) *GameTypeUpdateOne {
	gtuo.mutation.AddCurrencyVersionIDs(ids...)
	return gtuo
}

// AddCurrencyVersions adds the "currency_versions" edges to the CurrencyVersion entity.
func (gtuo *GameTypeUpdateOne) AddCurrencyVersions(c ...*CurrencyVersion) *GameTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gtuo.AddCurrencyVersionIDs(ids...)
}

// Mutation returns the GameTypeMutation object of the builder.
func (gtuo *GameTypeUpdateOne) Mutation() *GameTypeMutation {
	return gtuo.mutation
}

// ClearGames clears all "games" edges to the Game entity.
func (gtuo *GameTypeUpdateOne) ClearGames() *GameTypeUpdateOne {
	gtuo.mutation.ClearGames()
	return gtuo
}

// RemoveGameIDs removes the "games" edge to Game entities by IDs.
func (gtuo *GameTypeUpdateOne) RemoveGameIDs(ids ...int) *GameTypeUpdateOne {
	gtuo.mutation.RemoveGameIDs(ids...)
	return gtuo
}

// RemoveGames removes "games" edges to Game entities.
func (gtuo *GameTypeUpdateOne) RemoveGames(g ...*Game) *GameTypeUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gtuo.RemoveGameIDs(ids...)
}

// ClearGameVersions clears all "game_versions" edges to the GameVersion entity.
func (gtuo *GameTypeUpdateOne) ClearGameVersions() *GameTypeUpdateOne {
	gtuo.mutation.ClearGameVersions()
	return gtuo
}

// RemoveGameVersionIDs removes the "game_versions" edge to GameVersion entities by IDs.
func (gtuo *GameTypeUpdateOne) RemoveGameVersionIDs(ids ...int) *GameTypeUpdateOne {
	gtuo.mutation.RemoveGameVersionIDs(ids...)
	return gtuo
}

// RemoveGameVersions removes "game_versions" edges to GameVersion entities.
func (gtuo *GameTypeUpdateOne) RemoveGameVersions(g ...*GameVersion) *GameTypeUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gtuo.RemoveGameVersionIDs(ids...)
}

// ClearCurrencyVersions clears all "currency_versions" edges to the CurrencyVersion entity.
func (gtuo *GameTypeUpdateOne) ClearCurrencyVersions() *GameTypeUpdateOne {
	gtuo.mutation.ClearCurrencyVersions()
	return gtuo
}

// RemoveCurrencyVersionIDs removes the "currency_versions" edge to CurrencyVersion entities by IDs.
func (gtuo *GameTypeUpdateOne) RemoveCurrencyVersionIDs(ids ...int) *GameTypeUpdateOne {
	gtuo.mutation.RemoveCurrencyVersionIDs(ids...)
	return gtuo
}

// RemoveCurrencyVersions removes "currency_versions" edges to CurrencyVersion entities.
func (gtuo *GameTypeUpdateOne) RemoveCurrencyVersions(c ...*CurrencyVersion) *GameTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gtuo.RemoveCurrencyVersionIDs(ids...)
}

// Where appends a list predicates to the GameTypeUpdate builder.
func (gtuo *GameTypeUpdateOne) Where(ps ...predicate.GameType) *GameTypeUpdateOne {
	gtuo.mutation.Where(ps...)
	return gtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gtuo *GameTypeUpdateOne) Select(field string, fields ...string) *GameTypeUpdateOne {
	gtuo.fields = append([]string{field}, fields...)
	return gtuo
}

// Save executes the query and returns the updated GameType entity.
func (gtuo *GameTypeUpdateOne) Save(ctx context.Context) (*GameType, error) {
	return withHooks(ctx, gtuo.sqlSave, gtuo.mutation, gtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gtuo *GameTypeUpdateOne) SaveX(ctx context.Context) *GameType {
	node, err := gtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gtuo *GameTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := gtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gtuo *GameTypeUpdateOne) ExecX(ctx context.Context) {
	if err := gtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gtuo *GameTypeUpdateOne) sqlSave(ctx context.Context) (_node *GameType, err error) {
	_spec := sqlgraph.NewUpdateSpec(gametype.Table, gametype.Columns, sqlgraph.NewFieldSpec(gametype.FieldID, field.TypeInt))
	id, ok := gtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GameType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gametype.FieldID)
		for _, f := range fields {
			if !gametype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gametype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gtuo.mutation.GetType(); ok {
		_spec.SetField(gametype.FieldType, field.TypeString, value)
	}
	if value, ok := gtuo.mutation.ExternalTypeID(); ok {
		_spec.SetField(gametype.FieldExternalTypeID, field.TypeString, value)
	}
	if gtuo.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.GamesTable,
			Columns: []string{gametype.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtuo.mutation.RemovedGamesIDs(); len(nodes) > 0 && !gtuo.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.GamesTable,
			Columns: []string{gametype.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtuo.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.GamesTable,
			Columns: []string{gametype.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gtuo.mutation.GameVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.GameVersionsTable,
			Columns: []string{gametype.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtuo.mutation.RemovedGameVersionsIDs(); len(nodes) > 0 && !gtuo.mutation.GameVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.GameVersionsTable,
			Columns: []string{gametype.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtuo.mutation.GameVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.GameVersionsTable,
			Columns: []string{gametype.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gtuo.mutation.CurrencyVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.CurrencyVersionsTable,
			Columns: []string{gametype.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtuo.mutation.RemovedCurrencyVersionsIDs(); len(nodes) > 0 && !gtuo.mutation.CurrencyVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.CurrencyVersionsTable,
			Columns: []string{gametype.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtuo.mutation.CurrencyVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.CurrencyVersionsTable,
			Columns: []string{gametype.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GameType{config: gtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gametype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gtuo.mutation.done = true
	return _node, nil
}
