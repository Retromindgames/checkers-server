// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
	"github.com/Lavizord/checkers-server/postgrescli/ent/round"
	"github.com/Lavizord/checkers-server/postgrescli/ent/transaction"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionMutation
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tu *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetType sets the "type" field.
func (tu *TransactionUpdate) SetType(s string) *TransactionUpdate {
	tu.mutation.SetType(s)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableType(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetType(*s)
	}
	return tu
}

// SetDeletedAt sets the "deleted_at" field.
func (tu *TransactionUpdate) SetDeletedAt(t time.Time) *TransactionUpdate {
	tu.mutation.SetDeletedAt(t)
	return tu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableDeletedAt(t *time.Time) *TransactionUpdate {
	if t != nil {
		tu.SetDeletedAt(*t)
	}
	return tu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tu *TransactionUpdate) ClearDeletedAt() *TransactionUpdate {
	tu.mutation.ClearDeletedAt()
	return tu
}

// SetAmount sets the "amount" field.
func (tu *TransactionUpdate) SetAmount(i int) *TransactionUpdate {
	tu.mutation.ResetAmount()
	tu.mutation.SetAmount(i)
	return tu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableAmount(i *int) *TransactionUpdate {
	if i != nil {
		tu.SetAmount(*i)
	}
	return tu
}

// AddAmount adds i to the "amount" field.
func (tu *TransactionUpdate) AddAmount(i int) *TransactionUpdate {
	tu.mutation.AddAmount(i)
	return tu
}

// SetCurrency sets the "currency" field.
func (tu *TransactionUpdate) SetCurrency(s string) *TransactionUpdate {
	tu.mutation.SetCurrency(s)
	return tu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableCurrency(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetCurrency(*s)
	}
	return tu
}

// SetPlatform sets the "platform" field.
func (tu *TransactionUpdate) SetPlatform(s string) *TransactionUpdate {
	tu.mutation.SetPlatform(s)
	return tu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillablePlatform(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetPlatform(*s)
	}
	return tu
}

// SetOperator sets the "operator" field.
func (tu *TransactionUpdate) SetOperator(s string) *TransactionUpdate {
	tu.mutation.SetOperator(s)
	return tu
}

// SetNillableOperator sets the "operator" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableOperator(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetOperator(*s)
	}
	return tu
}

// SetClient sets the "client" field.
func (tu *TransactionUpdate) SetClient(s string) *TransactionUpdate {
	tu.mutation.SetClient(s)
	return tu
}

// SetNillableClient sets the "client" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableClient(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetClient(*s)
	}
	return tu
}

// SetGame sets the "game" field.
func (tu *TransactionUpdate) SetGame(s string) *TransactionUpdate {
	tu.mutation.SetGame(s)
	return tu
}

// SetNillableGame sets the "game" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableGame(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetGame(*s)
	}
	return tu
}

// SetStatus sets the "status" field.
func (tu *TransactionUpdate) SetStatus(i int) *TransactionUpdate {
	tu.mutation.ResetStatus()
	tu.mutation.SetStatus(i)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableStatus(i *int) *TransactionUpdate {
	if i != nil {
		tu.SetStatus(*i)
	}
	return tu
}

// AddStatus adds i to the "status" field.
func (tu *TransactionUpdate) AddStatus(i int) *TransactionUpdate {
	tu.mutation.AddStatus(i)
	return tu
}

// SetDescription sets the "description" field.
func (tu *TransactionUpdate) SetDescription(s string) *TransactionUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableDescription(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// SetTimestamp sets the "timestamp" field.
func (tu *TransactionUpdate) SetTimestamp(t time.Time) *TransactionUpdate {
	tu.mutation.SetTimestamp(t)
	return tu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTimestamp(t *time.Time) *TransactionUpdate {
	if t != nil {
		tu.SetTimestamp(*t)
	}
	return tu
}

// SetMathProfile sets the "math_profile" field.
func (tu *TransactionUpdate) SetMathProfile(s string) *TransactionUpdate {
	tu.mutation.SetMathProfile(s)
	return tu
}

// SetNillableMathProfile sets the "math_profile" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableMathProfile(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetMathProfile(*s)
	}
	return tu
}

// ClearMathProfile clears the value of the "math_profile" field.
func (tu *TransactionUpdate) ClearMathProfile() *TransactionUpdate {
	tu.mutation.ClearMathProfile()
	return tu
}

// SetDenominator sets the "denominator" field.
func (tu *TransactionUpdate) SetDenominator(i int) *TransactionUpdate {
	tu.mutation.ResetDenominator()
	tu.mutation.SetDenominator(i)
	return tu
}

// SetNillableDenominator sets the "denominator" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableDenominator(i *int) *TransactionUpdate {
	if i != nil {
		tu.SetDenominator(*i)
	}
	return tu
}

// AddDenominator adds i to the "denominator" field.
func (tu *TransactionUpdate) AddDenominator(i int) *TransactionUpdate {
	tu.mutation.AddDenominator(i)
	return tu
}

// SetFinalBalance sets the "final_balance" field.
func (tu *TransactionUpdate) SetFinalBalance(i int) *TransactionUpdate {
	tu.mutation.ResetFinalBalance()
	tu.mutation.SetFinalBalance(i)
	return tu
}

// SetNillableFinalBalance sets the "final_balance" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableFinalBalance(i *int) *TransactionUpdate {
	if i != nil {
		tu.SetFinalBalance(*i)
	}
	return tu
}

// AddFinalBalance adds i to the "final_balance" field.
func (tu *TransactionUpdate) AddFinalBalance(i int) *TransactionUpdate {
	tu.mutation.AddFinalBalance(i)
	return tu
}

// SetSeqID sets the "seq_id" field.
func (tu *TransactionUpdate) SetSeqID(i int) *TransactionUpdate {
	tu.mutation.ResetSeqID()
	tu.mutation.SetSeqID(i)
	return tu
}

// SetNillableSeqID sets the "seq_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableSeqID(i *int) *TransactionUpdate {
	if i != nil {
		tu.SetSeqID(*i)
	}
	return tu
}

// AddSeqID adds i to the "seq_id" field.
func (tu *TransactionUpdate) AddSeqID(i int) *TransactionUpdate {
	tu.mutation.AddSeqID(i)
	return tu
}

// ClearSeqID clears the value of the "seq_id" field.
func (tu *TransactionUpdate) ClearSeqID() *TransactionUpdate {
	tu.mutation.ClearSeqID()
	return tu
}

// SetMultiplier sets the "multiplier" field.
func (tu *TransactionUpdate) SetMultiplier(i int) *TransactionUpdate {
	tu.mutation.ResetMultiplier()
	tu.mutation.SetMultiplier(i)
	return tu
}

// SetNillableMultiplier sets the "multiplier" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableMultiplier(i *int) *TransactionUpdate {
	if i != nil {
		tu.SetMultiplier(*i)
	}
	return tu
}

// AddMultiplier adds i to the "multiplier" field.
func (tu *TransactionUpdate) AddMultiplier(i int) *TransactionUpdate {
	tu.mutation.AddMultiplier(i)
	return tu
}

// ClearMultiplier clears the value of the "multiplier" field.
func (tu *TransactionUpdate) ClearMultiplier() *TransactionUpdate {
	tu.mutation.ClearMultiplier()
	return tu
}

// SetGameService sets the "game_service" field.
func (tu *TransactionUpdate) SetGameService(m map[string]interface{}) *TransactionUpdate {
	tu.mutation.SetGameService(m)
	return tu
}

// ClearGameService clears the value of the "game_service" field.
func (tu *TransactionUpdate) ClearGameService() *TransactionUpdate {
	tu.mutation.ClearGameService()
	return tu
}

// SetToken sets the "token" field.
func (tu *TransactionUpdate) SetToken(s string) *TransactionUpdate {
	tu.mutation.SetToken(s)
	return tu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableToken(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetToken(*s)
	}
	return tu
}

// SetOriginalAmount sets the "original_amount" field.
func (tu *TransactionUpdate) SetOriginalAmount(i int) *TransactionUpdate {
	tu.mutation.ResetOriginalAmount()
	tu.mutation.SetOriginalAmount(i)
	return tu
}

// SetNillableOriginalAmount sets the "original_amount" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableOriginalAmount(i *int) *TransactionUpdate {
	if i != nil {
		tu.SetOriginalAmount(*i)
	}
	return tu
}

// AddOriginalAmount adds i to the "original_amount" field.
func (tu *TransactionUpdate) AddOriginalAmount(i int) *TransactionUpdate {
	tu.mutation.AddOriginalAmount(i)
	return tu
}

// SetRoundsID sets the "rounds" edge to the Round entity by ID.
func (tu *TransactionUpdate) SetRoundsID(id int) *TransactionUpdate {
	tu.mutation.SetRoundsID(id)
	return tu
}

// SetNillableRoundsID sets the "rounds" edge to the Round entity by ID if the given value is not nil.
func (tu *TransactionUpdate) SetNillableRoundsID(id *int) *TransactionUpdate {
	if id != nil {
		tu = tu.SetRoundsID(*id)
	}
	return tu
}

// SetRounds sets the "rounds" edge to the Round entity.
func (tu *TransactionUpdate) SetRounds(r *Round) *TransactionUpdate {
	return tu.SetRoundsID(r.ID)
}

// Mutation returns the TransactionMutation object of the builder.
func (tu *TransactionUpdate) Mutation() *TransactionMutation {
	return tu.mutation
}

// ClearRounds clears the "rounds" edge to the Round entity.
func (tu *TransactionUpdate) ClearRounds() *TransactionUpdate {
	tu.mutation.ClearRounds()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(transaction.FieldType, field.TypeString, value)
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.SetField(transaction.FieldDeletedAt, field.TypeTime, value)
	}
	if tu.mutation.DeletedAtCleared() {
		_spec.ClearField(transaction.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedAmount(); ok {
		_spec.AddField(transaction.FieldAmount, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Currency(); ok {
		_spec.SetField(transaction.FieldCurrency, field.TypeString, value)
	}
	if value, ok := tu.mutation.Platform(); ok {
		_spec.SetField(transaction.FieldPlatform, field.TypeString, value)
	}
	if value, ok := tu.mutation.Operator(); ok {
		_spec.SetField(transaction.FieldOperator, field.TypeString, value)
	}
	if value, ok := tu.mutation.GetClient(); ok {
		_spec.SetField(transaction.FieldClient, field.TypeString, value)
	}
	if value, ok := tu.mutation.Game(); ok {
		_spec.SetField(transaction.FieldGame, field.TypeString, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(transaction.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedStatus(); ok {
		_spec.AddField(transaction.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(transaction.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.Timestamp(); ok {
		_spec.SetField(transaction.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := tu.mutation.MathProfile(); ok {
		_spec.SetField(transaction.FieldMathProfile, field.TypeString, value)
	}
	if tu.mutation.MathProfileCleared() {
		_spec.ClearField(transaction.FieldMathProfile, field.TypeString)
	}
	if value, ok := tu.mutation.Denominator(); ok {
		_spec.SetField(transaction.FieldDenominator, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedDenominator(); ok {
		_spec.AddField(transaction.FieldDenominator, field.TypeInt, value)
	}
	if value, ok := tu.mutation.FinalBalance(); ok {
		_spec.SetField(transaction.FieldFinalBalance, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedFinalBalance(); ok {
		_spec.AddField(transaction.FieldFinalBalance, field.TypeInt, value)
	}
	if value, ok := tu.mutation.SeqID(); ok {
		_spec.SetField(transaction.FieldSeqID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedSeqID(); ok {
		_spec.AddField(transaction.FieldSeqID, field.TypeInt, value)
	}
	if tu.mutation.SeqIDCleared() {
		_spec.ClearField(transaction.FieldSeqID, field.TypeInt)
	}
	if value, ok := tu.mutation.Multiplier(); ok {
		_spec.SetField(transaction.FieldMultiplier, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedMultiplier(); ok {
		_spec.AddField(transaction.FieldMultiplier, field.TypeInt, value)
	}
	if tu.mutation.MultiplierCleared() {
		_spec.ClearField(transaction.FieldMultiplier, field.TypeInt)
	}
	if value, ok := tu.mutation.GameService(); ok {
		_spec.SetField(transaction.FieldGameService, field.TypeJSON, value)
	}
	if tu.mutation.GameServiceCleared() {
		_spec.ClearField(transaction.FieldGameService, field.TypeJSON)
	}
	if value, ok := tu.mutation.Token(); ok {
		_spec.SetField(transaction.FieldToken, field.TypeString, value)
	}
	if value, ok := tu.mutation.OriginalAmount(); ok {
		_spec.SetField(transaction.FieldOriginalAmount, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedOriginalAmount(); ok {
		_spec.AddField(transaction.FieldOriginalAmount, field.TypeInt, value)
	}
	if tu.mutation.RoundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.RoundsTable,
			Columns: []string{transaction.RoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RoundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.RoundsTable,
			Columns: []string{transaction.RoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionMutation
}

// SetType sets the "type" field.
func (tuo *TransactionUpdateOne) SetType(s string) *TransactionUpdateOne {
	tuo.mutation.SetType(s)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableType(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetType(*s)
	}
	return tuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuo *TransactionUpdateOne) SetDeletedAt(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetDeletedAt(t)
	return tuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableDeletedAt(t *time.Time) *TransactionUpdateOne {
	if t != nil {
		tuo.SetDeletedAt(*t)
	}
	return tuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuo *TransactionUpdateOne) ClearDeletedAt() *TransactionUpdateOne {
	tuo.mutation.ClearDeletedAt()
	return tuo
}

// SetAmount sets the "amount" field.
func (tuo *TransactionUpdateOne) SetAmount(i int) *TransactionUpdateOne {
	tuo.mutation.ResetAmount()
	tuo.mutation.SetAmount(i)
	return tuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableAmount(i *int) *TransactionUpdateOne {
	if i != nil {
		tuo.SetAmount(*i)
	}
	return tuo
}

// AddAmount adds i to the "amount" field.
func (tuo *TransactionUpdateOne) AddAmount(i int) *TransactionUpdateOne {
	tuo.mutation.AddAmount(i)
	return tuo
}

// SetCurrency sets the "currency" field.
func (tuo *TransactionUpdateOne) SetCurrency(s string) *TransactionUpdateOne {
	tuo.mutation.SetCurrency(s)
	return tuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableCurrency(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetCurrency(*s)
	}
	return tuo
}

// SetPlatform sets the "platform" field.
func (tuo *TransactionUpdateOne) SetPlatform(s string) *TransactionUpdateOne {
	tuo.mutation.SetPlatform(s)
	return tuo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillablePlatform(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetPlatform(*s)
	}
	return tuo
}

// SetOperator sets the "operator" field.
func (tuo *TransactionUpdateOne) SetOperator(s string) *TransactionUpdateOne {
	tuo.mutation.SetOperator(s)
	return tuo
}

// SetNillableOperator sets the "operator" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableOperator(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetOperator(*s)
	}
	return tuo
}

// SetClient sets the "client" field.
func (tuo *TransactionUpdateOne) SetClient(s string) *TransactionUpdateOne {
	tuo.mutation.SetClient(s)
	return tuo
}

// SetNillableClient sets the "client" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableClient(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetClient(*s)
	}
	return tuo
}

// SetGame sets the "game" field.
func (tuo *TransactionUpdateOne) SetGame(s string) *TransactionUpdateOne {
	tuo.mutation.SetGame(s)
	return tuo
}

// SetNillableGame sets the "game" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableGame(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetGame(*s)
	}
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TransactionUpdateOne) SetStatus(i int) *TransactionUpdateOne {
	tuo.mutation.ResetStatus()
	tuo.mutation.SetStatus(i)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableStatus(i *int) *TransactionUpdateOne {
	if i != nil {
		tuo.SetStatus(*i)
	}
	return tuo
}

// AddStatus adds i to the "status" field.
func (tuo *TransactionUpdateOne) AddStatus(i int) *TransactionUpdateOne {
	tuo.mutation.AddStatus(i)
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TransactionUpdateOne) SetDescription(s string) *TransactionUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableDescription(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// SetTimestamp sets the "timestamp" field.
func (tuo *TransactionUpdateOne) SetTimestamp(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetTimestamp(t)
	return tuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTimestamp(t *time.Time) *TransactionUpdateOne {
	if t != nil {
		tuo.SetTimestamp(*t)
	}
	return tuo
}

// SetMathProfile sets the "math_profile" field.
func (tuo *TransactionUpdateOne) SetMathProfile(s string) *TransactionUpdateOne {
	tuo.mutation.SetMathProfile(s)
	return tuo
}

// SetNillableMathProfile sets the "math_profile" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableMathProfile(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetMathProfile(*s)
	}
	return tuo
}

// ClearMathProfile clears the value of the "math_profile" field.
func (tuo *TransactionUpdateOne) ClearMathProfile() *TransactionUpdateOne {
	tuo.mutation.ClearMathProfile()
	return tuo
}

// SetDenominator sets the "denominator" field.
func (tuo *TransactionUpdateOne) SetDenominator(i int) *TransactionUpdateOne {
	tuo.mutation.ResetDenominator()
	tuo.mutation.SetDenominator(i)
	return tuo
}

// SetNillableDenominator sets the "denominator" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableDenominator(i *int) *TransactionUpdateOne {
	if i != nil {
		tuo.SetDenominator(*i)
	}
	return tuo
}

// AddDenominator adds i to the "denominator" field.
func (tuo *TransactionUpdateOne) AddDenominator(i int) *TransactionUpdateOne {
	tuo.mutation.AddDenominator(i)
	return tuo
}

// SetFinalBalance sets the "final_balance" field.
func (tuo *TransactionUpdateOne) SetFinalBalance(i int) *TransactionUpdateOne {
	tuo.mutation.ResetFinalBalance()
	tuo.mutation.SetFinalBalance(i)
	return tuo
}

// SetNillableFinalBalance sets the "final_balance" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableFinalBalance(i *int) *TransactionUpdateOne {
	if i != nil {
		tuo.SetFinalBalance(*i)
	}
	return tuo
}

// AddFinalBalance adds i to the "final_balance" field.
func (tuo *TransactionUpdateOne) AddFinalBalance(i int) *TransactionUpdateOne {
	tuo.mutation.AddFinalBalance(i)
	return tuo
}

// SetSeqID sets the "seq_id" field.
func (tuo *TransactionUpdateOne) SetSeqID(i int) *TransactionUpdateOne {
	tuo.mutation.ResetSeqID()
	tuo.mutation.SetSeqID(i)
	return tuo
}

// SetNillableSeqID sets the "seq_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableSeqID(i *int) *TransactionUpdateOne {
	if i != nil {
		tuo.SetSeqID(*i)
	}
	return tuo
}

// AddSeqID adds i to the "seq_id" field.
func (tuo *TransactionUpdateOne) AddSeqID(i int) *TransactionUpdateOne {
	tuo.mutation.AddSeqID(i)
	return tuo
}

// ClearSeqID clears the value of the "seq_id" field.
func (tuo *TransactionUpdateOne) ClearSeqID() *TransactionUpdateOne {
	tuo.mutation.ClearSeqID()
	return tuo
}

// SetMultiplier sets the "multiplier" field.
func (tuo *TransactionUpdateOne) SetMultiplier(i int) *TransactionUpdateOne {
	tuo.mutation.ResetMultiplier()
	tuo.mutation.SetMultiplier(i)
	return tuo
}

// SetNillableMultiplier sets the "multiplier" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableMultiplier(i *int) *TransactionUpdateOne {
	if i != nil {
		tuo.SetMultiplier(*i)
	}
	return tuo
}

// AddMultiplier adds i to the "multiplier" field.
func (tuo *TransactionUpdateOne) AddMultiplier(i int) *TransactionUpdateOne {
	tuo.mutation.AddMultiplier(i)
	return tuo
}

// ClearMultiplier clears the value of the "multiplier" field.
func (tuo *TransactionUpdateOne) ClearMultiplier() *TransactionUpdateOne {
	tuo.mutation.ClearMultiplier()
	return tuo
}

// SetGameService sets the "game_service" field.
func (tuo *TransactionUpdateOne) SetGameService(m map[string]interface{}) *TransactionUpdateOne {
	tuo.mutation.SetGameService(m)
	return tuo
}

// ClearGameService clears the value of the "game_service" field.
func (tuo *TransactionUpdateOne) ClearGameService() *TransactionUpdateOne {
	tuo.mutation.ClearGameService()
	return tuo
}

// SetToken sets the "token" field.
func (tuo *TransactionUpdateOne) SetToken(s string) *TransactionUpdateOne {
	tuo.mutation.SetToken(s)
	return tuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableToken(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetToken(*s)
	}
	return tuo
}

// SetOriginalAmount sets the "original_amount" field.
func (tuo *TransactionUpdateOne) SetOriginalAmount(i int) *TransactionUpdateOne {
	tuo.mutation.ResetOriginalAmount()
	tuo.mutation.SetOriginalAmount(i)
	return tuo
}

// SetNillableOriginalAmount sets the "original_amount" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableOriginalAmount(i *int) *TransactionUpdateOne {
	if i != nil {
		tuo.SetOriginalAmount(*i)
	}
	return tuo
}

// AddOriginalAmount adds i to the "original_amount" field.
func (tuo *TransactionUpdateOne) AddOriginalAmount(i int) *TransactionUpdateOne {
	tuo.mutation.AddOriginalAmount(i)
	return tuo
}

// SetRoundsID sets the "rounds" edge to the Round entity by ID.
func (tuo *TransactionUpdateOne) SetRoundsID(id int) *TransactionUpdateOne {
	tuo.mutation.SetRoundsID(id)
	return tuo
}

// SetNillableRoundsID sets the "rounds" edge to the Round entity by ID if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableRoundsID(id *int) *TransactionUpdateOne {
	if id != nil {
		tuo = tuo.SetRoundsID(*id)
	}
	return tuo
}

// SetRounds sets the "rounds" edge to the Round entity.
func (tuo *TransactionUpdateOne) SetRounds(r *Round) *TransactionUpdateOne {
	return tuo.SetRoundsID(r.ID)
}

// Mutation returns the TransactionMutation object of the builder.
func (tuo *TransactionUpdateOne) Mutation() *TransactionMutation {
	return tuo.mutation
}

// ClearRounds clears the "rounds" edge to the Round entity.
func (tuo *TransactionUpdateOne) ClearRounds() *TransactionUpdateOne {
	tuo.mutation.ClearRounds()
	return tuo
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tuo *TransactionUpdateOne) Where(ps ...predicate.Transaction) *TransactionUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transaction entity.
func (tuo *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(transaction.FieldType, field.TypeString, value)
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.SetField(transaction.FieldDeletedAt, field.TypeTime, value)
	}
	if tuo.mutation.DeletedAtCleared() {
		_spec.ClearField(transaction.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedAmount(); ok {
		_spec.AddField(transaction.FieldAmount, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Currency(); ok {
		_spec.SetField(transaction.FieldCurrency, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Platform(); ok {
		_spec.SetField(transaction.FieldPlatform, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Operator(); ok {
		_spec.SetField(transaction.FieldOperator, field.TypeString, value)
	}
	if value, ok := tuo.mutation.GetClient(); ok {
		_spec.SetField(transaction.FieldClient, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Game(); ok {
		_spec.SetField(transaction.FieldGame, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(transaction.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedStatus(); ok {
		_spec.AddField(transaction.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(transaction.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Timestamp(); ok {
		_spec.SetField(transaction.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.MathProfile(); ok {
		_spec.SetField(transaction.FieldMathProfile, field.TypeString, value)
	}
	if tuo.mutation.MathProfileCleared() {
		_spec.ClearField(transaction.FieldMathProfile, field.TypeString)
	}
	if value, ok := tuo.mutation.Denominator(); ok {
		_spec.SetField(transaction.FieldDenominator, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedDenominator(); ok {
		_spec.AddField(transaction.FieldDenominator, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.FinalBalance(); ok {
		_spec.SetField(transaction.FieldFinalBalance, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedFinalBalance(); ok {
		_spec.AddField(transaction.FieldFinalBalance, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.SeqID(); ok {
		_spec.SetField(transaction.FieldSeqID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedSeqID(); ok {
		_spec.AddField(transaction.FieldSeqID, field.TypeInt, value)
	}
	if tuo.mutation.SeqIDCleared() {
		_spec.ClearField(transaction.FieldSeqID, field.TypeInt)
	}
	if value, ok := tuo.mutation.Multiplier(); ok {
		_spec.SetField(transaction.FieldMultiplier, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedMultiplier(); ok {
		_spec.AddField(transaction.FieldMultiplier, field.TypeInt, value)
	}
	if tuo.mutation.MultiplierCleared() {
		_spec.ClearField(transaction.FieldMultiplier, field.TypeInt)
	}
	if value, ok := tuo.mutation.GameService(); ok {
		_spec.SetField(transaction.FieldGameService, field.TypeJSON, value)
	}
	if tuo.mutation.GameServiceCleared() {
		_spec.ClearField(transaction.FieldGameService, field.TypeJSON)
	}
	if value, ok := tuo.mutation.Token(); ok {
		_spec.SetField(transaction.FieldToken, field.TypeString, value)
	}
	if value, ok := tuo.mutation.OriginalAmount(); ok {
		_spec.SetField(transaction.FieldOriginalAmount, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedOriginalAmount(); ok {
		_spec.AddField(transaction.FieldOriginalAmount, field.TypeInt, value)
	}
	if tuo.mutation.RoundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.RoundsTable,
			Columns: []string{transaction.RoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RoundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.RoundsTable,
			Columns: []string{transaction.RoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transaction{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
