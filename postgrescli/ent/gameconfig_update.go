// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencyversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameconfig"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/mathversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/operator"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
)

// GameConfigUpdate is the builder for updating GameConfig entities.
type GameConfigUpdate struct {
	config
	hooks    []Hook
	mutation *GameConfigMutation
}

// Where appends a list predicates to the GameConfigUpdate builder.
func (gcu *GameConfigUpdate) Where(ps ...predicate.GameConfig) *GameConfigUpdate {
	gcu.mutation.Where(ps...)
	return gcu
}

// SetCanDemo sets the "can_demo" field.
func (gcu *GameConfigUpdate) SetCanDemo(b bool) *GameConfigUpdate {
	gcu.mutation.SetCanDemo(b)
	return gcu
}

// SetNillableCanDemo sets the "can_demo" field if the given value is not nil.
func (gcu *GameConfigUpdate) SetNillableCanDemo(b *bool) *GameConfigUpdate {
	if b != nil {
		gcu.SetCanDemo(*b)
	}
	return gcu
}

// SetCanTournament sets the "can_tournament" field.
func (gcu *GameConfigUpdate) SetCanTournament(b bool) *GameConfigUpdate {
	gcu.mutation.SetCanTournament(b)
	return gcu
}

// SetNillableCanTournament sets the "can_tournament" field if the given value is not nil.
func (gcu *GameConfigUpdate) SetNillableCanTournament(b *bool) *GameConfigUpdate {
	if b != nil {
		gcu.SetCanTournament(*b)
	}
	return gcu
}

// SetCanFreeBets sets the "can_free_bets" field.
func (gcu *GameConfigUpdate) SetCanFreeBets(b bool) *GameConfigUpdate {
	gcu.mutation.SetCanFreeBets(b)
	return gcu
}

// SetNillableCanFreeBets sets the "can_free_bets" field if the given value is not nil.
func (gcu *GameConfigUpdate) SetNillableCanFreeBets(b *bool) *GameConfigUpdate {
	if b != nil {
		gcu.SetCanFreeBets(*b)
	}
	return gcu
}

// SetCanDropAndWins sets the "can_drop_and_wins" field.
func (gcu *GameConfigUpdate) SetCanDropAndWins(b bool) *GameConfigUpdate {
	gcu.mutation.SetCanDropAndWins(b)
	return gcu
}

// SetNillableCanDropAndWins sets the "can_drop_and_wins" field if the given value is not nil.
func (gcu *GameConfigUpdate) SetNillableCanDropAndWins(b *bool) *GameConfigUpdate {
	if b != nil {
		gcu.SetCanDropAndWins(*b)
	}
	return gcu
}

// SetCanBuyBonus sets the "can_buy_bonus" field.
func (gcu *GameConfigUpdate) SetCanBuyBonus(b bool) *GameConfigUpdate {
	gcu.mutation.SetCanBuyBonus(b)
	return gcu
}

// SetNillableCanBuyBonus sets the "can_buy_bonus" field if the given value is not nil.
func (gcu *GameConfigUpdate) SetNillableCanBuyBonus(b *bool) *GameConfigUpdate {
	if b != nil {
		gcu.SetCanBuyBonus(*b)
	}
	return gcu
}

// SetCanTurbo sets the "can_turbo" field.
func (gcu *GameConfigUpdate) SetCanTurbo(b bool) *GameConfigUpdate {
	gcu.mutation.SetCanTurbo(b)
	return gcu
}

// SetNillableCanTurbo sets the "can_turbo" field if the given value is not nil.
func (gcu *GameConfigUpdate) SetNillableCanTurbo(b *bool) *GameConfigUpdate {
	if b != nil {
		gcu.SetCanTurbo(*b)
	}
	return gcu
}

// SetIsActive sets the "is_active" field.
func (gcu *GameConfigUpdate) SetIsActive(b bool) *GameConfigUpdate {
	gcu.mutation.SetIsActive(b)
	return gcu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (gcu *GameConfigUpdate) SetNillableIsActive(b *bool) *GameConfigUpdate {
	if b != nil {
		gcu.SetIsActive(*b)
	}
	return gcu
}

// SetCanAutoBet sets the "can_auto_bet" field.
func (gcu *GameConfigUpdate) SetCanAutoBet(b bool) *GameConfigUpdate {
	gcu.mutation.SetCanAutoBet(b)
	return gcu
}

// SetNillableCanAutoBet sets the "can_auto_bet" field if the given value is not nil.
func (gcu *GameConfigUpdate) SetNillableCanAutoBet(b *bool) *GameConfigUpdate {
	if b != nil {
		gcu.SetCanAutoBet(*b)
	}
	return gcu
}

// SetCanAutoCashout sets the "can_auto_cashout" field.
func (gcu *GameConfigUpdate) SetCanAutoCashout(b bool) *GameConfigUpdate {
	gcu.mutation.SetCanAutoCashout(b)
	return gcu
}

// SetNillableCanAutoCashout sets the "can_auto_cashout" field if the given value is not nil.
func (gcu *GameConfigUpdate) SetNillableCanAutoCashout(b *bool) *GameConfigUpdate {
	if b != nil {
		gcu.SetCanAutoCashout(*b)
	}
	return gcu
}

// SetCanAnteBet sets the "can_ante_bet" field.
func (gcu *GameConfigUpdate) SetCanAnteBet(b bool) *GameConfigUpdate {
	gcu.mutation.SetCanAnteBet(b)
	return gcu
}

// SetNillableCanAnteBet sets the "can_ante_bet" field if the given value is not nil.
func (gcu *GameConfigUpdate) SetNillableCanAnteBet(b *bool) *GameConfigUpdate {
	if b != nil {
		gcu.SetCanAnteBet(*b)
	}
	return gcu
}

// SetCanHomeButton sets the "can_home_button" field.
func (gcu *GameConfigUpdate) SetCanHomeButton(b bool) *GameConfigUpdate {
	gcu.mutation.SetCanHomeButton(b)
	return gcu
}

// SetNillableCanHomeButton sets the "can_home_button" field if the given value is not nil.
func (gcu *GameConfigUpdate) SetNillableCanHomeButton(b *bool) *GameConfigUpdate {
	if b != nil {
		gcu.SetCanHomeButton(*b)
	}
	return gcu
}

// SetMathVersionsID sets the "math_versions" edge to the MathVersion entity by ID.
func (gcu *GameConfigUpdate) SetMathVersionsID(id int) *GameConfigUpdate {
	gcu.mutation.SetMathVersionsID(id)
	return gcu
}

// SetNillableMathVersionsID sets the "math_versions" edge to the MathVersion entity by ID if the given value is not nil.
func (gcu *GameConfigUpdate) SetNillableMathVersionsID(id *int) *GameConfigUpdate {
	if id != nil {
		gcu = gcu.SetMathVersionsID(*id)
	}
	return gcu
}

// SetMathVersions sets the "math_versions" edge to the MathVersion entity.
func (gcu *GameConfigUpdate) SetMathVersions(m *MathVersion) *GameConfigUpdate {
	return gcu.SetMathVersionsID(m.ID)
}

// SetGameVersionsID sets the "game_versions" edge to the GameVersion entity by ID.
func (gcu *GameConfigUpdate) SetGameVersionsID(id int) *GameConfigUpdate {
	gcu.mutation.SetGameVersionsID(id)
	return gcu
}

// SetNillableGameVersionsID sets the "game_versions" edge to the GameVersion entity by ID if the given value is not nil.
func (gcu *GameConfigUpdate) SetNillableGameVersionsID(id *int) *GameConfigUpdate {
	if id != nil {
		gcu = gcu.SetGameVersionsID(*id)
	}
	return gcu
}

// SetGameVersions sets the "game_versions" edge to the GameVersion entity.
func (gcu *GameConfigUpdate) SetGameVersions(g *GameVersion) *GameConfigUpdate {
	return gcu.SetGameVersionsID(g.ID)
}

// SetGamesID sets the "games" edge to the Game entity by ID.
func (gcu *GameConfigUpdate) SetGamesID(id int) *GameConfigUpdate {
	gcu.mutation.SetGamesID(id)
	return gcu
}

// SetNillableGamesID sets the "games" edge to the Game entity by ID if the given value is not nil.
func (gcu *GameConfigUpdate) SetNillableGamesID(id *int) *GameConfigUpdate {
	if id != nil {
		gcu = gcu.SetGamesID(*id)
	}
	return gcu
}

// SetGames sets the "games" edge to the Game entity.
func (gcu *GameConfigUpdate) SetGames(g *Game) *GameConfigUpdate {
	return gcu.SetGamesID(g.ID)
}

// SetOperatorID sets the "Operator" edge to the Operator entity by ID.
func (gcu *GameConfigUpdate) SetOperatorID(id int) *GameConfigUpdate {
	gcu.mutation.SetOperatorID(id)
	return gcu
}

// SetNillableOperatorID sets the "Operator" edge to the Operator entity by ID if the given value is not nil.
func (gcu *GameConfigUpdate) SetNillableOperatorID(id *int) *GameConfigUpdate {
	if id != nil {
		gcu = gcu.SetOperatorID(*id)
	}
	return gcu
}

// SetOperator sets the "Operator" edge to the Operator entity.
func (gcu *GameConfigUpdate) SetOperator(o *Operator) *GameConfigUpdate {
	return gcu.SetOperatorID(o.ID)
}

// SetCurrencyVersionsID sets the "currency_versions" edge to the CurrencyVersion entity by ID.
func (gcu *GameConfigUpdate) SetCurrencyVersionsID(id int) *GameConfigUpdate {
	gcu.mutation.SetCurrencyVersionsID(id)
	return gcu
}

// SetNillableCurrencyVersionsID sets the "currency_versions" edge to the CurrencyVersion entity by ID if the given value is not nil.
func (gcu *GameConfigUpdate) SetNillableCurrencyVersionsID(id *int) *GameConfigUpdate {
	if id != nil {
		gcu = gcu.SetCurrencyVersionsID(*id)
	}
	return gcu
}

// SetCurrencyVersions sets the "currency_versions" edge to the CurrencyVersion entity.
func (gcu *GameConfigUpdate) SetCurrencyVersions(c *CurrencyVersion) *GameConfigUpdate {
	return gcu.SetCurrencyVersionsID(c.ID)
}

// Mutation returns the GameConfigMutation object of the builder.
func (gcu *GameConfigUpdate) Mutation() *GameConfigMutation {
	return gcu.mutation
}

// ClearMathVersions clears the "math_versions" edge to the MathVersion entity.
func (gcu *GameConfigUpdate) ClearMathVersions() *GameConfigUpdate {
	gcu.mutation.ClearMathVersions()
	return gcu
}

// ClearGameVersions clears the "game_versions" edge to the GameVersion entity.
func (gcu *GameConfigUpdate) ClearGameVersions() *GameConfigUpdate {
	gcu.mutation.ClearGameVersions()
	return gcu
}

// ClearGames clears the "games" edge to the Game entity.
func (gcu *GameConfigUpdate) ClearGames() *GameConfigUpdate {
	gcu.mutation.ClearGames()
	return gcu
}

// ClearOperator clears the "Operator" edge to the Operator entity.
func (gcu *GameConfigUpdate) ClearOperator() *GameConfigUpdate {
	gcu.mutation.ClearOperator()
	return gcu
}

// ClearCurrencyVersions clears the "currency_versions" edge to the CurrencyVersion entity.
func (gcu *GameConfigUpdate) ClearCurrencyVersions() *GameConfigUpdate {
	gcu.mutation.ClearCurrencyVersions()
	return gcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gcu *GameConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gcu.sqlSave, gcu.mutation, gcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gcu *GameConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := gcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gcu *GameConfigUpdate) Exec(ctx context.Context) error {
	_, err := gcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcu *GameConfigUpdate) ExecX(ctx context.Context) {
	if err := gcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gcu *GameConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(gameconfig.Table, gameconfig.Columns, sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt))
	if ps := gcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gcu.mutation.CanDemo(); ok {
		_spec.SetField(gameconfig.FieldCanDemo, field.TypeBool, value)
	}
	if value, ok := gcu.mutation.CanTournament(); ok {
		_spec.SetField(gameconfig.FieldCanTournament, field.TypeBool, value)
	}
	if value, ok := gcu.mutation.CanFreeBets(); ok {
		_spec.SetField(gameconfig.FieldCanFreeBets, field.TypeBool, value)
	}
	if value, ok := gcu.mutation.CanDropAndWins(); ok {
		_spec.SetField(gameconfig.FieldCanDropAndWins, field.TypeBool, value)
	}
	if value, ok := gcu.mutation.CanBuyBonus(); ok {
		_spec.SetField(gameconfig.FieldCanBuyBonus, field.TypeBool, value)
	}
	if value, ok := gcu.mutation.CanTurbo(); ok {
		_spec.SetField(gameconfig.FieldCanTurbo, field.TypeBool, value)
	}
	if value, ok := gcu.mutation.IsActive(); ok {
		_spec.SetField(gameconfig.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := gcu.mutation.CanAutoBet(); ok {
		_spec.SetField(gameconfig.FieldCanAutoBet, field.TypeBool, value)
	}
	if value, ok := gcu.mutation.CanAutoCashout(); ok {
		_spec.SetField(gameconfig.FieldCanAutoCashout, field.TypeBool, value)
	}
	if value, ok := gcu.mutation.CanAnteBet(); ok {
		_spec.SetField(gameconfig.FieldCanAnteBet, field.TypeBool, value)
	}
	if value, ok := gcu.mutation.CanHomeButton(); ok {
		_spec.SetField(gameconfig.FieldCanHomeButton, field.TypeBool, value)
	}
	if gcu.mutation.MathVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.MathVersionsTable,
			Columns: []string{gameconfig.MathVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mathversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcu.mutation.MathVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.MathVersionsTable,
			Columns: []string{gameconfig.MathVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mathversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gcu.mutation.GameVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.GameVersionsTable,
			Columns: []string{gameconfig.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcu.mutation.GameVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.GameVersionsTable,
			Columns: []string{gameconfig.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gcu.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.GamesTable,
			Columns: []string{gameconfig.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcu.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.GamesTable,
			Columns: []string{gameconfig.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gcu.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.OperatorTable,
			Columns: []string{gameconfig.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcu.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.OperatorTable,
			Columns: []string{gameconfig.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gcu.mutation.CurrencyVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.CurrencyVersionsTable,
			Columns: []string{gameconfig.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcu.mutation.CurrencyVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.CurrencyVersionsTable,
			Columns: []string{gameconfig.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gcu.mutation.done = true
	return n, nil
}

// GameConfigUpdateOne is the builder for updating a single GameConfig entity.
type GameConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameConfigMutation
}

// SetCanDemo sets the "can_demo" field.
func (gcuo *GameConfigUpdateOne) SetCanDemo(b bool) *GameConfigUpdateOne {
	gcuo.mutation.SetCanDemo(b)
	return gcuo
}

// SetNillableCanDemo sets the "can_demo" field if the given value is not nil.
func (gcuo *GameConfigUpdateOne) SetNillableCanDemo(b *bool) *GameConfigUpdateOne {
	if b != nil {
		gcuo.SetCanDemo(*b)
	}
	return gcuo
}

// SetCanTournament sets the "can_tournament" field.
func (gcuo *GameConfigUpdateOne) SetCanTournament(b bool) *GameConfigUpdateOne {
	gcuo.mutation.SetCanTournament(b)
	return gcuo
}

// SetNillableCanTournament sets the "can_tournament" field if the given value is not nil.
func (gcuo *GameConfigUpdateOne) SetNillableCanTournament(b *bool) *GameConfigUpdateOne {
	if b != nil {
		gcuo.SetCanTournament(*b)
	}
	return gcuo
}

// SetCanFreeBets sets the "can_free_bets" field.
func (gcuo *GameConfigUpdateOne) SetCanFreeBets(b bool) *GameConfigUpdateOne {
	gcuo.mutation.SetCanFreeBets(b)
	return gcuo
}

// SetNillableCanFreeBets sets the "can_free_bets" field if the given value is not nil.
func (gcuo *GameConfigUpdateOne) SetNillableCanFreeBets(b *bool) *GameConfigUpdateOne {
	if b != nil {
		gcuo.SetCanFreeBets(*b)
	}
	return gcuo
}

// SetCanDropAndWins sets the "can_drop_and_wins" field.
func (gcuo *GameConfigUpdateOne) SetCanDropAndWins(b bool) *GameConfigUpdateOne {
	gcuo.mutation.SetCanDropAndWins(b)
	return gcuo
}

// SetNillableCanDropAndWins sets the "can_drop_and_wins" field if the given value is not nil.
func (gcuo *GameConfigUpdateOne) SetNillableCanDropAndWins(b *bool) *GameConfigUpdateOne {
	if b != nil {
		gcuo.SetCanDropAndWins(*b)
	}
	return gcuo
}

// SetCanBuyBonus sets the "can_buy_bonus" field.
func (gcuo *GameConfigUpdateOne) SetCanBuyBonus(b bool) *GameConfigUpdateOne {
	gcuo.mutation.SetCanBuyBonus(b)
	return gcuo
}

// SetNillableCanBuyBonus sets the "can_buy_bonus" field if the given value is not nil.
func (gcuo *GameConfigUpdateOne) SetNillableCanBuyBonus(b *bool) *GameConfigUpdateOne {
	if b != nil {
		gcuo.SetCanBuyBonus(*b)
	}
	return gcuo
}

// SetCanTurbo sets the "can_turbo" field.
func (gcuo *GameConfigUpdateOne) SetCanTurbo(b bool) *GameConfigUpdateOne {
	gcuo.mutation.SetCanTurbo(b)
	return gcuo
}

// SetNillableCanTurbo sets the "can_turbo" field if the given value is not nil.
func (gcuo *GameConfigUpdateOne) SetNillableCanTurbo(b *bool) *GameConfigUpdateOne {
	if b != nil {
		gcuo.SetCanTurbo(*b)
	}
	return gcuo
}

// SetIsActive sets the "is_active" field.
func (gcuo *GameConfigUpdateOne) SetIsActive(b bool) *GameConfigUpdateOne {
	gcuo.mutation.SetIsActive(b)
	return gcuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (gcuo *GameConfigUpdateOne) SetNillableIsActive(b *bool) *GameConfigUpdateOne {
	if b != nil {
		gcuo.SetIsActive(*b)
	}
	return gcuo
}

// SetCanAutoBet sets the "can_auto_bet" field.
func (gcuo *GameConfigUpdateOne) SetCanAutoBet(b bool) *GameConfigUpdateOne {
	gcuo.mutation.SetCanAutoBet(b)
	return gcuo
}

// SetNillableCanAutoBet sets the "can_auto_bet" field if the given value is not nil.
func (gcuo *GameConfigUpdateOne) SetNillableCanAutoBet(b *bool) *GameConfigUpdateOne {
	if b != nil {
		gcuo.SetCanAutoBet(*b)
	}
	return gcuo
}

// SetCanAutoCashout sets the "can_auto_cashout" field.
func (gcuo *GameConfigUpdateOne) SetCanAutoCashout(b bool) *GameConfigUpdateOne {
	gcuo.mutation.SetCanAutoCashout(b)
	return gcuo
}

// SetNillableCanAutoCashout sets the "can_auto_cashout" field if the given value is not nil.
func (gcuo *GameConfigUpdateOne) SetNillableCanAutoCashout(b *bool) *GameConfigUpdateOne {
	if b != nil {
		gcuo.SetCanAutoCashout(*b)
	}
	return gcuo
}

// SetCanAnteBet sets the "can_ante_bet" field.
func (gcuo *GameConfigUpdateOne) SetCanAnteBet(b bool) *GameConfigUpdateOne {
	gcuo.mutation.SetCanAnteBet(b)
	return gcuo
}

// SetNillableCanAnteBet sets the "can_ante_bet" field if the given value is not nil.
func (gcuo *GameConfigUpdateOne) SetNillableCanAnteBet(b *bool) *GameConfigUpdateOne {
	if b != nil {
		gcuo.SetCanAnteBet(*b)
	}
	return gcuo
}

// SetCanHomeButton sets the "can_home_button" field.
func (gcuo *GameConfigUpdateOne) SetCanHomeButton(b bool) *GameConfigUpdateOne {
	gcuo.mutation.SetCanHomeButton(b)
	return gcuo
}

// SetNillableCanHomeButton sets the "can_home_button" field if the given value is not nil.
func (gcuo *GameConfigUpdateOne) SetNillableCanHomeButton(b *bool) *GameConfigUpdateOne {
	if b != nil {
		gcuo.SetCanHomeButton(*b)
	}
	return gcuo
}

// SetMathVersionsID sets the "math_versions" edge to the MathVersion entity by ID.
func (gcuo *GameConfigUpdateOne) SetMathVersionsID(id int) *GameConfigUpdateOne {
	gcuo.mutation.SetMathVersionsID(id)
	return gcuo
}

// SetNillableMathVersionsID sets the "math_versions" edge to the MathVersion entity by ID if the given value is not nil.
func (gcuo *GameConfigUpdateOne) SetNillableMathVersionsID(id *int) *GameConfigUpdateOne {
	if id != nil {
		gcuo = gcuo.SetMathVersionsID(*id)
	}
	return gcuo
}

// SetMathVersions sets the "math_versions" edge to the MathVersion entity.
func (gcuo *GameConfigUpdateOne) SetMathVersions(m *MathVersion) *GameConfigUpdateOne {
	return gcuo.SetMathVersionsID(m.ID)
}

// SetGameVersionsID sets the "game_versions" edge to the GameVersion entity by ID.
func (gcuo *GameConfigUpdateOne) SetGameVersionsID(id int) *GameConfigUpdateOne {
	gcuo.mutation.SetGameVersionsID(id)
	return gcuo
}

// SetNillableGameVersionsID sets the "game_versions" edge to the GameVersion entity by ID if the given value is not nil.
func (gcuo *GameConfigUpdateOne) SetNillableGameVersionsID(id *int) *GameConfigUpdateOne {
	if id != nil {
		gcuo = gcuo.SetGameVersionsID(*id)
	}
	return gcuo
}

// SetGameVersions sets the "game_versions" edge to the GameVersion entity.
func (gcuo *GameConfigUpdateOne) SetGameVersions(g *GameVersion) *GameConfigUpdateOne {
	return gcuo.SetGameVersionsID(g.ID)
}

// SetGamesID sets the "games" edge to the Game entity by ID.
func (gcuo *GameConfigUpdateOne) SetGamesID(id int) *GameConfigUpdateOne {
	gcuo.mutation.SetGamesID(id)
	return gcuo
}

// SetNillableGamesID sets the "games" edge to the Game entity by ID if the given value is not nil.
func (gcuo *GameConfigUpdateOne) SetNillableGamesID(id *int) *GameConfigUpdateOne {
	if id != nil {
		gcuo = gcuo.SetGamesID(*id)
	}
	return gcuo
}

// SetGames sets the "games" edge to the Game entity.
func (gcuo *GameConfigUpdateOne) SetGames(g *Game) *GameConfigUpdateOne {
	return gcuo.SetGamesID(g.ID)
}

// SetOperatorID sets the "Operator" edge to the Operator entity by ID.
func (gcuo *GameConfigUpdateOne) SetOperatorID(id int) *GameConfigUpdateOne {
	gcuo.mutation.SetOperatorID(id)
	return gcuo
}

// SetNillableOperatorID sets the "Operator" edge to the Operator entity by ID if the given value is not nil.
func (gcuo *GameConfigUpdateOne) SetNillableOperatorID(id *int) *GameConfigUpdateOne {
	if id != nil {
		gcuo = gcuo.SetOperatorID(*id)
	}
	return gcuo
}

// SetOperator sets the "Operator" edge to the Operator entity.
func (gcuo *GameConfigUpdateOne) SetOperator(o *Operator) *GameConfigUpdateOne {
	return gcuo.SetOperatorID(o.ID)
}

// SetCurrencyVersionsID sets the "currency_versions" edge to the CurrencyVersion entity by ID.
func (gcuo *GameConfigUpdateOne) SetCurrencyVersionsID(id int) *GameConfigUpdateOne {
	gcuo.mutation.SetCurrencyVersionsID(id)
	return gcuo
}

// SetNillableCurrencyVersionsID sets the "currency_versions" edge to the CurrencyVersion entity by ID if the given value is not nil.
func (gcuo *GameConfigUpdateOne) SetNillableCurrencyVersionsID(id *int) *GameConfigUpdateOne {
	if id != nil {
		gcuo = gcuo.SetCurrencyVersionsID(*id)
	}
	return gcuo
}

// SetCurrencyVersions sets the "currency_versions" edge to the CurrencyVersion entity.
func (gcuo *GameConfigUpdateOne) SetCurrencyVersions(c *CurrencyVersion) *GameConfigUpdateOne {
	return gcuo.SetCurrencyVersionsID(c.ID)
}

// Mutation returns the GameConfigMutation object of the builder.
func (gcuo *GameConfigUpdateOne) Mutation() *GameConfigMutation {
	return gcuo.mutation
}

// ClearMathVersions clears the "math_versions" edge to the MathVersion entity.
func (gcuo *GameConfigUpdateOne) ClearMathVersions() *GameConfigUpdateOne {
	gcuo.mutation.ClearMathVersions()
	return gcuo
}

// ClearGameVersions clears the "game_versions" edge to the GameVersion entity.
func (gcuo *GameConfigUpdateOne) ClearGameVersions() *GameConfigUpdateOne {
	gcuo.mutation.ClearGameVersions()
	return gcuo
}

// ClearGames clears the "games" edge to the Game entity.
func (gcuo *GameConfigUpdateOne) ClearGames() *GameConfigUpdateOne {
	gcuo.mutation.ClearGames()
	return gcuo
}

// ClearOperator clears the "Operator" edge to the Operator entity.
func (gcuo *GameConfigUpdateOne) ClearOperator() *GameConfigUpdateOne {
	gcuo.mutation.ClearOperator()
	return gcuo
}

// ClearCurrencyVersions clears the "currency_versions" edge to the CurrencyVersion entity.
func (gcuo *GameConfigUpdateOne) ClearCurrencyVersions() *GameConfigUpdateOne {
	gcuo.mutation.ClearCurrencyVersions()
	return gcuo
}

// Where appends a list predicates to the GameConfigUpdate builder.
func (gcuo *GameConfigUpdateOne) Where(ps ...predicate.GameConfig) *GameConfigUpdateOne {
	gcuo.mutation.Where(ps...)
	return gcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gcuo *GameConfigUpdateOne) Select(field string, fields ...string) *GameConfigUpdateOne {
	gcuo.fields = append([]string{field}, fields...)
	return gcuo
}

// Save executes the query and returns the updated GameConfig entity.
func (gcuo *GameConfigUpdateOne) Save(ctx context.Context) (*GameConfig, error) {
	return withHooks(ctx, gcuo.sqlSave, gcuo.mutation, gcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gcuo *GameConfigUpdateOne) SaveX(ctx context.Context) *GameConfig {
	node, err := gcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gcuo *GameConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := gcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcuo *GameConfigUpdateOne) ExecX(ctx context.Context) {
	if err := gcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gcuo *GameConfigUpdateOne) sqlSave(ctx context.Context) (_node *GameConfig, err error) {
	_spec := sqlgraph.NewUpdateSpec(gameconfig.Table, gameconfig.Columns, sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt))
	id, ok := gcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GameConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gameconfig.FieldID)
		for _, f := range fields {
			if !gameconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gameconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gcuo.mutation.CanDemo(); ok {
		_spec.SetField(gameconfig.FieldCanDemo, field.TypeBool, value)
	}
	if value, ok := gcuo.mutation.CanTournament(); ok {
		_spec.SetField(gameconfig.FieldCanTournament, field.TypeBool, value)
	}
	if value, ok := gcuo.mutation.CanFreeBets(); ok {
		_spec.SetField(gameconfig.FieldCanFreeBets, field.TypeBool, value)
	}
	if value, ok := gcuo.mutation.CanDropAndWins(); ok {
		_spec.SetField(gameconfig.FieldCanDropAndWins, field.TypeBool, value)
	}
	if value, ok := gcuo.mutation.CanBuyBonus(); ok {
		_spec.SetField(gameconfig.FieldCanBuyBonus, field.TypeBool, value)
	}
	if value, ok := gcuo.mutation.CanTurbo(); ok {
		_spec.SetField(gameconfig.FieldCanTurbo, field.TypeBool, value)
	}
	if value, ok := gcuo.mutation.IsActive(); ok {
		_spec.SetField(gameconfig.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := gcuo.mutation.CanAutoBet(); ok {
		_spec.SetField(gameconfig.FieldCanAutoBet, field.TypeBool, value)
	}
	if value, ok := gcuo.mutation.CanAutoCashout(); ok {
		_spec.SetField(gameconfig.FieldCanAutoCashout, field.TypeBool, value)
	}
	if value, ok := gcuo.mutation.CanAnteBet(); ok {
		_spec.SetField(gameconfig.FieldCanAnteBet, field.TypeBool, value)
	}
	if value, ok := gcuo.mutation.CanHomeButton(); ok {
		_spec.SetField(gameconfig.FieldCanHomeButton, field.TypeBool, value)
	}
	if gcuo.mutation.MathVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.MathVersionsTable,
			Columns: []string{gameconfig.MathVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mathversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcuo.mutation.MathVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.MathVersionsTable,
			Columns: []string{gameconfig.MathVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mathversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gcuo.mutation.GameVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.GameVersionsTable,
			Columns: []string{gameconfig.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcuo.mutation.GameVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.GameVersionsTable,
			Columns: []string{gameconfig.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gcuo.mutation.GamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.GamesTable,
			Columns: []string{gameconfig.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcuo.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.GamesTable,
			Columns: []string{gameconfig.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gcuo.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.OperatorTable,
			Columns: []string{gameconfig.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcuo.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.OperatorTable,
			Columns: []string{gameconfig.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gcuo.mutation.CurrencyVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.CurrencyVersionsTable,
			Columns: []string{gameconfig.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gcuo.mutation.CurrencyVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameconfig.CurrencyVersionsTable,
			Columns: []string{gameconfig.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GameConfig{config: gcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gcuo.mutation.done = true
	return _node, nil
}
