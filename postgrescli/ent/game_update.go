// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameconfig"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gamefeature"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gametype"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
	"github.com/Lavizord/checkers-server/postgrescli/ent/serie"
	"github.com/Lavizord/checkers-server/postgrescli/ent/session"
	"github.com/Lavizord/checkers-server/postgrescli/ent/studio"
)

// GameUpdate is the builder for updating Game entities.
type GameUpdate struct {
	config
	hooks    []Hook
	mutation *GameMutation
}

// Where appends a list predicates to the GameUpdate builder.
func (gu *GameUpdate) Where(ps ...predicate.Game) *GameUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetName sets the "name" field.
func (gu *GameUpdate) SetName(s string) *GameUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gu *GameUpdate) SetNillableName(s *string) *GameUpdate {
	if s != nil {
		gu.SetName(*s)
	}
	return gu
}

// SetExternalID sets the "external_id" field.
func (gu *GameUpdate) SetExternalID(s string) *GameUpdate {
	gu.mutation.SetExternalID(s)
	return gu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (gu *GameUpdate) SetNillableExternalID(s *string) *GameUpdate {
	if s != nil {
		gu.SetExternalID(*s)
	}
	return gu
}

// ClearExternalID clears the value of the "external_id" field.
func (gu *GameUpdate) ClearExternalID() *GameUpdate {
	gu.mutation.ClearExternalID()
	return gu
}

// SetTrademarkName sets the "trademark_name" field.
func (gu *GameUpdate) SetTrademarkName(s string) *GameUpdate {
	gu.mutation.SetTrademarkName(s)
	return gu
}

// SetNillableTrademarkName sets the "trademark_name" field if the given value is not nil.
func (gu *GameUpdate) SetNillableTrademarkName(s *string) *GameUpdate {
	if s != nil {
		gu.SetTrademarkName(*s)
	}
	return gu
}

// SetStudioID sets the "studio" edge to the Studio entity by ID.
func (gu *GameUpdate) SetStudioID(id int) *GameUpdate {
	gu.mutation.SetStudioID(id)
	return gu
}

// SetNillableStudioID sets the "studio" edge to the Studio entity by ID if the given value is not nil.
func (gu *GameUpdate) SetNillableStudioID(id *int) *GameUpdate {
	if id != nil {
		gu = gu.SetStudioID(*id)
	}
	return gu
}

// SetStudio sets the "studio" edge to the Studio entity.
func (gu *GameUpdate) SetStudio(s *Studio) *GameUpdate {
	return gu.SetStudioID(s.ID)
}

// SetGameTypeID sets the "game_type" edge to the GameType entity by ID.
func (gu *GameUpdate) SetGameTypeID(id int) *GameUpdate {
	gu.mutation.SetGameTypeID(id)
	return gu
}

// SetNillableGameTypeID sets the "game_type" edge to the GameType entity by ID if the given value is not nil.
func (gu *GameUpdate) SetNillableGameTypeID(id *int) *GameUpdate {
	if id != nil {
		gu = gu.SetGameTypeID(*id)
	}
	return gu
}

// SetGameType sets the "game_type" edge to the GameType entity.
func (gu *GameUpdate) SetGameType(g *GameType) *GameUpdate {
	return gu.SetGameTypeID(g.ID)
}

// SetSerieID sets the "serie" edge to the Serie entity by ID.
func (gu *GameUpdate) SetSerieID(id int) *GameUpdate {
	gu.mutation.SetSerieID(id)
	return gu
}

// SetNillableSerieID sets the "serie" edge to the Serie entity by ID if the given value is not nil.
func (gu *GameUpdate) SetNillableSerieID(id *int) *GameUpdate {
	if id != nil {
		gu = gu.SetSerieID(*id)
	}
	return gu
}

// SetSerie sets the "serie" edge to the Serie entity.
func (gu *GameUpdate) SetSerie(s *Serie) *GameUpdate {
	return gu.SetSerieID(s.ID)
}

// AddGameFeatureIDs adds the "game_features" edge to the GameFeature entity by IDs.
func (gu *GameUpdate) AddGameFeatureIDs(ids ...int) *GameUpdate {
	gu.mutation.AddGameFeatureIDs(ids...)
	return gu
}

// AddGameFeatures adds the "game_features" edges to the GameFeature entity.
func (gu *GameUpdate) AddGameFeatures(g ...*GameFeature) *GameUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.AddGameFeatureIDs(ids...)
}

// AddGameVersionIDs adds the "game_versions" edge to the GameVersion entity by IDs.
func (gu *GameUpdate) AddGameVersionIDs(ids ...int) *GameUpdate {
	gu.mutation.AddGameVersionIDs(ids...)
	return gu
}

// AddGameVersions adds the "game_versions" edges to the GameVersion entity.
func (gu *GameUpdate) AddGameVersions(g ...*GameVersion) *GameUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.AddGameVersionIDs(ids...)
}

// AddGameConfigIDs adds the "game_configs" edge to the GameConfig entity by IDs.
func (gu *GameUpdate) AddGameConfigIDs(ids ...int) *GameUpdate {
	gu.mutation.AddGameConfigIDs(ids...)
	return gu
}

// AddGameConfigs adds the "game_configs" edges to the GameConfig entity.
func (gu *GameUpdate) AddGameConfigs(g ...*GameConfig) *GameUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.AddGameConfigIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (gu *GameUpdate) AddSessionIDs(ids ...int) *GameUpdate {
	gu.mutation.AddSessionIDs(ids...)
	return gu
}

// AddSessions adds the "sessions" edges to the Session entity.
func (gu *GameUpdate) AddSessions(s ...*Session) *GameUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return gu.AddSessionIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (gu *GameUpdate) Mutation() *GameMutation {
	return gu.mutation
}

// ClearStudio clears the "studio" edge to the Studio entity.
func (gu *GameUpdate) ClearStudio() *GameUpdate {
	gu.mutation.ClearStudio()
	return gu
}

// ClearGameType clears the "game_type" edge to the GameType entity.
func (gu *GameUpdate) ClearGameType() *GameUpdate {
	gu.mutation.ClearGameType()
	return gu
}

// ClearSerie clears the "serie" edge to the Serie entity.
func (gu *GameUpdate) ClearSerie() *GameUpdate {
	gu.mutation.ClearSerie()
	return gu
}

// ClearGameFeatures clears all "game_features" edges to the GameFeature entity.
func (gu *GameUpdate) ClearGameFeatures() *GameUpdate {
	gu.mutation.ClearGameFeatures()
	return gu
}

// RemoveGameFeatureIDs removes the "game_features" edge to GameFeature entities by IDs.
func (gu *GameUpdate) RemoveGameFeatureIDs(ids ...int) *GameUpdate {
	gu.mutation.RemoveGameFeatureIDs(ids...)
	return gu
}

// RemoveGameFeatures removes "game_features" edges to GameFeature entities.
func (gu *GameUpdate) RemoveGameFeatures(g ...*GameFeature) *GameUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.RemoveGameFeatureIDs(ids...)
}

// ClearGameVersions clears all "game_versions" edges to the GameVersion entity.
func (gu *GameUpdate) ClearGameVersions() *GameUpdate {
	gu.mutation.ClearGameVersions()
	return gu
}

// RemoveGameVersionIDs removes the "game_versions" edge to GameVersion entities by IDs.
func (gu *GameUpdate) RemoveGameVersionIDs(ids ...int) *GameUpdate {
	gu.mutation.RemoveGameVersionIDs(ids...)
	return gu
}

// RemoveGameVersions removes "game_versions" edges to GameVersion entities.
func (gu *GameUpdate) RemoveGameVersions(g ...*GameVersion) *GameUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.RemoveGameVersionIDs(ids...)
}

// ClearGameConfigs clears all "game_configs" edges to the GameConfig entity.
func (gu *GameUpdate) ClearGameConfigs() *GameUpdate {
	gu.mutation.ClearGameConfigs()
	return gu
}

// RemoveGameConfigIDs removes the "game_configs" edge to GameConfig entities by IDs.
func (gu *GameUpdate) RemoveGameConfigIDs(ids ...int) *GameUpdate {
	gu.mutation.RemoveGameConfigIDs(ids...)
	return gu
}

// RemoveGameConfigs removes "game_configs" edges to GameConfig entities.
func (gu *GameUpdate) RemoveGameConfigs(g ...*GameConfig) *GameUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.RemoveGameConfigIDs(ids...)
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (gu *GameUpdate) ClearSessions() *GameUpdate {
	gu.mutation.ClearSessions()
	return gu
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (gu *GameUpdate) RemoveSessionIDs(ids ...int) *GameUpdate {
	gu.mutation.RemoveSessionIDs(ids...)
	return gu
}

// RemoveSessions removes "sessions" edges to Session entities.
func (gu *GameUpdate) RemoveSessions(s ...*Session) *GameUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return gu.RemoveSessionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GameUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GameUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GameUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GameUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gu *GameUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(game.Table, game.Columns, sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.SetField(game.FieldName, field.TypeString, value)
	}
	if value, ok := gu.mutation.ExternalID(); ok {
		_spec.SetField(game.FieldExternalID, field.TypeString, value)
	}
	if gu.mutation.ExternalIDCleared() {
		_spec.ClearField(game.FieldExternalID, field.TypeString)
	}
	if value, ok := gu.mutation.TrademarkName(); ok {
		_spec.SetField(game.FieldTrademarkName, field.TypeString, value)
	}
	if gu.mutation.StudioCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.StudioTable,
			Columns: []string{game.StudioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studio.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.StudioIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.StudioTable,
			Columns: []string{game.StudioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studio.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.GameTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.GameTypeTable,
			Columns: []string{game.GameTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gametype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.GameTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.GameTypeTable,
			Columns: []string{game.GameTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gametype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.SerieCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.SerieTable,
			Columns: []string{game.SerieColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serie.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.SerieIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.SerieTable,
			Columns: []string{game.SerieColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serie.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.GameFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameFeaturesTable,
			Columns: []string{game.GameFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamefeature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedGameFeaturesIDs(); len(nodes) > 0 && !gu.mutation.GameFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameFeaturesTable,
			Columns: []string{game.GameFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamefeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.GameFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameFeaturesTable,
			Columns: []string{game.GameFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamefeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.GameVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameVersionsTable,
			Columns: []string{game.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedGameVersionsIDs(); len(nodes) > 0 && !gu.mutation.GameVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameVersionsTable,
			Columns: []string{game.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.GameVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameVersionsTable,
			Columns: []string{game.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.GameConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameConfigsTable,
			Columns: []string{game.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedGameConfigsIDs(); len(nodes) > 0 && !gu.mutation.GameConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameConfigsTable,
			Columns: []string{game.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.GameConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameConfigsTable,
			Columns: []string{game.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.SessionsTable,
			Columns: []string{game.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !gu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.SessionsTable,
			Columns: []string{game.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.SessionsTable,
			Columns: []string{game.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{game.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GameUpdateOne is the builder for updating a single Game entity.
type GameUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameMutation
}

// SetName sets the "name" field.
func (guo *GameUpdateOne) SetName(s string) *GameUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillableName(s *string) *GameUpdateOne {
	if s != nil {
		guo.SetName(*s)
	}
	return guo
}

// SetExternalID sets the "external_id" field.
func (guo *GameUpdateOne) SetExternalID(s string) *GameUpdateOne {
	guo.mutation.SetExternalID(s)
	return guo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillableExternalID(s *string) *GameUpdateOne {
	if s != nil {
		guo.SetExternalID(*s)
	}
	return guo
}

// ClearExternalID clears the value of the "external_id" field.
func (guo *GameUpdateOne) ClearExternalID() *GameUpdateOne {
	guo.mutation.ClearExternalID()
	return guo
}

// SetTrademarkName sets the "trademark_name" field.
func (guo *GameUpdateOne) SetTrademarkName(s string) *GameUpdateOne {
	guo.mutation.SetTrademarkName(s)
	return guo
}

// SetNillableTrademarkName sets the "trademark_name" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillableTrademarkName(s *string) *GameUpdateOne {
	if s != nil {
		guo.SetTrademarkName(*s)
	}
	return guo
}

// SetStudioID sets the "studio" edge to the Studio entity by ID.
func (guo *GameUpdateOne) SetStudioID(id int) *GameUpdateOne {
	guo.mutation.SetStudioID(id)
	return guo
}

// SetNillableStudioID sets the "studio" edge to the Studio entity by ID if the given value is not nil.
func (guo *GameUpdateOne) SetNillableStudioID(id *int) *GameUpdateOne {
	if id != nil {
		guo = guo.SetStudioID(*id)
	}
	return guo
}

// SetStudio sets the "studio" edge to the Studio entity.
func (guo *GameUpdateOne) SetStudio(s *Studio) *GameUpdateOne {
	return guo.SetStudioID(s.ID)
}

// SetGameTypeID sets the "game_type" edge to the GameType entity by ID.
func (guo *GameUpdateOne) SetGameTypeID(id int) *GameUpdateOne {
	guo.mutation.SetGameTypeID(id)
	return guo
}

// SetNillableGameTypeID sets the "game_type" edge to the GameType entity by ID if the given value is not nil.
func (guo *GameUpdateOne) SetNillableGameTypeID(id *int) *GameUpdateOne {
	if id != nil {
		guo = guo.SetGameTypeID(*id)
	}
	return guo
}

// SetGameType sets the "game_type" edge to the GameType entity.
func (guo *GameUpdateOne) SetGameType(g *GameType) *GameUpdateOne {
	return guo.SetGameTypeID(g.ID)
}

// SetSerieID sets the "serie" edge to the Serie entity by ID.
func (guo *GameUpdateOne) SetSerieID(id int) *GameUpdateOne {
	guo.mutation.SetSerieID(id)
	return guo
}

// SetNillableSerieID sets the "serie" edge to the Serie entity by ID if the given value is not nil.
func (guo *GameUpdateOne) SetNillableSerieID(id *int) *GameUpdateOne {
	if id != nil {
		guo = guo.SetSerieID(*id)
	}
	return guo
}

// SetSerie sets the "serie" edge to the Serie entity.
func (guo *GameUpdateOne) SetSerie(s *Serie) *GameUpdateOne {
	return guo.SetSerieID(s.ID)
}

// AddGameFeatureIDs adds the "game_features" edge to the GameFeature entity by IDs.
func (guo *GameUpdateOne) AddGameFeatureIDs(ids ...int) *GameUpdateOne {
	guo.mutation.AddGameFeatureIDs(ids...)
	return guo
}

// AddGameFeatures adds the "game_features" edges to the GameFeature entity.
func (guo *GameUpdateOne) AddGameFeatures(g ...*GameFeature) *GameUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.AddGameFeatureIDs(ids...)
}

// AddGameVersionIDs adds the "game_versions" edge to the GameVersion entity by IDs.
func (guo *GameUpdateOne) AddGameVersionIDs(ids ...int) *GameUpdateOne {
	guo.mutation.AddGameVersionIDs(ids...)
	return guo
}

// AddGameVersions adds the "game_versions" edges to the GameVersion entity.
func (guo *GameUpdateOne) AddGameVersions(g ...*GameVersion) *GameUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.AddGameVersionIDs(ids...)
}

// AddGameConfigIDs adds the "game_configs" edge to the GameConfig entity by IDs.
func (guo *GameUpdateOne) AddGameConfigIDs(ids ...int) *GameUpdateOne {
	guo.mutation.AddGameConfigIDs(ids...)
	return guo
}

// AddGameConfigs adds the "game_configs" edges to the GameConfig entity.
func (guo *GameUpdateOne) AddGameConfigs(g ...*GameConfig) *GameUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.AddGameConfigIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (guo *GameUpdateOne) AddSessionIDs(ids ...int) *GameUpdateOne {
	guo.mutation.AddSessionIDs(ids...)
	return guo
}

// AddSessions adds the "sessions" edges to the Session entity.
func (guo *GameUpdateOne) AddSessions(s ...*Session) *GameUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return guo.AddSessionIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (guo *GameUpdateOne) Mutation() *GameMutation {
	return guo.mutation
}

// ClearStudio clears the "studio" edge to the Studio entity.
func (guo *GameUpdateOne) ClearStudio() *GameUpdateOne {
	guo.mutation.ClearStudio()
	return guo
}

// ClearGameType clears the "game_type" edge to the GameType entity.
func (guo *GameUpdateOne) ClearGameType() *GameUpdateOne {
	guo.mutation.ClearGameType()
	return guo
}

// ClearSerie clears the "serie" edge to the Serie entity.
func (guo *GameUpdateOne) ClearSerie() *GameUpdateOne {
	guo.mutation.ClearSerie()
	return guo
}

// ClearGameFeatures clears all "game_features" edges to the GameFeature entity.
func (guo *GameUpdateOne) ClearGameFeatures() *GameUpdateOne {
	guo.mutation.ClearGameFeatures()
	return guo
}

// RemoveGameFeatureIDs removes the "game_features" edge to GameFeature entities by IDs.
func (guo *GameUpdateOne) RemoveGameFeatureIDs(ids ...int) *GameUpdateOne {
	guo.mutation.RemoveGameFeatureIDs(ids...)
	return guo
}

// RemoveGameFeatures removes "game_features" edges to GameFeature entities.
func (guo *GameUpdateOne) RemoveGameFeatures(g ...*GameFeature) *GameUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.RemoveGameFeatureIDs(ids...)
}

// ClearGameVersions clears all "game_versions" edges to the GameVersion entity.
func (guo *GameUpdateOne) ClearGameVersions() *GameUpdateOne {
	guo.mutation.ClearGameVersions()
	return guo
}

// RemoveGameVersionIDs removes the "game_versions" edge to GameVersion entities by IDs.
func (guo *GameUpdateOne) RemoveGameVersionIDs(ids ...int) *GameUpdateOne {
	guo.mutation.RemoveGameVersionIDs(ids...)
	return guo
}

// RemoveGameVersions removes "game_versions" edges to GameVersion entities.
func (guo *GameUpdateOne) RemoveGameVersions(g ...*GameVersion) *GameUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.RemoveGameVersionIDs(ids...)
}

// ClearGameConfigs clears all "game_configs" edges to the GameConfig entity.
func (guo *GameUpdateOne) ClearGameConfigs() *GameUpdateOne {
	guo.mutation.ClearGameConfigs()
	return guo
}

// RemoveGameConfigIDs removes the "game_configs" edge to GameConfig entities by IDs.
func (guo *GameUpdateOne) RemoveGameConfigIDs(ids ...int) *GameUpdateOne {
	guo.mutation.RemoveGameConfigIDs(ids...)
	return guo
}

// RemoveGameConfigs removes "game_configs" edges to GameConfig entities.
func (guo *GameUpdateOne) RemoveGameConfigs(g ...*GameConfig) *GameUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.RemoveGameConfigIDs(ids...)
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (guo *GameUpdateOne) ClearSessions() *GameUpdateOne {
	guo.mutation.ClearSessions()
	return guo
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (guo *GameUpdateOne) RemoveSessionIDs(ids ...int) *GameUpdateOne {
	guo.mutation.RemoveSessionIDs(ids...)
	return guo
}

// RemoveSessions removes "sessions" edges to Session entities.
func (guo *GameUpdateOne) RemoveSessions(s ...*Session) *GameUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return guo.RemoveSessionIDs(ids...)
}

// Where appends a list predicates to the GameUpdate builder.
func (guo *GameUpdateOne) Where(ps ...predicate.Game) *GameUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GameUpdateOne) Select(field string, fields ...string) *GameUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Game entity.
func (guo *GameUpdateOne) Save(ctx context.Context) (*Game, error) {
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GameUpdateOne) SaveX(ctx context.Context) *Game {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GameUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GameUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (guo *GameUpdateOne) sqlSave(ctx context.Context) (_node *Game, err error) {
	_spec := sqlgraph.NewUpdateSpec(game.Table, game.Columns, sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Game.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, game.FieldID)
		for _, f := range fields {
			if !game.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != game.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.SetField(game.FieldName, field.TypeString, value)
	}
	if value, ok := guo.mutation.ExternalID(); ok {
		_spec.SetField(game.FieldExternalID, field.TypeString, value)
	}
	if guo.mutation.ExternalIDCleared() {
		_spec.ClearField(game.FieldExternalID, field.TypeString)
	}
	if value, ok := guo.mutation.TrademarkName(); ok {
		_spec.SetField(game.FieldTrademarkName, field.TypeString, value)
	}
	if guo.mutation.StudioCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.StudioTable,
			Columns: []string{game.StudioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studio.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.StudioIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.StudioTable,
			Columns: []string{game.StudioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studio.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.GameTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.GameTypeTable,
			Columns: []string{game.GameTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gametype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.GameTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.GameTypeTable,
			Columns: []string{game.GameTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gametype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.SerieCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.SerieTable,
			Columns: []string{game.SerieColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serie.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.SerieIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.SerieTable,
			Columns: []string{game.SerieColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serie.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.GameFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameFeaturesTable,
			Columns: []string{game.GameFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamefeature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedGameFeaturesIDs(); len(nodes) > 0 && !guo.mutation.GameFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameFeaturesTable,
			Columns: []string{game.GameFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamefeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.GameFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameFeaturesTable,
			Columns: []string{game.GameFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamefeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.GameVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameVersionsTable,
			Columns: []string{game.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedGameVersionsIDs(); len(nodes) > 0 && !guo.mutation.GameVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameVersionsTable,
			Columns: []string{game.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.GameVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameVersionsTable,
			Columns: []string{game.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.GameConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameConfigsTable,
			Columns: []string{game.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedGameConfigsIDs(); len(nodes) > 0 && !guo.mutation.GameConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameConfigsTable,
			Columns: []string{game.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.GameConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.GameConfigsTable,
			Columns: []string{game.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.SessionsTable,
			Columns: []string{game.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !guo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.SessionsTable,
			Columns: []string{game.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.SessionsTable,
			Columns: []string{game.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Game{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{game.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
