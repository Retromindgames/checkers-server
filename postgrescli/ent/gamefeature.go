// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Lavizord/checkers-server/postgrescli/ent/feature"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gamefeature"
)

// GameFeature is the model entity for the GameFeature schema.
type GameFeature struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameFeatureQuery when eager-loading is set.
	Edges                 GameFeatureEdges `json:"edges"`
	feature_game_features *int
	game_game_features    *int
	selectValues          sql.SelectValues
}

// GameFeatureEdges holds the relations/edges for other nodes in the graph.
type GameFeatureEdges struct {
	// Features holds the value of the features edge.
	Features *Feature `json:"features,omitempty"`
	// Games holds the value of the games edge.
	Games *Game `json:"games,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FeaturesOrErr returns the Features value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameFeatureEdges) FeaturesOrErr() (*Feature, error) {
	if e.Features != nil {
		return e.Features, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: feature.Label}
	}
	return nil, &NotLoadedError{edge: "features"}
}

// GamesOrErr returns the Games value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameFeatureEdges) GamesOrErr() (*Game, error) {
	if e.Games != nil {
		return e.Games, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: game.Label}
	}
	return nil, &NotLoadedError{edge: "games"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GameFeature) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gamefeature.FieldID:
			values[i] = new(sql.NullInt64)
		case gamefeature.ForeignKeys[0]: // feature_game_features
			values[i] = new(sql.NullInt64)
		case gamefeature.ForeignKeys[1]: // game_game_features
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GameFeature fields.
func (gf *GameFeature) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gamefeature.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gf.ID = int(value.Int64)
		case gamefeature.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field feature_game_features", value)
			} else if value.Valid {
				gf.feature_game_features = new(int)
				*gf.feature_game_features = int(value.Int64)
			}
		case gamefeature.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field game_game_features", value)
			} else if value.Valid {
				gf.game_game_features = new(int)
				*gf.game_game_features = int(value.Int64)
			}
		default:
			gf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GameFeature.
// This includes values selected through modifiers, order, etc.
func (gf *GameFeature) Value(name string) (ent.Value, error) {
	return gf.selectValues.Get(name)
}

// QueryFeatures queries the "features" edge of the GameFeature entity.
func (gf *GameFeature) QueryFeatures() *FeatureQuery {
	return NewGameFeatureClient(gf.config).QueryFeatures(gf)
}

// QueryGames queries the "games" edge of the GameFeature entity.
func (gf *GameFeature) QueryGames() *GameQuery {
	return NewGameFeatureClient(gf.config).QueryGames(gf)
}

// Update returns a builder for updating this GameFeature.
// Note that you need to call GameFeature.Unwrap() before calling this method if this GameFeature
// was returned from a transaction, and the transaction was committed or rolled back.
func (gf *GameFeature) Update() *GameFeatureUpdateOne {
	return NewGameFeatureClient(gf.config).UpdateOne(gf)
}

// Unwrap unwraps the GameFeature entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gf *GameFeature) Unwrap() *GameFeature {
	_tx, ok := gf.config.driver.(*txDriver)
	if !ok {
		panic("ent: GameFeature is not a transactional entity")
	}
	gf.config.driver = _tx.drv
	return gf
}

// String implements the fmt.Stringer.
func (gf *GameFeature) String() string {
	var builder strings.Builder
	builder.WriteString("GameFeature(")
	builder.WriteString(fmt.Sprintf("id=%v", gf.ID))
	builder.WriteByte(')')
	return builder.String()
}

// GameFeatures is a parsable slice of GameFeature.
type GameFeatures []*GameFeature
