// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/round"
	"github.com/Lavizord/checkers-server/postgrescli/ent/transaction"
)

// TransactionCreate is the builder for creating a Transaction entity.
type TransactionCreate struct {
	config
	mutation *TransactionMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (tc *TransactionCreate) SetType(s string) *TransactionCreate {
	tc.mutation.SetType(s)
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TransactionCreate) SetDeletedAt(t time.Time) *TransactionCreate {
	tc.mutation.SetDeletedAt(t)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableDeletedAt(t *time.Time) *TransactionCreate {
	if t != nil {
		tc.SetDeletedAt(*t)
	}
	return tc
}

// SetAmount sets the "amount" field.
func (tc *TransactionCreate) SetAmount(i int) *TransactionCreate {
	tc.mutation.SetAmount(i)
	return tc
}

// SetCurrency sets the "currency" field.
func (tc *TransactionCreate) SetCurrency(s string) *TransactionCreate {
	tc.mutation.SetCurrency(s)
	return tc
}

// SetPlatform sets the "platform" field.
func (tc *TransactionCreate) SetPlatform(s string) *TransactionCreate {
	tc.mutation.SetPlatform(s)
	return tc
}

// SetOperator sets the "operator" field.
func (tc *TransactionCreate) SetOperator(s string) *TransactionCreate {
	tc.mutation.SetOperator(s)
	return tc
}

// SetClient sets the "client" field.
func (tc *TransactionCreate) SetClient(s string) *TransactionCreate {
	tc.mutation.SetClient(s)
	return tc
}

// SetGame sets the "game" field.
func (tc *TransactionCreate) SetGame(s string) *TransactionCreate {
	tc.mutation.SetGame(s)
	return tc
}

// SetStatus sets the "status" field.
func (tc *TransactionCreate) SetStatus(i int) *TransactionCreate {
	tc.mutation.SetStatus(i)
	return tc
}

// SetDescription sets the "description" field.
func (tc *TransactionCreate) SetDescription(s string) *TransactionCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetTimestamp sets the "timestamp" field.
func (tc *TransactionCreate) SetTimestamp(t time.Time) *TransactionCreate {
	tc.mutation.SetTimestamp(t)
	return tc
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableTimestamp(t *time.Time) *TransactionCreate {
	if t != nil {
		tc.SetTimestamp(*t)
	}
	return tc
}

// SetMathProfile sets the "math_profile" field.
func (tc *TransactionCreate) SetMathProfile(s string) *TransactionCreate {
	tc.mutation.SetMathProfile(s)
	return tc
}

// SetNillableMathProfile sets the "math_profile" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableMathProfile(s *string) *TransactionCreate {
	if s != nil {
		tc.SetMathProfile(*s)
	}
	return tc
}

// SetDenominator sets the "denominator" field.
func (tc *TransactionCreate) SetDenominator(i int) *TransactionCreate {
	tc.mutation.SetDenominator(i)
	return tc
}

// SetFinalBalance sets the "final_balance" field.
func (tc *TransactionCreate) SetFinalBalance(i int) *TransactionCreate {
	tc.mutation.SetFinalBalance(i)
	return tc
}

// SetSeqID sets the "seq_id" field.
func (tc *TransactionCreate) SetSeqID(i int) *TransactionCreate {
	tc.mutation.SetSeqID(i)
	return tc
}

// SetNillableSeqID sets the "seq_id" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableSeqID(i *int) *TransactionCreate {
	if i != nil {
		tc.SetSeqID(*i)
	}
	return tc
}

// SetMultiplier sets the "multiplier" field.
func (tc *TransactionCreate) SetMultiplier(i int) *TransactionCreate {
	tc.mutation.SetMultiplier(i)
	return tc
}

// SetNillableMultiplier sets the "multiplier" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableMultiplier(i *int) *TransactionCreate {
	if i != nil {
		tc.SetMultiplier(*i)
	}
	return tc
}

// SetGameService sets the "game_service" field.
func (tc *TransactionCreate) SetGameService(m map[string]interface{}) *TransactionCreate {
	tc.mutation.SetGameService(m)
	return tc
}

// SetToken sets the "token" field.
func (tc *TransactionCreate) SetToken(s string) *TransactionCreate {
	tc.mutation.SetToken(s)
	return tc
}

// SetOriginalAmount sets the "original_amount" field.
func (tc *TransactionCreate) SetOriginalAmount(i int) *TransactionCreate {
	tc.mutation.SetOriginalAmount(i)
	return tc
}

// SetRoundsID sets the "rounds" edge to the Round entity by ID.
func (tc *TransactionCreate) SetRoundsID(id int) *TransactionCreate {
	tc.mutation.SetRoundsID(id)
	return tc
}

// SetNillableRoundsID sets the "rounds" edge to the Round entity by ID if the given value is not nil.
func (tc *TransactionCreate) SetNillableRoundsID(id *int) *TransactionCreate {
	if id != nil {
		tc = tc.SetRoundsID(*id)
	}
	return tc
}

// SetRounds sets the "rounds" edge to the Round entity.
func (tc *TransactionCreate) SetRounds(r *Round) *TransactionCreate {
	return tc.SetRoundsID(r.ID)
}

// Mutation returns the TransactionMutation object of the builder.
func (tc *TransactionCreate) Mutation() *TransactionMutation {
	return tc.mutation
}

// Save creates the Transaction in the database.
func (tc *TransactionCreate) Save(ctx context.Context) (*Transaction, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransactionCreate) SaveX(ctx context.Context) *Transaction {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TransactionCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TransactionCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TransactionCreate) defaults() {
	if _, ok := tc.mutation.Timestamp(); !ok {
		v := transaction.DefaultTimestamp()
		tc.mutation.SetTimestamp(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransactionCreate) check() error {
	if _, ok := tc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Transaction.type"`)}
	}
	if _, ok := tc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Transaction.amount"`)}
	}
	if _, ok := tc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "Transaction.currency"`)}
	}
	if _, ok := tc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "Transaction.platform"`)}
	}
	if _, ok := tc.mutation.Operator(); !ok {
		return &ValidationError{Name: "operator", err: errors.New(`ent: missing required field "Transaction.operator"`)}
	}
	if _, ok := tc.mutation.GetClient(); !ok {
		return &ValidationError{Name: "client", err: errors.New(`ent: missing required field "Transaction.client"`)}
	}
	if _, ok := tc.mutation.Game(); !ok {
		return &ValidationError{Name: "game", err: errors.New(`ent: missing required field "Transaction.game"`)}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Transaction.status"`)}
	}
	if _, ok := tc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Transaction.description"`)}
	}
	if _, ok := tc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "Transaction.timestamp"`)}
	}
	if _, ok := tc.mutation.Denominator(); !ok {
		return &ValidationError{Name: "denominator", err: errors.New(`ent: missing required field "Transaction.denominator"`)}
	}
	if _, ok := tc.mutation.FinalBalance(); !ok {
		return &ValidationError{Name: "final_balance", err: errors.New(`ent: missing required field "Transaction.final_balance"`)}
	}
	if _, ok := tc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "Transaction.token"`)}
	}
	if _, ok := tc.mutation.OriginalAmount(); !ok {
		return &ValidationError{Name: "original_amount", err: errors.New(`ent: missing required field "Transaction.original_amount"`)}
	}
	return nil
}

func (tc *TransactionCreate) sqlSave(ctx context.Context) (*Transaction, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TransactionCreate) createSpec() (*Transaction, *sqlgraph.CreateSpec) {
	var (
		_node = &Transaction{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(transaction.Table, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(transaction.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.SetField(transaction.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := tc.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeInt, value)
		_node.Amount = value
	}
	if value, ok := tc.mutation.Currency(); ok {
		_spec.SetField(transaction.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := tc.mutation.Platform(); ok {
		_spec.SetField(transaction.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := tc.mutation.Operator(); ok {
		_spec.SetField(transaction.FieldOperator, field.TypeString, value)
		_node.Operator = value
	}
	if value, ok := tc.mutation.GetClient(); ok {
		_spec.SetField(transaction.FieldClient, field.TypeString, value)
		_node.Client = value
	}
	if value, ok := tc.mutation.Game(); ok {
		_spec.SetField(transaction.FieldGame, field.TypeString, value)
		_node.Game = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(transaction.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(transaction.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.Timestamp(); ok {
		_spec.SetField(transaction.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := tc.mutation.MathProfile(); ok {
		_spec.SetField(transaction.FieldMathProfile, field.TypeString, value)
		_node.MathProfile = value
	}
	if value, ok := tc.mutation.Denominator(); ok {
		_spec.SetField(transaction.FieldDenominator, field.TypeInt, value)
		_node.Denominator = value
	}
	if value, ok := tc.mutation.FinalBalance(); ok {
		_spec.SetField(transaction.FieldFinalBalance, field.TypeInt, value)
		_node.FinalBalance = value
	}
	if value, ok := tc.mutation.SeqID(); ok {
		_spec.SetField(transaction.FieldSeqID, field.TypeInt, value)
		_node.SeqID = value
	}
	if value, ok := tc.mutation.Multiplier(); ok {
		_spec.SetField(transaction.FieldMultiplier, field.TypeInt, value)
		_node.Multiplier = value
	}
	if value, ok := tc.mutation.GameService(); ok {
		_spec.SetField(transaction.FieldGameService, field.TypeJSON, value)
		_node.GameService = value
	}
	if value, ok := tc.mutation.Token(); ok {
		_spec.SetField(transaction.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := tc.mutation.OriginalAmount(); ok {
		_spec.SetField(transaction.FieldOriginalAmount, field.TypeInt, value)
		_node.OriginalAmount = value
	}
	if nodes := tc.mutation.RoundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.RoundsTable,
			Columns: []string{transaction.RoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.round_transactions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TransactionCreateBulk is the builder for creating many Transaction entities in bulk.
type TransactionCreateBulk struct {
	config
	err      error
	builders []*TransactionCreate
}

// Save creates the Transaction entities in the database.
func (tcb *TransactionCreateBulk) Save(ctx context.Context) ([]*Transaction, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transaction, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransactionCreateBulk) SaveX(ctx context.Context) []*Transaction {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TransactionCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TransactionCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
