// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/currencyversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gametype"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameversion"
)

// GameTypeCreate is the builder for creating a GameType entity.
type GameTypeCreate struct {
	config
	mutation *GameTypeMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (gtc *GameTypeCreate) SetType(s string) *GameTypeCreate {
	gtc.mutation.SetType(s)
	return gtc
}

// SetExternalTypeID sets the "external_type_id" field.
func (gtc *GameTypeCreate) SetExternalTypeID(s string) *GameTypeCreate {
	gtc.mutation.SetExternalTypeID(s)
	return gtc
}

// AddGameIDs adds the "games" edge to the Game entity by IDs.
func (gtc *GameTypeCreate) AddGameIDs(ids ...int) *GameTypeCreate {
	gtc.mutation.AddGameIDs(ids...)
	return gtc
}

// AddGames adds the "games" edges to the Game entity.
func (gtc *GameTypeCreate) AddGames(g ...*Game) *GameTypeCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gtc.AddGameIDs(ids...)
}

// AddGameVersionIDs adds the "game_versions" edge to the GameVersion entity by IDs.
func (gtc *GameTypeCreate) AddGameVersionIDs(ids ...int) *GameTypeCreate {
	gtc.mutation.AddGameVersionIDs(ids...)
	return gtc
}

// AddGameVersions adds the "game_versions" edges to the GameVersion entity.
func (gtc *GameTypeCreate) AddGameVersions(g ...*GameVersion) *GameTypeCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gtc.AddGameVersionIDs(ids...)
}

// AddCurrencyVersionIDs adds the "currency_versions" edge to the CurrencyVersion entity by IDs.
func (gtc *GameTypeCreate) AddCurrencyVersionIDs(ids ...int) *GameTypeCreate {
	gtc.mutation.AddCurrencyVersionIDs(ids...)
	return gtc
}

// AddCurrencyVersions adds the "currency_versions" edges to the CurrencyVersion entity.
func (gtc *GameTypeCreate) AddCurrencyVersions(c ...*CurrencyVersion) *GameTypeCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gtc.AddCurrencyVersionIDs(ids...)
}

// Mutation returns the GameTypeMutation object of the builder.
func (gtc *GameTypeCreate) Mutation() *GameTypeMutation {
	return gtc.mutation
}

// Save creates the GameType in the database.
func (gtc *GameTypeCreate) Save(ctx context.Context) (*GameType, error) {
	return withHooks(ctx, gtc.sqlSave, gtc.mutation, gtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gtc *GameTypeCreate) SaveX(ctx context.Context) *GameType {
	v, err := gtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gtc *GameTypeCreate) Exec(ctx context.Context) error {
	_, err := gtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gtc *GameTypeCreate) ExecX(ctx context.Context) {
	if err := gtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gtc *GameTypeCreate) check() error {
	if _, ok := gtc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "GameType.type"`)}
	}
	if _, ok := gtc.mutation.ExternalTypeID(); !ok {
		return &ValidationError{Name: "external_type_id", err: errors.New(`ent: missing required field "GameType.external_type_id"`)}
	}
	return nil
}

func (gtc *GameTypeCreate) sqlSave(ctx context.Context) (*GameType, error) {
	if err := gtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gtc.mutation.id = &_node.ID
	gtc.mutation.done = true
	return _node, nil
}

func (gtc *GameTypeCreate) createSpec() (*GameType, *sqlgraph.CreateSpec) {
	var (
		_node = &GameType{config: gtc.config}
		_spec = sqlgraph.NewCreateSpec(gametype.Table, sqlgraph.NewFieldSpec(gametype.FieldID, field.TypeInt))
	)
	if value, ok := gtc.mutation.GetType(); ok {
		_spec.SetField(gametype.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := gtc.mutation.ExternalTypeID(); ok {
		_spec.SetField(gametype.FieldExternalTypeID, field.TypeString, value)
		_node.ExternalTypeID = value
	}
	if nodes := gtc.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.GamesTable,
			Columns: []string{gametype.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gtc.mutation.GameVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.GameVersionsTable,
			Columns: []string{gametype.GameVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gtc.mutation.CurrencyVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gametype.CurrencyVersionsTable,
			Columns: []string{gametype.CurrencyVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GameTypeCreateBulk is the builder for creating many GameType entities in bulk.
type GameTypeCreateBulk struct {
	config
	err      error
	builders []*GameTypeCreate
}

// Save creates the GameType entities in the database.
func (gtcb *GameTypeCreateBulk) Save(ctx context.Context) ([]*GameType, error) {
	if gtcb.err != nil {
		return nil, gtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gtcb.builders))
	nodes := make([]*GameType, len(gtcb.builders))
	mutators := make([]Mutator, len(gtcb.builders))
	for i := range gtcb.builders {
		func(i int, root context.Context) {
			builder := gtcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gtcb *GameTypeCreateBulk) SaveX(ctx context.Context) []*GameType {
	v, err := gtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gtcb *GameTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := gtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gtcb *GameTypeCreateBulk) ExecX(ctx context.Context) {
	if err := gtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
