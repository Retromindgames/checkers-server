// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/game"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameconfig"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gametype"
	"github.com/Lavizord/checkers-server/postgrescli/ent/gameversion"
	"github.com/Lavizord/checkers-server/postgrescli/ent/session"
)

// GameVersionCreate is the builder for creating a GameVersion entity.
type GameVersionCreate struct {
	config
	mutation *GameVersionMutation
	hooks    []Hook
}

// SetVersion sets the "version" field.
func (gvc *GameVersionCreate) SetVersion(s string) *GameVersionCreate {
	gvc.mutation.SetVersion(s)
	return gvc
}

// SetCanDemo sets the "can_demo" field.
func (gvc *GameVersionCreate) SetCanDemo(b bool) *GameVersionCreate {
	gvc.mutation.SetCanDemo(b)
	return gvc
}

// SetCanTournament sets the "can_tournament" field.
func (gvc *GameVersionCreate) SetCanTournament(b bool) *GameVersionCreate {
	gvc.mutation.SetCanTournament(b)
	return gvc
}

// SetCanFreeBets sets the "can_free_bets" field.
func (gvc *GameVersionCreate) SetCanFreeBets(b bool) *GameVersionCreate {
	gvc.mutation.SetCanFreeBets(b)
	return gvc
}

// SetCanDropAndWins sets the "can_drop_and_wins" field.
func (gvc *GameVersionCreate) SetCanDropAndWins(b bool) *GameVersionCreate {
	gvc.mutation.SetCanDropAndWins(b)
	return gvc
}

// SetCanTurbo sets the "can_turbo" field.
func (gvc *GameVersionCreate) SetCanTurbo(b bool) *GameVersionCreate {
	gvc.mutation.SetCanTurbo(b)
	return gvc
}

// SetURLMediaPack sets the "url_media_pack" field.
func (gvc *GameVersionCreate) SetURLMediaPack(s string) *GameVersionCreate {
	gvc.mutation.SetURLMediaPack(s)
	return gvc
}

// SetURLReleaseNote sets the "url_release_note" field.
func (gvc *GameVersionCreate) SetURLReleaseNote(s string) *GameVersionCreate {
	gvc.mutation.SetURLReleaseNote(s)
	return gvc
}

// SetDeprecated sets the "deprecated" field.
func (gvc *GameVersionCreate) SetDeprecated(b bool) *GameVersionCreate {
	gvc.mutation.SetDeprecated(b)
	return gvc
}

// SetAvailableMathVersions sets the "available_math_versions" field.
func (gvc *GameVersionCreate) SetAvailableMathVersions(i []int) *GameVersionCreate {
	gvc.mutation.SetAvailableMathVersions(i)
	return gvc
}

// SetCanAutoBet sets the "can_auto_bet" field.
func (gvc *GameVersionCreate) SetCanAutoBet(b bool) *GameVersionCreate {
	gvc.mutation.SetCanAutoBet(b)
	return gvc
}

// SetURLGameManual sets the "url_game_manual" field.
func (gvc *GameVersionCreate) SetURLGameManual(s string) *GameVersionCreate {
	gvc.mutation.SetURLGameManual(s)
	return gvc
}

// SetCanAutoCashout sets the "can_auto_cashout" field.
func (gvc *GameVersionCreate) SetCanAutoCashout(b bool) *GameVersionCreate {
	gvc.mutation.SetCanAutoCashout(b)
	return gvc
}

// SetCanBuyBonus sets the "can_buy_bonus" field.
func (gvc *GameVersionCreate) SetCanBuyBonus(b bool) *GameVersionCreate {
	gvc.mutation.SetCanBuyBonus(b)
	return gvc
}

// SetCanAnteBet sets the "can_ante_bet" field.
func (gvc *GameVersionCreate) SetCanAnteBet(b bool) *GameVersionCreate {
	gvc.mutation.SetCanAnteBet(b)
	return gvc
}

// SetGamesID sets the "games" edge to the Game entity by ID.
func (gvc *GameVersionCreate) SetGamesID(id int) *GameVersionCreate {
	gvc.mutation.SetGamesID(id)
	return gvc
}

// SetNillableGamesID sets the "games" edge to the Game entity by ID if the given value is not nil.
func (gvc *GameVersionCreate) SetNillableGamesID(id *int) *GameVersionCreate {
	if id != nil {
		gvc = gvc.SetGamesID(*id)
	}
	return gvc
}

// SetGames sets the "games" edge to the Game entity.
func (gvc *GameVersionCreate) SetGames(g *Game) *GameVersionCreate {
	return gvc.SetGamesID(g.ID)
}

// SetGameTypeID sets the "game_type" edge to the GameType entity by ID.
func (gvc *GameVersionCreate) SetGameTypeID(id int) *GameVersionCreate {
	gvc.mutation.SetGameTypeID(id)
	return gvc
}

// SetNillableGameTypeID sets the "game_type" edge to the GameType entity by ID if the given value is not nil.
func (gvc *GameVersionCreate) SetNillableGameTypeID(id *int) *GameVersionCreate {
	if id != nil {
		gvc = gvc.SetGameTypeID(*id)
	}
	return gvc
}

// SetGameType sets the "game_type" edge to the GameType entity.
func (gvc *GameVersionCreate) SetGameType(g *GameType) *GameVersionCreate {
	return gvc.SetGameTypeID(g.ID)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (gvc *GameVersionCreate) AddSessionIDs(ids ...int) *GameVersionCreate {
	gvc.mutation.AddSessionIDs(ids...)
	return gvc
}

// AddSessions adds the "sessions" edges to the Session entity.
func (gvc *GameVersionCreate) AddSessions(s ...*Session) *GameVersionCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return gvc.AddSessionIDs(ids...)
}

// AddGameConfigIDs adds the "game_configs" edge to the GameConfig entity by IDs.
func (gvc *GameVersionCreate) AddGameConfigIDs(ids ...int) *GameVersionCreate {
	gvc.mutation.AddGameConfigIDs(ids...)
	return gvc
}

// AddGameConfigs adds the "game_configs" edges to the GameConfig entity.
func (gvc *GameVersionCreate) AddGameConfigs(g ...*GameConfig) *GameVersionCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gvc.AddGameConfigIDs(ids...)
}

// Mutation returns the GameVersionMutation object of the builder.
func (gvc *GameVersionCreate) Mutation() *GameVersionMutation {
	return gvc.mutation
}

// Save creates the GameVersion in the database.
func (gvc *GameVersionCreate) Save(ctx context.Context) (*GameVersion, error) {
	return withHooks(ctx, gvc.sqlSave, gvc.mutation, gvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gvc *GameVersionCreate) SaveX(ctx context.Context) *GameVersion {
	v, err := gvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gvc *GameVersionCreate) Exec(ctx context.Context) error {
	_, err := gvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gvc *GameVersionCreate) ExecX(ctx context.Context) {
	if err := gvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gvc *GameVersionCreate) check() error {
	if _, ok := gvc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "GameVersion.version"`)}
	}
	if _, ok := gvc.mutation.CanDemo(); !ok {
		return &ValidationError{Name: "can_demo", err: errors.New(`ent: missing required field "GameVersion.can_demo"`)}
	}
	if _, ok := gvc.mutation.CanTournament(); !ok {
		return &ValidationError{Name: "can_tournament", err: errors.New(`ent: missing required field "GameVersion.can_tournament"`)}
	}
	if _, ok := gvc.mutation.CanFreeBets(); !ok {
		return &ValidationError{Name: "can_free_bets", err: errors.New(`ent: missing required field "GameVersion.can_free_bets"`)}
	}
	if _, ok := gvc.mutation.CanDropAndWins(); !ok {
		return &ValidationError{Name: "can_drop_and_wins", err: errors.New(`ent: missing required field "GameVersion.can_drop_and_wins"`)}
	}
	if _, ok := gvc.mutation.CanTurbo(); !ok {
		return &ValidationError{Name: "can_turbo", err: errors.New(`ent: missing required field "GameVersion.can_turbo"`)}
	}
	if _, ok := gvc.mutation.URLMediaPack(); !ok {
		return &ValidationError{Name: "url_media_pack", err: errors.New(`ent: missing required field "GameVersion.url_media_pack"`)}
	}
	if _, ok := gvc.mutation.URLReleaseNote(); !ok {
		return &ValidationError{Name: "url_release_note", err: errors.New(`ent: missing required field "GameVersion.url_release_note"`)}
	}
	if _, ok := gvc.mutation.Deprecated(); !ok {
		return &ValidationError{Name: "deprecated", err: errors.New(`ent: missing required field "GameVersion.deprecated"`)}
	}
	if _, ok := gvc.mutation.AvailableMathVersions(); !ok {
		return &ValidationError{Name: "available_math_versions", err: errors.New(`ent: missing required field "GameVersion.available_math_versions"`)}
	}
	if _, ok := gvc.mutation.CanAutoBet(); !ok {
		return &ValidationError{Name: "can_auto_bet", err: errors.New(`ent: missing required field "GameVersion.can_auto_bet"`)}
	}
	if _, ok := gvc.mutation.URLGameManual(); !ok {
		return &ValidationError{Name: "url_game_manual", err: errors.New(`ent: missing required field "GameVersion.url_game_manual"`)}
	}
	if _, ok := gvc.mutation.CanAutoCashout(); !ok {
		return &ValidationError{Name: "can_auto_cashout", err: errors.New(`ent: missing required field "GameVersion.can_auto_cashout"`)}
	}
	if _, ok := gvc.mutation.CanBuyBonus(); !ok {
		return &ValidationError{Name: "can_buy_bonus", err: errors.New(`ent: missing required field "GameVersion.can_buy_bonus"`)}
	}
	if _, ok := gvc.mutation.CanAnteBet(); !ok {
		return &ValidationError{Name: "can_ante_bet", err: errors.New(`ent: missing required field "GameVersion.can_ante_bet"`)}
	}
	return nil
}

func (gvc *GameVersionCreate) sqlSave(ctx context.Context) (*GameVersion, error) {
	if err := gvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gvc.mutation.id = &_node.ID
	gvc.mutation.done = true
	return _node, nil
}

func (gvc *GameVersionCreate) createSpec() (*GameVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &GameVersion{config: gvc.config}
		_spec = sqlgraph.NewCreateSpec(gameversion.Table, sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeInt))
	)
	if value, ok := gvc.mutation.Version(); ok {
		_spec.SetField(gameversion.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := gvc.mutation.CanDemo(); ok {
		_spec.SetField(gameversion.FieldCanDemo, field.TypeBool, value)
		_node.CanDemo = value
	}
	if value, ok := gvc.mutation.CanTournament(); ok {
		_spec.SetField(gameversion.FieldCanTournament, field.TypeBool, value)
		_node.CanTournament = value
	}
	if value, ok := gvc.mutation.CanFreeBets(); ok {
		_spec.SetField(gameversion.FieldCanFreeBets, field.TypeBool, value)
		_node.CanFreeBets = value
	}
	if value, ok := gvc.mutation.CanDropAndWins(); ok {
		_spec.SetField(gameversion.FieldCanDropAndWins, field.TypeBool, value)
		_node.CanDropAndWins = value
	}
	if value, ok := gvc.mutation.CanTurbo(); ok {
		_spec.SetField(gameversion.FieldCanTurbo, field.TypeBool, value)
		_node.CanTurbo = value
	}
	if value, ok := gvc.mutation.URLMediaPack(); ok {
		_spec.SetField(gameversion.FieldURLMediaPack, field.TypeString, value)
		_node.URLMediaPack = value
	}
	if value, ok := gvc.mutation.URLReleaseNote(); ok {
		_spec.SetField(gameversion.FieldURLReleaseNote, field.TypeString, value)
		_node.URLReleaseNote = value
	}
	if value, ok := gvc.mutation.Deprecated(); ok {
		_spec.SetField(gameversion.FieldDeprecated, field.TypeBool, value)
		_node.Deprecated = value
	}
	if value, ok := gvc.mutation.AvailableMathVersions(); ok {
		_spec.SetField(gameversion.FieldAvailableMathVersions, field.TypeJSON, value)
		_node.AvailableMathVersions = value
	}
	if value, ok := gvc.mutation.CanAutoBet(); ok {
		_spec.SetField(gameversion.FieldCanAutoBet, field.TypeBool, value)
		_node.CanAutoBet = value
	}
	if value, ok := gvc.mutation.URLGameManual(); ok {
		_spec.SetField(gameversion.FieldURLGameManual, field.TypeString, value)
		_node.URLGameManual = value
	}
	if value, ok := gvc.mutation.CanAutoCashout(); ok {
		_spec.SetField(gameversion.FieldCanAutoCashout, field.TypeBool, value)
		_node.CanAutoCashout = value
	}
	if value, ok := gvc.mutation.CanBuyBonus(); ok {
		_spec.SetField(gameversion.FieldCanBuyBonus, field.TypeBool, value)
		_node.CanBuyBonus = value
	}
	if value, ok := gvc.mutation.CanAnteBet(); ok {
		_spec.SetField(gameversion.FieldCanAnteBet, field.TypeBool, value)
		_node.CanAnteBet = value
	}
	if nodes := gvc.mutation.GamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameversion.GamesTable,
			Columns: []string{gameversion.GamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_game_versions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gvc.mutation.GameTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameversion.GameTypeTable,
			Columns: []string{gameversion.GameTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gametype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_type_game_versions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gvc.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameversion.SessionsTable,
			Columns: []string{gameversion.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gvc.mutation.GameConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameversion.GameConfigsTable,
			Columns: []string{gameversion.GameConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gameconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GameVersionCreateBulk is the builder for creating many GameVersion entities in bulk.
type GameVersionCreateBulk struct {
	config
	err      error
	builders []*GameVersionCreate
}

// Save creates the GameVersion entities in the database.
func (gvcb *GameVersionCreateBulk) Save(ctx context.Context) ([]*GameVersion, error) {
	if gvcb.err != nil {
		return nil, gvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gvcb.builders))
	nodes := make([]*GameVersion, len(gvcb.builders))
	mutators := make([]Mutator, len(gvcb.builders))
	for i := range gvcb.builders {
		func(i int, root context.Context) {
			builder := gvcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gvcb *GameVersionCreateBulk) SaveX(ctx context.Context) []*GameVersion {
	v, err := gvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gvcb *GameVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := gvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gvcb *GameVersionCreateBulk) ExecX(ctx context.Context) {
	if err := gvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
