// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Lavizord/checkers-server/postgrescli/ent/round"
)

// Round is the model entity for the Round schema.
type Round struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// Operator holds the value of the "operator" field.
	Operator string `json:"operator,omitempty"`
	// Reels holds the value of the "reels" field.
	Reels map[string]interface{} `json:"reels,omitempty"`
	// Multipliers holds the value of the "multipliers" field.
	Multipliers map[string]interface{} `json:"multipliers,omitempty"`
	// BonusType holds the value of the "bonus_type" field.
	BonusType string `json:"bonus_type,omitempty"`
	// BonusSymbol holds the value of the "bonus_symbol" field.
	BonusSymbol int `json:"bonus_symbol,omitempty"`
	// BonusMultiplier holds the value of the "bonus_multiplier" field.
	BonusMultiplier int `json:"bonus_multiplier,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// RoundType holds the value of the "round_type" field.
	RoundType string `json:"round_type,omitempty"`
	// Play holds the value of the "play" field.
	Play map[string]interface{} `json:"play,omitempty"`
	// FreeSpinsRemaining holds the value of the "free_spins_remaining" field.
	FreeSpinsRemaining int `json:"free_spins_remaining,omitempty"`
	// MathOutput holds the value of the "math_output" field.
	MathOutput string `json:"math_output,omitempty"`
	// GameService holds the value of the "game_service" field.
	GameService map[string]interface{} `json:"game_service,omitempty"`
	// FreeSpinsCount holds the value of the "free_spins_count" field.
	FreeSpinsCount int `json:"free_spins_count,omitempty"`
	// AnteBet holds the value of the "ante_bet" field.
	AnteBet bool `json:"ante_bet,omitempty"`
	// BuyBonus holds the value of the "buy_bonus" field.
	BuyBonus string `json:"buy_bonus,omitempty"`
	// Character holds the value of the "character" field.
	Character int `json:"character,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoundQuery when eager-loading is set.
	Edges        RoundEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoundEdges holds the relations/edges for other nodes in the graph.
type RoundEdges struct {
	// Transactions holds the value of the transactions edge.
	Transactions []*Transaction `json:"transactions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TransactionsOrErr returns the Transactions value or an error if the edge
// was not loaded in eager-loading.
func (e RoundEdges) TransactionsOrErr() ([]*Transaction, error) {
	if e.loadedTypes[0] {
		return e.Transactions, nil
	}
	return nil, &NotLoadedError{edge: "transactions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Round) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case round.FieldReels, round.FieldMultipliers, round.FieldPlay, round.FieldGameService:
			values[i] = new([]byte)
		case round.FieldAnteBet:
			values[i] = new(sql.NullBool)
		case round.FieldID, round.FieldBonusSymbol, round.FieldBonusMultiplier, round.FieldFreeSpinsRemaining, round.FieldFreeSpinsCount, round.FieldCharacter:
			values[i] = new(sql.NullInt64)
		case round.FieldPlatform, round.FieldOperator, round.FieldBonusType, round.FieldRoundType, round.FieldMathOutput, round.FieldBuyBonus:
			values[i] = new(sql.NullString)
		case round.FieldTimestamp:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Round fields.
func (r *Round) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case round.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case round.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				r.Platform = value.String
			}
		case round.FieldOperator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operator", values[i])
			} else if value.Valid {
				r.Operator = value.String
			}
		case round.FieldReels:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field reels", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Reels); err != nil {
					return fmt.Errorf("unmarshal field reels: %w", err)
				}
			}
		case round.FieldMultipliers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field multipliers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Multipliers); err != nil {
					return fmt.Errorf("unmarshal field multipliers: %w", err)
				}
			}
		case round.FieldBonusType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bonus_type", values[i])
			} else if value.Valid {
				r.BonusType = value.String
			}
		case round.FieldBonusSymbol:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bonus_symbol", values[i])
			} else if value.Valid {
				r.BonusSymbol = int(value.Int64)
			}
		case round.FieldBonusMultiplier:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bonus_multiplier", values[i])
			} else if value.Valid {
				r.BonusMultiplier = int(value.Int64)
			}
		case round.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				r.Timestamp = value.Time
			}
		case round.FieldRoundType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field round_type", values[i])
			} else if value.Valid {
				r.RoundType = value.String
			}
		case round.FieldPlay:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field play", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Play); err != nil {
					return fmt.Errorf("unmarshal field play: %w", err)
				}
			}
		case round.FieldFreeSpinsRemaining:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field free_spins_remaining", values[i])
			} else if value.Valid {
				r.FreeSpinsRemaining = int(value.Int64)
			}
		case round.FieldMathOutput:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field math_output", values[i])
			} else if value.Valid {
				r.MathOutput = value.String
			}
		case round.FieldGameService:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field game_service", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.GameService); err != nil {
					return fmt.Errorf("unmarshal field game_service: %w", err)
				}
			}
		case round.FieldFreeSpinsCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field free_spins_count", values[i])
			} else if value.Valid {
				r.FreeSpinsCount = int(value.Int64)
			}
		case round.FieldAnteBet:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ante_bet", values[i])
			} else if value.Valid {
				r.AnteBet = value.Bool
			}
		case round.FieldBuyBonus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field buy_bonus", values[i])
			} else if value.Valid {
				r.BuyBonus = value.String
			}
		case round.FieldCharacter:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field character", values[i])
			} else if value.Valid {
				r.Character = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Round.
// This includes values selected through modifiers, order, etc.
func (r *Round) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryTransactions queries the "transactions" edge of the Round entity.
func (r *Round) QueryTransactions() *TransactionQuery {
	return NewRoundClient(r.config).QueryTransactions(r)
}

// Update returns a builder for updating this Round.
// Note that you need to call Round.Unwrap() before calling this method if this Round
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Round) Update() *RoundUpdateOne {
	return NewRoundClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Round entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Round) Unwrap() *Round {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Round is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Round) String() string {
	var builder strings.Builder
	builder.WriteString("Round(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("platform=")
	builder.WriteString(r.Platform)
	builder.WriteString(", ")
	builder.WriteString("operator=")
	builder.WriteString(r.Operator)
	builder.WriteString(", ")
	builder.WriteString("reels=")
	builder.WriteString(fmt.Sprintf("%v", r.Reels))
	builder.WriteString(", ")
	builder.WriteString("multipliers=")
	builder.WriteString(fmt.Sprintf("%v", r.Multipliers))
	builder.WriteString(", ")
	builder.WriteString("bonus_type=")
	builder.WriteString(r.BonusType)
	builder.WriteString(", ")
	builder.WriteString("bonus_symbol=")
	builder.WriteString(fmt.Sprintf("%v", r.BonusSymbol))
	builder.WriteString(", ")
	builder.WriteString("bonus_multiplier=")
	builder.WriteString(fmt.Sprintf("%v", r.BonusMultiplier))
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(r.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("round_type=")
	builder.WriteString(r.RoundType)
	builder.WriteString(", ")
	builder.WriteString("play=")
	builder.WriteString(fmt.Sprintf("%v", r.Play))
	builder.WriteString(", ")
	builder.WriteString("free_spins_remaining=")
	builder.WriteString(fmt.Sprintf("%v", r.FreeSpinsRemaining))
	builder.WriteString(", ")
	builder.WriteString("math_output=")
	builder.WriteString(r.MathOutput)
	builder.WriteString(", ")
	builder.WriteString("game_service=")
	builder.WriteString(fmt.Sprintf("%v", r.GameService))
	builder.WriteString(", ")
	builder.WriteString("free_spins_count=")
	builder.WriteString(fmt.Sprintf("%v", r.FreeSpinsCount))
	builder.WriteString(", ")
	builder.WriteString("ante_bet=")
	builder.WriteString(fmt.Sprintf("%v", r.AnteBet))
	builder.WriteString(", ")
	builder.WriteString("buy_bonus=")
	builder.WriteString(r.BuyBonus)
	builder.WriteString(", ")
	builder.WriteString("character=")
	builder.WriteString(fmt.Sprintf("%v", r.Character))
	builder.WriteByte(')')
	return builder.String()
}

// Rounds is a parsable slice of Round.
type Rounds []*Round
