// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Lavizord/checkers-server/postgrescli/ent/feature"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
	"github.com/Lavizord/checkers-server/postgrescli/ent/serie"
	"github.com/Lavizord/checkers-server/postgrescli/ent/seriefeature"
)

// SerieFeatureUpdate is the builder for updating SerieFeature entities.
type SerieFeatureUpdate struct {
	config
	hooks    []Hook
	mutation *SerieFeatureMutation
}

// Where appends a list predicates to the SerieFeatureUpdate builder.
func (sfu *SerieFeatureUpdate) Where(ps ...predicate.SerieFeature) *SerieFeatureUpdate {
	sfu.mutation.Where(ps...)
	return sfu
}

// SetFeaturesID sets the "features" edge to the Feature entity by ID.
func (sfu *SerieFeatureUpdate) SetFeaturesID(id int) *SerieFeatureUpdate {
	sfu.mutation.SetFeaturesID(id)
	return sfu
}

// SetNillableFeaturesID sets the "features" edge to the Feature entity by ID if the given value is not nil.
func (sfu *SerieFeatureUpdate) SetNillableFeaturesID(id *int) *SerieFeatureUpdate {
	if id != nil {
		sfu = sfu.SetFeaturesID(*id)
	}
	return sfu
}

// SetFeatures sets the "features" edge to the Feature entity.
func (sfu *SerieFeatureUpdate) SetFeatures(f *Feature) *SerieFeatureUpdate {
	return sfu.SetFeaturesID(f.ID)
}

// SetSeriesID sets the "series" edge to the Serie entity by ID.
func (sfu *SerieFeatureUpdate) SetSeriesID(id int) *SerieFeatureUpdate {
	sfu.mutation.SetSeriesID(id)
	return sfu
}

// SetNillableSeriesID sets the "series" edge to the Serie entity by ID if the given value is not nil.
func (sfu *SerieFeatureUpdate) SetNillableSeriesID(id *int) *SerieFeatureUpdate {
	if id != nil {
		sfu = sfu.SetSeriesID(*id)
	}
	return sfu
}

// SetSeries sets the "series" edge to the Serie entity.
func (sfu *SerieFeatureUpdate) SetSeries(s *Serie) *SerieFeatureUpdate {
	return sfu.SetSeriesID(s.ID)
}

// Mutation returns the SerieFeatureMutation object of the builder.
func (sfu *SerieFeatureUpdate) Mutation() *SerieFeatureMutation {
	return sfu.mutation
}

// ClearFeatures clears the "features" edge to the Feature entity.
func (sfu *SerieFeatureUpdate) ClearFeatures() *SerieFeatureUpdate {
	sfu.mutation.ClearFeatures()
	return sfu
}

// ClearSeries clears the "series" edge to the Serie entity.
func (sfu *SerieFeatureUpdate) ClearSeries() *SerieFeatureUpdate {
	sfu.mutation.ClearSeries()
	return sfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sfu *SerieFeatureUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sfu.sqlSave, sfu.mutation, sfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sfu *SerieFeatureUpdate) SaveX(ctx context.Context) int {
	affected, err := sfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sfu *SerieFeatureUpdate) Exec(ctx context.Context) error {
	_, err := sfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfu *SerieFeatureUpdate) ExecX(ctx context.Context) {
	if err := sfu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sfu *SerieFeatureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(seriefeature.Table, seriefeature.Columns, sqlgraph.NewFieldSpec(seriefeature.FieldID, field.TypeInt))
	if ps := sfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sfu.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seriefeature.FeaturesTable,
			Columns: []string{seriefeature.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sfu.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seriefeature.FeaturesTable,
			Columns: []string{seriefeature.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sfu.mutation.SeriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seriefeature.SeriesTable,
			Columns: []string{seriefeature.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serie.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sfu.mutation.SeriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seriefeature.SeriesTable,
			Columns: []string{seriefeature.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serie.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seriefeature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sfu.mutation.done = true
	return n, nil
}

// SerieFeatureUpdateOne is the builder for updating a single SerieFeature entity.
type SerieFeatureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SerieFeatureMutation
}

// SetFeaturesID sets the "features" edge to the Feature entity by ID.
func (sfuo *SerieFeatureUpdateOne) SetFeaturesID(id int) *SerieFeatureUpdateOne {
	sfuo.mutation.SetFeaturesID(id)
	return sfuo
}

// SetNillableFeaturesID sets the "features" edge to the Feature entity by ID if the given value is not nil.
func (sfuo *SerieFeatureUpdateOne) SetNillableFeaturesID(id *int) *SerieFeatureUpdateOne {
	if id != nil {
		sfuo = sfuo.SetFeaturesID(*id)
	}
	return sfuo
}

// SetFeatures sets the "features" edge to the Feature entity.
func (sfuo *SerieFeatureUpdateOne) SetFeatures(f *Feature) *SerieFeatureUpdateOne {
	return sfuo.SetFeaturesID(f.ID)
}

// SetSeriesID sets the "series" edge to the Serie entity by ID.
func (sfuo *SerieFeatureUpdateOne) SetSeriesID(id int) *SerieFeatureUpdateOne {
	sfuo.mutation.SetSeriesID(id)
	return sfuo
}

// SetNillableSeriesID sets the "series" edge to the Serie entity by ID if the given value is not nil.
func (sfuo *SerieFeatureUpdateOne) SetNillableSeriesID(id *int) *SerieFeatureUpdateOne {
	if id != nil {
		sfuo = sfuo.SetSeriesID(*id)
	}
	return sfuo
}

// SetSeries sets the "series" edge to the Serie entity.
func (sfuo *SerieFeatureUpdateOne) SetSeries(s *Serie) *SerieFeatureUpdateOne {
	return sfuo.SetSeriesID(s.ID)
}

// Mutation returns the SerieFeatureMutation object of the builder.
func (sfuo *SerieFeatureUpdateOne) Mutation() *SerieFeatureMutation {
	return sfuo.mutation
}

// ClearFeatures clears the "features" edge to the Feature entity.
func (sfuo *SerieFeatureUpdateOne) ClearFeatures() *SerieFeatureUpdateOne {
	sfuo.mutation.ClearFeatures()
	return sfuo
}

// ClearSeries clears the "series" edge to the Serie entity.
func (sfuo *SerieFeatureUpdateOne) ClearSeries() *SerieFeatureUpdateOne {
	sfuo.mutation.ClearSeries()
	return sfuo
}

// Where appends a list predicates to the SerieFeatureUpdate builder.
func (sfuo *SerieFeatureUpdateOne) Where(ps ...predicate.SerieFeature) *SerieFeatureUpdateOne {
	sfuo.mutation.Where(ps...)
	return sfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sfuo *SerieFeatureUpdateOne) Select(field string, fields ...string) *SerieFeatureUpdateOne {
	sfuo.fields = append([]string{field}, fields...)
	return sfuo
}

// Save executes the query and returns the updated SerieFeature entity.
func (sfuo *SerieFeatureUpdateOne) Save(ctx context.Context) (*SerieFeature, error) {
	return withHooks(ctx, sfuo.sqlSave, sfuo.mutation, sfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sfuo *SerieFeatureUpdateOne) SaveX(ctx context.Context) *SerieFeature {
	node, err := sfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sfuo *SerieFeatureUpdateOne) Exec(ctx context.Context) error {
	_, err := sfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfuo *SerieFeatureUpdateOne) ExecX(ctx context.Context) {
	if err := sfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sfuo *SerieFeatureUpdateOne) sqlSave(ctx context.Context) (_node *SerieFeature, err error) {
	_spec := sqlgraph.NewUpdateSpec(seriefeature.Table, seriefeature.Columns, sqlgraph.NewFieldSpec(seriefeature.FieldID, field.TypeInt))
	id, ok := sfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SerieFeature.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, seriefeature.FieldID)
		for _, f := range fields {
			if !seriefeature.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != seriefeature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sfuo.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seriefeature.FeaturesTable,
			Columns: []string{seriefeature.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sfuo.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seriefeature.FeaturesTable,
			Columns: []string{seriefeature.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sfuo.mutation.SeriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seriefeature.SeriesTable,
			Columns: []string{seriefeature.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serie.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sfuo.mutation.SeriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seriefeature.SeriesTable,
			Columns: []string{seriefeature.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serie.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SerieFeature{config: sfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seriefeature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sfuo.mutation.done = true
	return _node, nil
}
