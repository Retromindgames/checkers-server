// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Lavizord/checkers-server/postgrescli/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldID, id))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldType, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldDeletedAt, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAmount, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCurrency, v))
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPlatform, v))
}

// Operator applies equality check predicate on the "operator" field. It's identical to OperatorEQ.
func Operator(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldOperator, v))
}

// Client applies equality check predicate on the "client" field. It's identical to ClientEQ.
func Client(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldClient, v))
}

// Game applies equality check predicate on the "game" field. It's identical to GameEQ.
func Game(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldGame, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldStatus, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldDescription, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTimestamp, v))
}

// MathProfile applies equality check predicate on the "math_profile" field. It's identical to MathProfileEQ.
func MathProfile(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldMathProfile, v))
}

// Denominator applies equality check predicate on the "denominator" field. It's identical to DenominatorEQ.
func Denominator(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldDenominator, v))
}

// FinalBalance applies equality check predicate on the "final_balance" field. It's identical to FinalBalanceEQ.
func FinalBalance(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldFinalBalance, v))
}

// SeqID applies equality check predicate on the "seq_id" field. It's identical to SeqIDEQ.
func SeqID(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldSeqID, v))
}

// Multiplier applies equality check predicate on the "multiplier" field. It's identical to MultiplierEQ.
func Multiplier(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldMultiplier, v))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldToken, v))
}

// OriginalAmount applies equality check predicate on the "original_amount" field. It's identical to OriginalAmountEQ.
func OriginalAmount(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldOriginalAmount, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldType, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldDeletedAt))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldAmount, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldCurrency, v))
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPlatform, v))
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPlatform, v))
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPlatform, vs...))
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPlatform, vs...))
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPlatform, v))
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPlatform, v))
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPlatform, v))
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPlatform, v))
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldPlatform, v))
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldPlatform, v))
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldPlatform, v))
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldPlatform, v))
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldPlatform, v))
}

// OperatorEQ applies the EQ predicate on the "operator" field.
func OperatorEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldOperator, v))
}

// OperatorNEQ applies the NEQ predicate on the "operator" field.
func OperatorNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldOperator, v))
}

// OperatorIn applies the In predicate on the "operator" field.
func OperatorIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldOperator, vs...))
}

// OperatorNotIn applies the NotIn predicate on the "operator" field.
func OperatorNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldOperator, vs...))
}

// OperatorGT applies the GT predicate on the "operator" field.
func OperatorGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldOperator, v))
}

// OperatorGTE applies the GTE predicate on the "operator" field.
func OperatorGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldOperator, v))
}

// OperatorLT applies the LT predicate on the "operator" field.
func OperatorLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldOperator, v))
}

// OperatorLTE applies the LTE predicate on the "operator" field.
func OperatorLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldOperator, v))
}

// OperatorContains applies the Contains predicate on the "operator" field.
func OperatorContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldOperator, v))
}

// OperatorHasPrefix applies the HasPrefix predicate on the "operator" field.
func OperatorHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldOperator, v))
}

// OperatorHasSuffix applies the HasSuffix predicate on the "operator" field.
func OperatorHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldOperator, v))
}

// OperatorEqualFold applies the EqualFold predicate on the "operator" field.
func OperatorEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldOperator, v))
}

// OperatorContainsFold applies the ContainsFold predicate on the "operator" field.
func OperatorContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldOperator, v))
}

// ClientEQ applies the EQ predicate on the "client" field.
func ClientEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldClient, v))
}

// ClientNEQ applies the NEQ predicate on the "client" field.
func ClientNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldClient, v))
}

// ClientIn applies the In predicate on the "client" field.
func ClientIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldClient, vs...))
}

// ClientNotIn applies the NotIn predicate on the "client" field.
func ClientNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldClient, vs...))
}

// ClientGT applies the GT predicate on the "client" field.
func ClientGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldClient, v))
}

// ClientGTE applies the GTE predicate on the "client" field.
func ClientGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldClient, v))
}

// ClientLT applies the LT predicate on the "client" field.
func ClientLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldClient, v))
}

// ClientLTE applies the LTE predicate on the "client" field.
func ClientLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldClient, v))
}

// ClientContains applies the Contains predicate on the "client" field.
func ClientContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldClient, v))
}

// ClientHasPrefix applies the HasPrefix predicate on the "client" field.
func ClientHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldClient, v))
}

// ClientHasSuffix applies the HasSuffix predicate on the "client" field.
func ClientHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldClient, v))
}

// ClientEqualFold applies the EqualFold predicate on the "client" field.
func ClientEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldClient, v))
}

// ClientContainsFold applies the ContainsFold predicate on the "client" field.
func ClientContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldClient, v))
}

// GameEQ applies the EQ predicate on the "game" field.
func GameEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldGame, v))
}

// GameNEQ applies the NEQ predicate on the "game" field.
func GameNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldGame, v))
}

// GameIn applies the In predicate on the "game" field.
func GameIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldGame, vs...))
}

// GameNotIn applies the NotIn predicate on the "game" field.
func GameNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldGame, vs...))
}

// GameGT applies the GT predicate on the "game" field.
func GameGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldGame, v))
}

// GameGTE applies the GTE predicate on the "game" field.
func GameGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldGame, v))
}

// GameLT applies the LT predicate on the "game" field.
func GameLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldGame, v))
}

// GameLTE applies the LTE predicate on the "game" field.
func GameLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldGame, v))
}

// GameContains applies the Contains predicate on the "game" field.
func GameContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldGame, v))
}

// GameHasPrefix applies the HasPrefix predicate on the "game" field.
func GameHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldGame, v))
}

// GameHasSuffix applies the HasSuffix predicate on the "game" field.
func GameHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldGame, v))
}

// GameEqualFold applies the EqualFold predicate on the "game" field.
func GameEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldGame, v))
}

// GameContainsFold applies the ContainsFold predicate on the "game" field.
func GameContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldGame, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldStatus, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldDescription, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldTimestamp, v))
}

// MathProfileEQ applies the EQ predicate on the "math_profile" field.
func MathProfileEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldMathProfile, v))
}

// MathProfileNEQ applies the NEQ predicate on the "math_profile" field.
func MathProfileNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldMathProfile, v))
}

// MathProfileIn applies the In predicate on the "math_profile" field.
func MathProfileIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldMathProfile, vs...))
}

// MathProfileNotIn applies the NotIn predicate on the "math_profile" field.
func MathProfileNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldMathProfile, vs...))
}

// MathProfileGT applies the GT predicate on the "math_profile" field.
func MathProfileGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldMathProfile, v))
}

// MathProfileGTE applies the GTE predicate on the "math_profile" field.
func MathProfileGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldMathProfile, v))
}

// MathProfileLT applies the LT predicate on the "math_profile" field.
func MathProfileLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldMathProfile, v))
}

// MathProfileLTE applies the LTE predicate on the "math_profile" field.
func MathProfileLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldMathProfile, v))
}

// MathProfileContains applies the Contains predicate on the "math_profile" field.
func MathProfileContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldMathProfile, v))
}

// MathProfileHasPrefix applies the HasPrefix predicate on the "math_profile" field.
func MathProfileHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldMathProfile, v))
}

// MathProfileHasSuffix applies the HasSuffix predicate on the "math_profile" field.
func MathProfileHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldMathProfile, v))
}

// MathProfileIsNil applies the IsNil predicate on the "math_profile" field.
func MathProfileIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldMathProfile))
}

// MathProfileNotNil applies the NotNil predicate on the "math_profile" field.
func MathProfileNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldMathProfile))
}

// MathProfileEqualFold applies the EqualFold predicate on the "math_profile" field.
func MathProfileEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldMathProfile, v))
}

// MathProfileContainsFold applies the ContainsFold predicate on the "math_profile" field.
func MathProfileContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldMathProfile, v))
}

// DenominatorEQ applies the EQ predicate on the "denominator" field.
func DenominatorEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldDenominator, v))
}

// DenominatorNEQ applies the NEQ predicate on the "denominator" field.
func DenominatorNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldDenominator, v))
}

// DenominatorIn applies the In predicate on the "denominator" field.
func DenominatorIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldDenominator, vs...))
}

// DenominatorNotIn applies the NotIn predicate on the "denominator" field.
func DenominatorNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldDenominator, vs...))
}

// DenominatorGT applies the GT predicate on the "denominator" field.
func DenominatorGT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldDenominator, v))
}

// DenominatorGTE applies the GTE predicate on the "denominator" field.
func DenominatorGTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldDenominator, v))
}

// DenominatorLT applies the LT predicate on the "denominator" field.
func DenominatorLT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldDenominator, v))
}

// DenominatorLTE applies the LTE predicate on the "denominator" field.
func DenominatorLTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldDenominator, v))
}

// FinalBalanceEQ applies the EQ predicate on the "final_balance" field.
func FinalBalanceEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldFinalBalance, v))
}

// FinalBalanceNEQ applies the NEQ predicate on the "final_balance" field.
func FinalBalanceNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldFinalBalance, v))
}

// FinalBalanceIn applies the In predicate on the "final_balance" field.
func FinalBalanceIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldFinalBalance, vs...))
}

// FinalBalanceNotIn applies the NotIn predicate on the "final_balance" field.
func FinalBalanceNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldFinalBalance, vs...))
}

// FinalBalanceGT applies the GT predicate on the "final_balance" field.
func FinalBalanceGT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldFinalBalance, v))
}

// FinalBalanceGTE applies the GTE predicate on the "final_balance" field.
func FinalBalanceGTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldFinalBalance, v))
}

// FinalBalanceLT applies the LT predicate on the "final_balance" field.
func FinalBalanceLT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldFinalBalance, v))
}

// FinalBalanceLTE applies the LTE predicate on the "final_balance" field.
func FinalBalanceLTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldFinalBalance, v))
}

// SeqIDEQ applies the EQ predicate on the "seq_id" field.
func SeqIDEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldSeqID, v))
}

// SeqIDNEQ applies the NEQ predicate on the "seq_id" field.
func SeqIDNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldSeqID, v))
}

// SeqIDIn applies the In predicate on the "seq_id" field.
func SeqIDIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldSeqID, vs...))
}

// SeqIDNotIn applies the NotIn predicate on the "seq_id" field.
func SeqIDNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldSeqID, vs...))
}

// SeqIDGT applies the GT predicate on the "seq_id" field.
func SeqIDGT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldSeqID, v))
}

// SeqIDGTE applies the GTE predicate on the "seq_id" field.
func SeqIDGTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldSeqID, v))
}

// SeqIDLT applies the LT predicate on the "seq_id" field.
func SeqIDLT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldSeqID, v))
}

// SeqIDLTE applies the LTE predicate on the "seq_id" field.
func SeqIDLTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldSeqID, v))
}

// SeqIDIsNil applies the IsNil predicate on the "seq_id" field.
func SeqIDIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldSeqID))
}

// SeqIDNotNil applies the NotNil predicate on the "seq_id" field.
func SeqIDNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldSeqID))
}

// MultiplierEQ applies the EQ predicate on the "multiplier" field.
func MultiplierEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldMultiplier, v))
}

// MultiplierNEQ applies the NEQ predicate on the "multiplier" field.
func MultiplierNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldMultiplier, v))
}

// MultiplierIn applies the In predicate on the "multiplier" field.
func MultiplierIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldMultiplier, vs...))
}

// MultiplierNotIn applies the NotIn predicate on the "multiplier" field.
func MultiplierNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldMultiplier, vs...))
}

// MultiplierGT applies the GT predicate on the "multiplier" field.
func MultiplierGT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldMultiplier, v))
}

// MultiplierGTE applies the GTE predicate on the "multiplier" field.
func MultiplierGTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldMultiplier, v))
}

// MultiplierLT applies the LT predicate on the "multiplier" field.
func MultiplierLT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldMultiplier, v))
}

// MultiplierLTE applies the LTE predicate on the "multiplier" field.
func MultiplierLTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldMultiplier, v))
}

// MultiplierIsNil applies the IsNil predicate on the "multiplier" field.
func MultiplierIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldMultiplier))
}

// MultiplierNotNil applies the NotNil predicate on the "multiplier" field.
func MultiplierNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldMultiplier))
}

// GameServiceIsNil applies the IsNil predicate on the "game_service" field.
func GameServiceIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldGameService))
}

// GameServiceNotNil applies the NotNil predicate on the "game_service" field.
func GameServiceNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldGameService))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldToken, v))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldToken, v))
}

// OriginalAmountEQ applies the EQ predicate on the "original_amount" field.
func OriginalAmountEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldOriginalAmount, v))
}

// OriginalAmountNEQ applies the NEQ predicate on the "original_amount" field.
func OriginalAmountNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldOriginalAmount, v))
}

// OriginalAmountIn applies the In predicate on the "original_amount" field.
func OriginalAmountIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldOriginalAmount, vs...))
}

// OriginalAmountNotIn applies the NotIn predicate on the "original_amount" field.
func OriginalAmountNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldOriginalAmount, vs...))
}

// OriginalAmountGT applies the GT predicate on the "original_amount" field.
func OriginalAmountGT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldOriginalAmount, v))
}

// OriginalAmountGTE applies the GTE predicate on the "original_amount" field.
func OriginalAmountGTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldOriginalAmount, v))
}

// OriginalAmountLT applies the LT predicate on the "original_amount" field.
func OriginalAmountLT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldOriginalAmount, v))
}

// OriginalAmountLTE applies the LTE predicate on the "original_amount" field.
func OriginalAmountLTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldOriginalAmount, v))
}

// HasRounds applies the HasEdge predicate on the "rounds" edge.
func HasRounds() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoundsTable, RoundsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoundsWith applies the HasEdge predicate on the "rounds" edge with a given conditions (other predicates).
func HasRoundsWith(preds ...predicate.Round) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := newRoundsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.NotPredicates(p))
}
