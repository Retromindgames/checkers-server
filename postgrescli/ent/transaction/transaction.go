// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the transaction type in the database.
	Label = "transaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldOperator holds the string denoting the operator field in the database.
	FieldOperator = "operator"
	// FieldClient holds the string denoting the client field in the database.
	FieldClient = "client"
	// FieldGame holds the string denoting the game field in the database.
	FieldGame = "game"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldMathProfile holds the string denoting the math_profile field in the database.
	FieldMathProfile = "math_profile"
	// FieldDenominator holds the string denoting the denominator field in the database.
	FieldDenominator = "denominator"
	// FieldFinalBalance holds the string denoting the final_balance field in the database.
	FieldFinalBalance = "final_balance"
	// FieldSeqID holds the string denoting the seq_id field in the database.
	FieldSeqID = "seq_id"
	// FieldMultiplier holds the string denoting the multiplier field in the database.
	FieldMultiplier = "multiplier"
	// FieldGameService holds the string denoting the game_service field in the database.
	FieldGameService = "game_service"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldOriginalAmount holds the string denoting the original_amount field in the database.
	FieldOriginalAmount = "original_amount"
	// EdgeRounds holds the string denoting the rounds edge name in mutations.
	EdgeRounds = "rounds"
	// Table holds the table name of the transaction in the database.
	Table = "transactions"
	// RoundsTable is the table that holds the rounds relation/edge.
	RoundsTable = "transactions"
	// RoundsInverseTable is the table name for the Round entity.
	// It exists in this package in order to avoid circular dependency with the "round" package.
	RoundsInverseTable = "rounds"
	// RoundsColumn is the table column denoting the rounds relation/edge.
	RoundsColumn = "round_transactions"
)

// Columns holds all SQL columns for transaction fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldDeletedAt,
	FieldAmount,
	FieldCurrency,
	FieldPlatform,
	FieldOperator,
	FieldClient,
	FieldGame,
	FieldStatus,
	FieldDescription,
	FieldTimestamp,
	FieldMathProfile,
	FieldDenominator,
	FieldFinalBalance,
	FieldSeqID,
	FieldMultiplier,
	FieldGameService,
	FieldToken,
	FieldOriginalAmount,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "transactions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"round_transactions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTimestamp holds the default value on creation for the "timestamp" field.
	DefaultTimestamp func() time.Time
)

// OrderOption defines the ordering options for the Transaction queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByPlatform orders the results by the platform field.
func ByPlatform(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatform, opts...).ToFunc()
}

// ByOperator orders the results by the operator field.
func ByOperator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperator, opts...).ToFunc()
}

// ByClient orders the results by the client field.
func ByClient(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClient, opts...).ToFunc()
}

// ByGame orders the results by the game field.
func ByGame(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGame, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByMathProfile orders the results by the math_profile field.
func ByMathProfile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMathProfile, opts...).ToFunc()
}

// ByDenominator orders the results by the denominator field.
func ByDenominator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDenominator, opts...).ToFunc()
}

// ByFinalBalance orders the results by the final_balance field.
func ByFinalBalance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinalBalance, opts...).ToFunc()
}

// BySeqID orders the results by the seq_id field.
func BySeqID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeqID, opts...).ToFunc()
}

// ByMultiplier orders the results by the multiplier field.
func ByMultiplier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMultiplier, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// ByOriginalAmount orders the results by the original_amount field.
func ByOriginalAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginalAmount, opts...).ToFunc()
}

// ByRoundsField orders the results by rounds field.
func ByRoundsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoundsStep(), sql.OrderByField(field, opts...))
	}
}
func newRoundsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoundsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RoundsTable, RoundsColumn),
	)
}
