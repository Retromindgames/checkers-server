// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Lavizord/checkers-server/postgrescli/ent/operator"
	"github.com/Lavizord/checkers-server/postgrescli/ent/platform"
)

// Operator is the model entity for the Operator schema.
type Operator struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Alias holds the value of the "alias" field.
	Alias string `json:"alias,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OperatorQuery when eager-loading is set.
	Edges             OperatorEdges `json:"edges"`
	platform_operator *int
	selectValues      sql.SelectValues
}

// OperatorEdges holds the relations/edges for other nodes in the graph.
type OperatorEdges struct {
	// Platforms holds the value of the platforms edge.
	Platforms *Platform `json:"platforms,omitempty"`
	// Sessions holds the value of the sessions edge.
	Sessions []*Session `json:"sessions,omitempty"`
	// GameConfigs holds the value of the game_configs edge.
	GameConfigs []*GameConfig `json:"game_configs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PlatformsOrErr returns the Platforms value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OperatorEdges) PlatformsOrErr() (*Platform, error) {
	if e.Platforms != nil {
		return e.Platforms, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: platform.Label}
	}
	return nil, &NotLoadedError{edge: "platforms"}
}

// SessionsOrErr returns the Sessions value or an error if the edge
// was not loaded in eager-loading.
func (e OperatorEdges) SessionsOrErr() ([]*Session, error) {
	if e.loadedTypes[1] {
		return e.Sessions, nil
	}
	return nil, &NotLoadedError{edge: "sessions"}
}

// GameConfigsOrErr returns the GameConfigs value or an error if the edge
// was not loaded in eager-loading.
func (e OperatorEdges) GameConfigsOrErr() ([]*GameConfig, error) {
	if e.loadedTypes[2] {
		return e.GameConfigs, nil
	}
	return nil, &NotLoadedError{edge: "game_configs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Operator) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case operator.FieldID:
			values[i] = new(sql.NullInt64)
		case operator.FieldName, operator.FieldAlias:
			values[i] = new(sql.NullString)
		case operator.FieldCreatedAt, operator.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case operator.ForeignKeys[0]: // platform_operator
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Operator fields.
func (o *Operator) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case operator.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case operator.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				o.Name = value.String
			}
		case operator.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case operator.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				o.DeletedAt = new(time.Time)
				*o.DeletedAt = value.Time
			}
		case operator.FieldAlias:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alias", values[i])
			} else if value.Valid {
				o.Alias = value.String
			}
		case operator.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field platform_operator", value)
			} else if value.Valid {
				o.platform_operator = new(int)
				*o.platform_operator = int(value.Int64)
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Operator.
// This includes values selected through modifiers, order, etc.
func (o *Operator) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryPlatforms queries the "platforms" edge of the Operator entity.
func (o *Operator) QueryPlatforms() *PlatformQuery {
	return NewOperatorClient(o.config).QueryPlatforms(o)
}

// QuerySessions queries the "sessions" edge of the Operator entity.
func (o *Operator) QuerySessions() *SessionQuery {
	return NewOperatorClient(o.config).QuerySessions(o)
}

// QueryGameConfigs queries the "game_configs" edge of the Operator entity.
func (o *Operator) QueryGameConfigs() *GameConfigQuery {
	return NewOperatorClient(o.config).QueryGameConfigs(o)
}

// Update returns a builder for updating this Operator.
// Note that you need to call Operator.Unwrap() before calling this method if this Operator
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Operator) Update() *OperatorUpdateOne {
	return NewOperatorClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Operator entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Operator) Unwrap() *Operator {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Operator is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Operator) String() string {
	var builder strings.Builder
	builder.WriteString("Operator(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("name=")
	builder.WriteString(o.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := o.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("alias=")
	builder.WriteString(o.Alias)
	builder.WriteByte(')')
	return builder.String()
}

// Operators is a parsable slice of Operator.
type Operators []*Operator
